import json
import hmac
import hashlib
import time
import threading
import urllib.request
import urllib.parse
import numpy as np
import websocket
import logging
import requests
import os
import math
from datetime import datetime
from concurrent.futures import ThreadPoolExecutor

# C·∫•u h√¨nh logging chi ti·∫øt
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(module)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('bot_errors.log')
    ]
)
logger = logging.getLogger()
logger.setLevel(logging.INFO)

# L·∫•y c·∫•u h√¨nh t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
BINANCE_API_KEY = os.getenv('BINANCE_API_KEY', '')
BINANCE_SECRET_KEY = os.getenv('BINANCE_SECRET_KEY', '')
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID', '')
    
# C·∫•u h√¨nh bot t·ª´ bi·∫øn m√¥i tr∆∞·ªùng (d·∫°ng JSON)
bot_config_json = os.getenv('BOT_CONFIGS', '[]')
try:
    BOT_CONFIGS = json.loads(bot_config_json)
except Exception as e:
    logging.error(f"L·ªói ph√¢n t√≠ch c·∫•u h√¨nh BOT_CONFIGS: {e}")
    BOT_CONFIGS = []

API_KEY = BINANCE_API_KEY
API_SECRET = BINANCE_SECRET_KEY

# ========== H√ÄM G·ª¨I TELEGRAM V√Ä X·ª¨ L√ù L·ªñI ==========
def send_telegram(message, chat_id=None, reply_markup=None):
    """G·ª≠i th√¥ng b√°o qua Telegram v·ªõi x·ª≠ l√Ω l·ªói chi ti·∫øt"""
    if not TELEGRAM_BOT_TOKEN:
        logger.warning("C·∫•u h√¨nh Telegram Bot Token ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p")
        return
    
    chat_id = chat_id or TELEGRAM_CHAT_ID
    if not chat_id:
        logger.warning("C·∫•u h√¨nh Telegram Chat ID ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p")
        return
    
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": message,
        "parse_mode": "HTML"
    }
    
    if reply_markup:
        payload["reply_markup"] = json.dumps(reply_markup)
    
    try:
        response = requests.post(url, json=payload, timeout=15)
        if response.status_code != 200:
            error_msg = response.text
            logger.error(f"L·ªói g·ª≠i Telegram ({response.status_code}): {error_msg}")
    except Exception as e:
        logger.error(f"L·ªói k·∫øt n·ªëi Telegram: {str(e)}")

# ========== H√ÄM T·∫†O MENU TELEGRAM ==========
def create_menu_keyboard():
    """T·∫°o menu 3 n√∫t cho Telegram"""
    return {
        "keyboard": [
            [{"text": "üìä Danh s√°ch Bot"}],
            [{"text": "‚ûï Th√™m Bot"}, {"text": "‚õî D·ª´ng Bot"}],
            [{"text": "üí∞ S·ªë d∆∞ t√†i kho·∫£n"}, {"text": "üìà V·ªã th·∫ø ƒëang m·ªü"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": False
    }

def create_cancel_keyboard():
    """T·∫°o b√†n ph√≠m h·ªßy"""
    return {
        "keyboard": [[{"text": "‚ùå H·ªßy b·ªè"}]],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_symbols_keyboard():
    """T·∫°o b√†n ph√≠m ch·ªçn c·∫∑p coin"""
    popular_symbols = ["SUIUSDT", "DOGEUSDT", "1000PEPEUSDT", "TRUMPUSDT", "XRPUSDT", "ADAUSDT"]
    keyboard = []
    row = []
    for symbol in popular_symbols:
        row.append({"text": symbol})
        if len(row) == 2:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    keyboard.append([{"text": "‚ùå H·ªßy b·ªè"}])
    
    return {
        "keyboard": keyboard,
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_leverage_keyboard():
    """T·∫°o b√†n ph√≠m ch·ªçn ƒë√≤n b·∫©y"""
    leverages = ["3", "8", "10", "20", "30", "50", "75", "100"]
    keyboard = []
    row = []
    for lev in leverages:
        row.append({"text": f" {lev}x"})
        if len(row) == 3:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    keyboard.append([{"text": "‚ùå H·ªßy b·ªè"}])
    
    return {
        "keyboard": keyboard,
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

# ========== H√ÄM H·ªñ TR·ª¢ API BINANCE V·ªöI X·ª¨ L√ù L·ªñI CHI TI·∫æT ==========
def sign(query):
    try:
        return hmac.new(API_SECRET.encode(), query.encode(), hashlib.sha256).hexdigest()
    except Exception as e:
        logger.error(f"L·ªói t·∫°o ch·ªØ k√Ω: {str(e)}")
        send_telegram(f"‚ö†Ô∏è <b>L·ªñI SIGN:</b> {str(e)}")
        return ""

def binance_api_request(url, method='GET', params=None, headers=None):
    """H√†m t·ªïng qu√°t cho c√°c y√™u c·∫ßu API Binance v·ªõi x·ª≠ l√Ω l·ªói chi ti·∫øt"""
    max_retries = 3
    for attempt in range(max_retries):
        try:
            if method.upper() == 'GET':
                if params:
                    query = urllib.parse.urlencode(params)
                    url = f"{url}?{query}"
                req = urllib.request.Request(url, headers=headers or {})
            else:
                data = urllib.parse.urlencode(params).encode() if params else None
                req = urllib.request.Request(url, data=data, headers=headers or {}, method=method)
            
            with urllib.request.urlopen(req, timeout=15) as response:
                if response.status == 200:
                    return json.loads(response.read().decode())
                else:
                    logger.error(f"L·ªói API ({response.status}): {response.read().decode()}")
                    if response.status == 429:  # Rate limit
                        time.sleep(2 ** attempt)  # Exponential backoff
                    elif response.status >= 500:
                        time.sleep(1)
                    continue
        except urllib.error.HTTPError as e:
            logger.error(f"L·ªói HTTP ({e.code}): {e.reason}")
            if e.code == 429:  # Rate limit
                time.sleep(2 ** attempt)  # Exponential backoff
            elif e.code >= 500:
                time.sleep(1)
            continue
        except Exception as e:
            logger.error(f"L·ªói k·∫øt n·ªëi API: {str(e)}")
            time.sleep(1)
    
    logger.error(f"Kh√¥ng th·ªÉ th·ª±c hi·ªán y√™u c·∫ßu API sau {max_retries} l·∫ßn th·ª≠")
    return None

def get_step_size(symbol):
    url = "https://fapi.binance.com/fapi/v1/exchangeInfo"
    try:
        data = binance_api_request(url)
        if not data:
            return 0.001
            
        for s in data['symbols']:
            if s['symbol'] == symbol.upper():
                for f in s['filters']:
                    if f['filterType'] == 'LOT_SIZE':
                        return float(f['stepSize'])
    except Exception as e:
        logger.error(f"L·ªói l·∫•y step size: {str(e)}")
        send_telegram(f"‚ö†Ô∏è <b>L·ªñI STEP SIZE:</b> {symbol} - {str(e)}")
    return 0.001

def set_leverage(symbol, lev):
    try:
        ts = int(time.time() * 1000)
        params = {
            "symbol": symbol.upper(),
            "leverage": lev,
            "timestamp": ts
        }
        query = urllib.parse.urlencode(params)
        sig = sign(query)
        url = f"https://fapi.binance.com/fapi/v1/leverage?{query}&signature={sig}"
        headers = {'X-MBX-APIKEY': API_KEY}
        
        response = binance_api_request(url, method='POST', headers=headers)
        if response and 'leverage' in response:
            return True
    except Exception as e:
        logger.error(f"L·ªói thi·∫øt l·∫≠p ƒë√≤n b·∫©y: {str(e)}")
        send_telegram(f"‚ö†Ô∏è <b>L·ªñI ƒê√íN B·∫®Y:</b> {symbol} - {str(e)}")
    return False

def get_balance():
    try:
        ts = int(time.time() * 1000)
        params = {"timestamp": ts}
        query = urllib.parse.urlencode(params)
        sig = sign(query)
        url = f"https://fapi.binance.com/fapi/v2/account?{query}&signature={sig}"
        headers = {'X-MBX-APIKEY': API_KEY}
        
        data = binance_api_request(url, headers=headers)
        if not data:
            return 0
            
        for asset in data['assets']:
            if asset['asset'] == 'USDT':
                return float(asset['availableBalance'])
    except Exception as e:
        logger.error(f"L·ªói l·∫•y s·ªë d∆∞: {str(e)}")
        send_telegram(f"‚ö†Ô∏è <b>L·ªñI S·ªê D∆Ø:</b> {str(e)}")
    return 0

def place_order(symbol, side, qty):
    try:
        ts = int(time.time() * 1000)
        params = {
            "symbol": symbol.upper(),
            "side": side,
            "type": "MARKET",
            "quantity": qty,
            "timestamp": ts
        }
        query = urllib.parse.urlencode(params)
        sig = sign(query)
        url = f"https://fapi.binance.com/fapi/v1/order?{query}&signature={sig}"
        headers = {'X-MBX-APIKEY': API_KEY}
        
        return binance_api_request(url, method='POST', headers=headers)
    except Exception as e:
        logger.error(f"L·ªói ƒë·∫∑t l·ªánh: {str(e)}")
        send_telegram(f"‚ö†Ô∏è <b>L·ªñI ƒê·∫∂T L·ªÜNH:</b> {symbol} - {str(e)}")
    return None

def cancel_all_orders(symbol):
    try:
        ts = int(time.time() * 1000)
        params = {"symbol": symbol.upper(), "timestamp": ts}
        query = urllib.parse.urlencode(params)
        sig = sign(query)
        url = f"https://fapi.binance.com/fapi/v1/allOpenOrders?{query}&signature={sig}"
        headers = {'X-MBX-APIKEY': API_KEY}
        
        binance_api_request(url, method='DELETE', headers=headers)
        return True
    except Exception as e:
        logger.error(f"L·ªói h·ªßy l·ªánh: {str(e)}")
        send_telegram(f"‚ö†Ô∏è <b>L·ªñI H·ª¶Y L·ªÜNH:</b> {symbol} - {str(e)}")
    return False

def get_current_price(symbol):
    try:
        url = f"https://fapi.binance.com/fapi/v1/ticker/price?symbol={symbol.upper()}"
        data = binance_api_request(url)
        if data and 'price' in data:
            return float(data['price'])
    except Exception as e:
        logger.error(f"L·ªói l·∫•y gi√°: {str(e)}")
        send_telegram(f"‚ö†Ô∏è <b>L·ªñI GI√Å:</b> {symbol} - {str(e)}")
    return 0

def get_positions(symbol=None):
    try:
        ts = int(time.time() * 1000)
        params = {"timestamp": ts}
        if symbol:
            params["symbol"] = symbol.upper()
            
        query = urllib.parse.urlencode(params)
        sig = sign(query)
        url = f"https://fapi.binance.com/fapi/v2/positionRisk?{query}&signature={sig}"
        headers = {'X-MBX-APIKEY': API_KEY}
        
        positions = binance_api_request(url, headers=headers)
        if not positions:
            return []
            
        if symbol:
            for pos in positions:
                if pos['symbol'] == symbol.upper():
                    return [pos]
            
        return positions
    except Exception as e:
        logger.error(f"L·ªói l·∫•y v·ªã th·∫ø: {str(e)}")
        send_telegram(f"‚ö†Ô∏è <b>L·ªñI V·ªä TH·∫æ:</b> {symbol if symbol else ''} - {str(e)}")
    return []

# ========== H√ÄM BI·∫æN ƒê·ªòNG 24H (LOGIC T·ª™ FILE 49) ==========
def get_24h_ticker_data():
    """L·∫•y d·ªØ li·ªáu ticker 24h cho t·∫•t c·∫£ symbol t·ª´ Binance"""
    try:
        url = "https://fapi.binance.com/fapi/v1/ticker/24hr"
        data = binance_api_request(url)
        return data if data else []
    except Exception as e:
        logger.error(f"L·ªói l·∫•y d·ªØ li·ªáu ticker 24h: {str(e)}")
        return []

def get_24h_change(symbol):
    """L·∫•y % thay ƒë·ªïi gi√° 24h cho m·ªôt symbol"""
    try:
        url = f"https://fapi.binance.com/fapi/v1/ticker/24hr?symbol={symbol.upper()}"
        data = binance_api_request(url)
        if data and 'priceChangePercent' in data:
            return float(data['priceChangePercent'])
    except Exception as e:
        logger.error(f"L·ªói l·∫•y bi·∫øn ƒë·ªông 24h cho {symbol}: {str(e)}")
    return 0

def get_signal(symbol, threshold=30):
    """
    LOGIC T·ª™ FILE 49: T√≠n hi·ªáu d·ª±a tr√™n bi·∫øn ƒë·ªông 24h
    - TƒÉng >threshold% -> SELL (k·ª≥ v·ªçng ƒëi·ªÅu ch·ªânh gi·∫£m)
    - Gi·∫£m >threshold% -> BUY (k·ª≥ v·ªçng ph·ª•c h·ªìi)
    
    C√ì TH·ªÇ THAY ƒê·ªîI threshold 30% TH√ÄNH GI√Å TR·ªä KH√ÅC
    """
    change_24h = get_24h_change(symbol)
    
    if abs(change_24h) >= threshold:
        if change_24h > 0:
            return "SELL", change_24h
        else:
            return "BUY", abs(change_24h)
    
    return None, change_24h

# ========== QU·∫¢N L√ù WEBSOCKET HI·ªÜU QU·∫¢ V·ªöI KI·ªÇM SO√ÅT L·ªñI ==========
class WebSocketManager:
    def __init__(self):
        self.connections = {}
        self.executor = ThreadPoolExecutor(max_workers=10)
        self._lock = threading.Lock()
        self._stop_event = threading.Event()
        
    def add_symbol(self, symbol, callback):
        symbol = symbol.upper()
        with self._lock:
            if symbol not in self.connections:
                self._create_connection(symbol, callback)
                
    def _create_connection(self, symbol, callback):
        if self._stop_event.is_set():
            return
            
        stream = f"{symbol.lower()}@trade"
        url = f"wss://fstream.binance.com/ws/{stream}"
        
        def on_message(ws, message):
            try:
                data = json.loads(message)
                if 'p' in data:
                    price = float(data['p'])
                    self.executor.submit(callback, price)
            except Exception as e:
                logger.error(f"L·ªói x·ª≠ l√Ω tin nh·∫Øn WebSocket {symbol}: {str(e)}")
                
        def on_error(ws, error):
            logger.error(f"L·ªói WebSocket {symbol}: {str(error)}")
            if not self._stop_event.is_set():
                time.sleep(5)
                self._reconnect(symbol, callback)
            
        def on_close(ws, close_status_code, close_msg):
            logger.info(f"WebSocket ƒë√≥ng {symbol}: {close_status_code} - {close_msg}")
            if not self._stop_event.is_set() and symbol in self.connections:
                time.sleep(5)
                self._reconnect(symbol, callback)
                
        ws = websocket.WebSocketApp(
            url,
            on_message=on_message,
            on_error=on_error,
            on_close=on_close
        )
        
        thread = threading.Thread(target=ws.run_forever, daemon=True)
        thread.start()
        
        self.connections[symbol] = {
            'ws': ws,
            'thread': thread,
            'callback': callback
        }
        logger.info(f"WebSocket b·∫Øt ƒë·∫ßu cho {symbol}")
        
    def _reconnect(self, symbol, callback):
        logger.info(f"K·∫øt n·ªëi l·∫°i WebSocket cho {symbol}")
        self.remove_symbol(symbol)
        self._create_connection(symbol, callback)
        
    def remove_symbol(self, symbol):
        symbol = symbol.upper()
        with self._lock:
            if symbol in self.connections:
                try:
                    self.connections[symbol]['ws'].close()
                except Exception as e:
                    logger.error(f"L·ªói ƒë√≥ng WebSocket {symbol}: {str(e)}")
                del self.connections[symbol]
                logger.info(f"WebSocket ƒë√£ x√≥a cho {symbol}")
                
    def stop(self):
        self._stop_event.set()
        for symbol in list(self.connections.keys()):
            self.remove_symbol(symbol)

# ========== BOT CH√çNH V·ªöI LOGIC BI·∫æN ƒê·ªòNG 24H ==========
class IndicatorBot:
    def __init__(self, symbol, lev, percent, tp, sl, ws_manager, threshold=30):
        self.symbol = symbol.upper()
        self.lev = lev
        self.percent = percent
        self.tp = tp
        self.sl = sl
        self.threshold = threshold  # Ng∆∞·ª°ng bi·∫øn ƒë·ªông - C√ì TH·ªÇ TU·ª≤ CH·ªàNH
        self.ws_manager = ws_manager
        
        self.check_position_status()
        self.status = "waiting"
        self.side = ""
        self.qty = 0
        self.entry = 0
        self.prices = []

        self._stop = False
        self.position_open = False
        self.last_trade_time = 0
        self.position_check_interval = 30
        self.last_position_check = 0
        self.last_error_log_time = 0
        self.last_signal_check = 0
        self.signal_check_interval = 300  # Ki·ªÉm tra t√≠n hi·ªáu m·ªói 5 ph√∫t
        self.cooldown_period = 1800  # Th·ªùi gian ch·ªù 30 ph√∫t sau khi ƒë√≥ng l·ªánh
        
        # TH√äM BI·∫æN M·ªöI ƒê·ªÇ QU·∫¢N L√ù TR·∫†NG TH√ÅI
        self.is_closing = False  # Tr√°nh ƒë√≥ng l·ªánh nhi·ªÅu l·∫ßn
        self.is_opening = False  # Tr√°nh m·ªü l·ªánh nhi·ªÅu l·∫ßn
        self.last_position_verified = 0
        self.position_verify_interval = 10  # X√°c minh position m·ªói 10 gi√¢y
        
        # Start WebSocket and main loop
        self.ws_manager.add_symbol(self.symbol, self._handle_price_update)
        self.thread = threading.Thread(target=self._run, daemon=True)
        self.thread.start()
        self.log(f"üü¢ Bot kh·ªüi ƒë·ªông cho {self.symbol} | ƒêB: {lev}x | %: {percent} | TP/SL: {tp}%/{sl}% | Ng∆∞·ª°ng: {threshold}%")

    def calculate_roi(self):
        """T√≠nh ROI hi·ªán t·∫°i c·ªßa position"""
        if not self.position_open or self.entry == 0:
            return 0.0
        
        current_price = self.prices[-1] if self.prices else self.entry
        if self.side == "BUY":
            roi = ((current_price - self.entry) / self.entry) * self.lev * 100
        else:  # SELL
            roi = ((self.entry - current_price) / self.entry) * self.lev * 100
        
        return roi

    def log(self, message, is_critical=True):
        """Ghi log v√† g·ª≠i Telegram cho th√¥ng b√°o quan tr·ªçng"""
        logger.info(f"[{self.symbol}] {message}")
        if is_critical:
            send_telegram(f"<b>{self.symbol}</b>: {message}")

    def _handle_price_update(self, price):
        """X·ª≠ l√Ω c·∫≠p nh·∫≠t gi√° real-time t·ª´ WebSocket"""
        if self._stop:
            return
        
        if not self.prices or price != self.prices[-1]:
            self.prices.append(price)
            if len(self.prices) > 100:
                self.prices = self.prices[-100:]
            
            # Ki·ªÉm tra TP/SL real-time - CH·ªà KHI KH√îNG ƒêANG ƒê√ìNG L·ªÜNH
            if self.position_open and not self.is_closing:
                self.check_tp_sl()

    def _run(self):
        """Lu·ªìng ch√≠nh v·ªõi gi√°m s√°t bi·∫øn ƒë·ªông 24h"""
        self.log("üîç B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p ch√≠nh v·ªõi gi√°m s√°t bi·∫øn ƒë·ªông 24h...")
        
        while not self._stop:
            try:
                current_time = time.time()
                
                # X√°c minh position ƒë·ªãnh k·ª≥ ƒë·ªÉ tr√°nh sai l·ªách
                if current_time - self.last_position_verified > self.position_verify_interval:
                    self.verify_position_status()
                    self.last_position_verified = current_time
                
                # Ki·ªÉm tra tr·∫°ng th√°i v·ªã th·∫ø m·ªói 30 gi√¢y
                if current_time - self.last_position_check > self.position_check_interval:
                    self.check_position_status()
                    self.last_position_check = current_time
                
                # Ki·ªÉm tra t√≠n hi·ªáu giao d·ªãch m·ªói 5 ph√∫t - CH·ªà KHI KH√îNG C√ì POSITION V√Ä KH√îNG ƒêANG ƒê√ìNG
                if (current_time - self.last_signal_check > self.signal_check_interval and 
                    not self.position_open and not self.is_closing):
                    
                    signal, change_percent = get_signal(self.symbol, self.threshold)
                    
                    if signal:
                        log_msg = f"üìà Bi·∫øn ƒë·ªông 24h: {change_percent:.2f}% | T√≠n hi·ªáu: {signal} | Ng∆∞·ª°ng: {self.threshold}%"
                        self.log(log_msg, is_critical=False)
                        
                        # TH√äM ƒêI·ªÄU KI·ªÜN B·∫¢O V·ªÜ: Ch·ªâ m·ªü l·ªánh khi kh√¥ng ƒëang ƒë√≥ng v√† ƒë·ªß th·ªùi gian ch·ªù
                        if (current_time - self.last_trade_time > self.cooldown_period and 
                            not self.is_closing and not self.is_opening):
                            
                            self.open_position(signal, change_percent)
                            self.last_trade_time = current_time
                    
                    self.last_signal_check = current_time
                
                # Ki·ªÉm tra TP/SL cho position ƒëang m·ªü - CH·ªà KHI KH√îNG ƒêANG ƒê√ìNG
                if self.position_open and not self.is_closing:
                    self.check_tp_sl()
                
                time.sleep(5)
                
            except Exception as e:
                if time.time() - self.last_error_log_time > 30:
                    self.log(f"‚ùå L·ªói v√≤ng l·∫∑p ch√≠nh: {str(e)}", is_critical=False)
                    self.last_error_log_time = time.time()
                time.sleep(10)

    def verify_position_status(self):
        """X√°c minh k·ªπ tr·∫°ng th√°i position t·ª´ Binance"""
        try:
            positions = get_positions(self.symbol)
            if not positions:
                if self.position_open:
                    self.log("‚ö†Ô∏è Position kh√¥ng kh·ªõp: Local n√≥i open nh∆∞ng Binance n√≥i closed")
                    self.position_open = False
                    self.status = "waiting"
                    self.side = ""
                    self.qty = 0
                    self.entry = 0
                return
                
            for pos in positions:
                if pos['symbol'] == self.symbol:
                    position_amt = float(pos.get('positionAmt', 0))
                    if abs(position_amt) > 0:
                        # C√≥ position tr√™n Binance
                        if not self.position_open:
                            self.log("‚ö†Ô∏è Position kh√¥ng kh·ªõp: Local n√≥i closed nh∆∞ng Binance n√≥i open")
                            self.position_open = True
                            self.status = "open"
                            self.side = "BUY" if position_amt > 0 else "SELL"
                            self.qty = position_amt
                            self.entry = float(pos.get('entryPrice', 0))
                        return
                    else:
                        # Kh√¥ng c√≥ position tr√™n Binance
                        if self.position_open:
                            self.log("‚ö†Ô∏è Position kh√¥ng kh·ªõp: Local n√≥i open nh∆∞ng Binance n√≥i closed")
                            self.position_open = False
                            self.status = "waiting"
                            self.side = ""
                            self.qty = 0
                            self.entry = 0
                        
        except Exception as e:
            logger.error(f"L·ªói x√°c minh position cho {self.symbol}: {str(e)}")

    def check_position_status(self):
        """Ki·ªÉm tra tr·∫°ng th√°i position v·ªõi x·ª≠ l√Ω l·ªói t·ªët h∆°n"""
        try:
            positions = get_positions(self.symbol)
            if not positions:
                if self.position_open:
                    self.log("üì≠ Position ƒë√£ ƒë√≥ng t·ª´ b√™n ngo√†i")
                self._reset_position_state()
                return
                
            for pos in positions:
                if pos['symbol'] == self.symbol:
                    position_amt = float(pos.get('positionAmt', 0))
                    if abs(position_amt) > 0:
                        # C√≥ position ƒëang m·ªü
                        if not self.position_open or abs(self.qty - position_amt) > 0.0001:
                            self.position_open = True
                            self.status = "open"
                            self.side = "BUY" if position_amt > 0 else "SELL"
                            self.qty = position_amt
                            self.entry = float(pos.get('entryPrice', 0))
                        return
                    else:
                        # Position ƒë√£ ƒë√≥ng
                        if self.position_open:
                            self.log("üì≠ Position ƒë√£ ƒë√≥ng")
                        self._reset_position_state()
                        return
                        
            # Kh√¥ng t√¨m th·∫•y position cho symbol
            if self.position_open:
                self.log("üì≠ Kh√¥ng t√¨m th·∫•y position cho symbol")
            self._reset_position_state()
            
        except Exception as e:
            if time.time() - self.last_error_log_time > 30:
                self.log(f"L·ªói ki·ªÉm tra position: {str(e)}")
                self.last_error_log_time = time.time()

    def _reset_position_state(self):
        """Reset tr·∫°ng th√°i position v·ªÅ m·∫∑c ƒë·ªãnh"""
        self.position_open = False
        self.status = "waiting"
        self.side = ""
        self.qty = 0
        self.entry = 0
        self.is_closing = False
        self.is_opening = False

    def check_tp_sl(self):
        """Ki·ªÉm tra TP/SL v·ªõi c∆° ch·∫ø b·∫£o v·ªá"""
        if not self.position_open or not self.entry or not self.qty or self.is_closing:
            return
            
        try:
            current_price = self.prices[-1] if self.prices else get_current_price(self.symbol)
            if current_price <= 0:
                return
                
            roi = self.calculate_roi()
            
            if roi >= self.tp:
                self.close_position(f"‚úÖ ƒê·∫°t TP {self.tp}% (ROI: {roi:.2f}%)")
            elif self.sl is not None and self.sl > 0 and roi <= -self.sl:
                self.close_position(f"‚ùå ƒê·∫°t SL {self.sl}% (ROI: {roi:.2f}%)")
                
        except Exception as e:
            if time.time() - self.last_error_log_time > 30:
                self.log(f"L·ªói ki·ªÉm tra TP/SL: {str(e)}")
                self.last_error_log_time = time.time()

    def open_position(self, side, change_percent):
        """M·ªü position v·ªõi c∆° ch·∫ø ch·ªëng tr√πng l·∫∑p"""
        if self.is_opening or self.is_closing:
            self.log("‚ö†Ô∏è ƒêang trong qu√° tr√¨nh m·ªü/ƒë√≥ng, b·ªè qua")
            return
            
        self.is_opening = True
        try:
            # Ki·ªÉm tra l·∫°i tr·∫°ng th√°i tr∆∞·ªõc khi m·ªü
            self.check_position_status()
            if self.position_open:
                self.log("‚ö†Ô∏è Position ƒë√£ m·ªü, b·ªè qua m·ªü m·ªõi")
                self.is_opening = False
                return
                
            # H·ªßy l·ªánh t·ªìn ƒë·ªçng
            cancel_all_orders(self.symbol)
            
            # ƒê·∫∑t ƒë√≤n b·∫©y
            if not set_leverage(self.symbol, self.lev):
                self.log(f"‚ùå Kh√¥ng th·ªÉ ƒë·∫∑t ƒë√≤n b·∫©y {self.lev}")
                self.is_opening = False
                return
                
            # T√≠nh to√°n kh·ªëi l∆∞·ª£ng
            balance = get_balance()
            if balance <= 0:
                self.log("‚ùå Kh√¥ng ƒë·ªß s·ªë d∆∞ USDT")
                self.is_opening = False
                return
                
            usdt_amount = balance * (min(max(self.percent, 1), 100) / 100)
            price = get_current_price(self.symbol)
            if price <= 0:
                self.log("‚ùå L·ªói l·∫•y gi√°")
                self.is_opening = False
                return
                
            step = get_step_size(self.symbol)
            if step <= 0:
                step = 0.001
                
            qty = (usdt_amount * self.lev) / price
            if step > 0:
                qty = math.floor(qty / step) * step
                
            qty = max(qty, step)
            qty = round(qty, 8)
            
            if qty < step:
                self.log(f"‚ö†Ô∏è Kh·ªëi l∆∞·ª£ng qu√° nh·ªè: {qty} < {step}")
                self.is_opening = False
                return
                
            # ƒê·∫∑t l·ªánh
            res = place_order(self.symbol, side, qty)
            if not res:
                self.log("‚ùå L·ªói ƒë·∫∑t l·ªánh")
                self.is_opening = False
                return
                
            executed_qty = float(res.get('executedQty', 0))
            if executed_qty <= 0:
                self.log(f"‚ùå L·ªánh kh√¥ng kh·ªõp: {executed_qty}")
                self.is_opening = False
                return
                
            # ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ h·ªá th·ªëng c·∫≠p nh·∫≠t
            time.sleep(2)
            
            # X√°c minh position ƒë√£ ƒë∆∞·ª£c m·ªü
            self.check_position_status()
            
            if not self.position_open:
                self.log("‚ùå X√°c minh position th·∫•t b·∫°i sau khi m·ªü")
                self.is_opening = False
                return

            # G·ª≠i th√¥ng b√°o v·ªõi th√¥ng tin bi·∫øn ƒë·ªông 24h
            message = (f"‚úÖ <b>ƒê√É M·ªû V·ªä TH·∫æ {self.symbol}</b>\n"
                       f"üìå H∆∞·ªõng: {side}\n"
                       f"üéØ Chi·∫øn l∆∞·ª£c: Reverse Bi·∫øn ƒë·ªông 24h\n"
                       f"üìà Bi·∫øn ƒë·ªông 24h: {change_percent:.2f}%\n"
                       f"üéØ Ng∆∞·ª°ng k√≠ch ho·∫°t: {self.threshold}%\n"
                       f"üè∑Ô∏è Gi√° v√†o: {self.entry:.4f}\n"
                       f"üìä Kh·ªëi l∆∞·ª£ng: {executed_qty}\n"
                       f"üíµ Gi√° tr·ªã: {executed_qty * self.entry:.2f} USDT\n"
                       f" ƒê√≤n b·∫©y: {self.lev}x\n"
                       f"üéØ TP: {self.tp}% | üõ°Ô∏è SL: {self.sl}%")
            
            self.log(message, is_critical=True)
            
        except Exception as e:
            self.log(f"‚ùå L·ªói khi v√†o l·ªánh: {str(e)}")
        finally:
            self.is_opening = False

    def close_position(self, reason=""):
        """ƒê√≥ng position v·ªõi c∆° ch·∫ø ch·ªëng tr√πng l·∫∑p"""
        if self.is_closing:
            self.log("‚ö†Ô∏è ƒêang trong qu√° tr√¨nh ƒë√≥ng, b·ªè qua")
            return
            
        self.is_closing = True
        max_retries = 3
        retry_count = 0
        
        while retry_count < max_retries:
            try:
                # Ki·ªÉm tra l·∫°i tr·∫°ng th√°i tr∆∞·ªõc khi ƒë√≥ng
                self.check_position_status()
                if not self.position_open or abs(self.qty) == 0:
                    self.log("üì≠ Kh√¥ng c√≥ position ƒë·ªÉ ƒë√≥ng")
                    self._reset_position_state()
                    return
                
                cancel_all_orders(self.symbol)
                
                close_side = "SELL" if self.side == "BUY" else "BUY"
                close_qty = abs(self.qty)
                
                # L√†m tr√≤n kh·ªëi l∆∞·ª£ng ch√≠nh x√°c
                step = get_step_size(self.symbol)
                if step > 0:
                    steps = close_qty / step
                    close_qty = math.floor(steps) * step  # Lu√¥n l√†m tr√≤n xu·ªëng ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng v∆∞·ª£t qu√°
                
                close_qty = max(close_qty, 0)
                close_qty = round(close_qty, 8)
                
                if close_qty <= 0:
                    self.log("‚ùå Kh·ªëi l∆∞·ª£ng ƒë√≥ng kh√¥ng h·ª£p l·ªá")
                    break
                
                res = place_order(self.symbol, close_side, close_qty)
                if res:
                    price = float(res.get('avgPrice', 0))
                    roi = self.calculate_roi()

                    message = (f"‚õî <b>ƒê√É ƒê√ìNG V·ªä TH·∫æ {self.symbol}</b>\n"
                              f"üìå L√Ω do: {reason}\n"
                              f"üè∑Ô∏è Gi√° ra: {price:.4f}\n"
                              f"üìä Kh·ªëi l∆∞·ª£ng: {close_qty}\n"
                              f"üíµ Gi√° tr·ªã: {close_qty * price:.2f} USDT\n"
                              f"üî• ROI: {roi:.2f}%")
                    self.log(message)
                    
                    # ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ h·ªá th·ªëng c·∫≠p nh·∫≠t
                    time.sleep(3)
                    
                    # X√°c minh position ƒë√£ ƒë√≥ng
                    self.check_position_status()
                    
                    if self.position_open:
                        self.log("‚ö†Ô∏è Position v·∫´n m·ªü sau khi th·ª≠ ƒë√≥ng, th·ª≠ l·∫°i...")
                        retry_count += 1
                        continue
                    
                    # C·∫≠p nh·∫≠t tr·∫°ng th√°i
                    self._reset_position_state()
                    self.last_trade_time = time.time()
                    break
                else:
                    self.log(f"‚ùå L·ªói ƒë√≥ng position (l·∫ßn th·ª≠ {retry_count + 1})")
                    retry_count += 1
                    time.sleep(2)
                    
            except Exception as e:
                self.log(f"‚ùå L·ªói ƒë√≥ng position (l·∫ßn th·ª≠ {retry_count + 1}): {str(e)}")
                retry_count += 1
                time.sleep(2)
        
        if retry_count >= max_retries:
            self.log("‚ùå Kh√¥ng th·ªÉ ƒë√≥ng position sau nhi·ªÅu l·∫ßn th·ª≠")
        
        self.is_closing = False

    def stop(self):
        self._stop = True
        self.ws_manager.remove_symbol(self.symbol)
        try:
            cancel_all_orders(self.symbol)
        except Exception as e:
            self.log(f"L·ªói h·ªßy l·ªánh: {str(e)}")
        self.log(f"üî¥ Bot d·ª´ng cho {self.symbol}")

# ========== QU·∫¢N L√ù BOT CH·∫†Y N·ªÄN V√Ä T∆Ø∆†NG T√ÅC TELEGRAM ==========
class BotManager:
    def __init__(self):
        self.ws_manager = WebSocketManager()
        self.bots = {}
        self.running = True
        self.start_time = time.time()
        self.user_states = {}  # L∆∞u tr·∫°ng th√°i ng∆∞·ªùi d√πng
        self.admin_chat_id = TELEGRAM_CHAT_ID
        
        self.log("üü¢ H·ªÜ TH·ªêNG BOT ƒê√É KH·ªûI ƒê·ªòNG - CHI·∫æN L∆Ø·ª¢C REVERSE 24H")
        
        # B·∫Øt ƒë·∫ßu thread ki·ªÉm tra tr·∫°ng th√°i
        self.status_thread = threading.Thread(target=self._status_monitor, daemon=True)
        self.status_thread.start()
        
        # B·∫Øt ƒë·∫ßu thread l·∫Øng nghe Telegram
        self.telegram_thread = threading.Thread(target=self._telegram_listener, daemon=True)
        self.telegram_thread.start()
        
        # G·ª≠i menu ch√≠nh khi kh·ªüi ƒë·ªông
        if self.admin_chat_id:
            self.send_main_menu(self.admin_chat_id)

    def log(self, message, is_critical=True):
        """Ghi log h·ªá th·ªëng v√† g·ª≠i Telegram cho th√¥ng b√°o quan tr·ªçng"""
        logger.info(f"[SYSTEM] {message}")
        if is_critical:
            send_telegram(f"<b>SYSTEM</b>: {message}")

    def send_main_menu(self, chat_id):
        """G·ª≠i menu ch√≠nh cho ng∆∞·ªùi d√πng"""
        welcome = (
            "ü§ñ <b>BOT GIAO D·ªäCH FUTURES BINANCE</b>\n\n"
            "üéØ <b>Chi·∫øn l∆∞·ª£c: Reverse Bi·∫øn ƒë·ªông 24h >30%</b>\n\n"
            "Ch·ªçn m·ªôt trong c√°c t√πy ch·ªçn b√™n d∆∞·ªõi:"
        )
        send_telegram(welcome, chat_id, create_menu_keyboard())

    def add_bot(self, symbol, lev, percent, tp, sl, threshold=30):
        if sl == 0:
            sl = None
        symbol = symbol.upper()
        if symbol in self.bots:
            self.log(f"‚ö†Ô∏è ƒê√£ c√≥ bot cho {symbol}")
            return False
            
        # Ki·ªÉm tra API key
        if not API_KEY or not API_SECRET:
            self.log("‚ùå Ch∆∞a c·∫•u h√¨nh API Key v√† Secret Key!")
            return False
            
        try:
            # Ki·ªÉm tra k·∫øt n·ªëi API
            price = get_current_price(symbol)
            if price <= 0:
                self.log(f"‚ùå Kh√¥ng th·ªÉ l·∫•y gi√° cho {symbol}")
                return False
            
            # T·∫°o bot m·ªõi
            bot = IndicatorBot(symbol, lev, percent, tp, sl, self.ws_manager, threshold)
            self.bots[symbol] = bot
            self.log(f"‚úÖ ƒê√£ th√™m bot: {symbol} | ƒêB: {lev}x | %: {percent} | TP/SL: {tp}%/{sl}% | Ng∆∞·ª°ng: {threshold}%")
            return True
            
        except Exception as e:
            self.log(f"‚ùå L·ªói t·∫°o bot {symbol}: {str(e)}")
            return False

    def stop_bot(self, symbol):
        symbol = symbol.upper()
        bot = self.bots.get(symbol)
        if bot:
            bot.stop()
            self.log(f"‚õî ƒê√£ d·ª´ng bot cho {symbol}")
            del self.bots[symbol]
            return True
        return False

    def stop_all(self):
        self.log("‚õî ƒêang d·ª´ng t·∫•t c·∫£ bot...")
        for symbol in list(self.bots.keys()):
            self.stop_bot(symbol)
        self.ws_manager.stop()
        self.running = False
        self.log("üî¥ H·ªá th·ªëng ƒë√£ d·ª´ng")

    def _status_monitor(self):
        """Ki·ªÉm tra v√† b√°o c√°o tr·∫°ng th√°i ƒë·ªãnh k·ª≥"""
        while self.running:
            try:
                # T√≠nh th·ªùi gian ho·∫°t ƒë·ªông
                uptime = time.time() - self.start_time
                hours, rem = divmod(uptime, 3600)
                minutes, seconds = divmod(rem, 60)
                uptime_str = f"{int(hours)}h {int(minutes)}m {int(seconds)}s"
                
                # B√°o c√°o s·ªë bot ƒëang ch·∫°y
                active_bots = [s for s, b in self.bots.items() if not b._stop]
                
                # B√°o c√°o s·ªë d∆∞ t√†i kho·∫£n
                balance = get_balance()
                
                # T·∫°o b√°o c√°o
                status_msg = (
                    f"üìä <b>B√ÅO C√ÅO H·ªÜ TH·ªêNG</b>\n"
                    f"‚è± Th·ªùi gian ho·∫°t ƒë·ªông: {uptime_str}\n"
                    f"ü§ñ S·ªë bot ƒëang ch·∫°y: {len(active_bots)}\n"
                    f"üìà Bot ho·∫°t ƒë·ªông: {', '.join(active_bots) if active_bots else 'Kh√¥ng c√≥'}\n"
                    f"üí∞ S·ªë d∆∞ kh·∫£ d·ª•ng: {balance:.2f} USDT"
                )
                send_telegram(status_msg)
                
            except Exception as e:
                logger.error(f"L·ªói b√°o c√°o tr·∫°ng th√°i: {str(e)}")
            
            # Ki·ªÉm tra m·ªói 6 gi·ªù
            time.sleep(6 * 3600)

    def _telegram_listener(self):
        """L·∫Øng nghe v√† x·ª≠ l√Ω tin nh·∫Øn t·ª´ Telegram"""
        last_update_id = 0
        
        while self.running:
            try:
                if not TELEGRAM_BOT_TOKEN:
                    time.sleep(60)
                    continue
                    
                # L·∫•y tin nh·∫Øn m·ªõi
                url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getUpdates?offset={last_update_id+1}&timeout=30"
                response = requests.get(url, timeout=35)
                
                if response.status_code == 200:
                    data = response.json()
                    if data.get('ok'):
                        for update in data['result']:
                            update_id = update['update_id']
                            message = update.get('message', {})
                            chat_id = str(message.get('chat', {}).get('id'))
                            text = message.get('text', '').strip()
                            
                            # Ch·ªâ x·ª≠ l√Ω tin nh·∫Øn t·ª´ admin
                            if chat_id != self.admin_chat_id:
                                continue
                            
                            # C·∫≠p nh·∫≠t ID tin nh·∫Øn cu·ªëi
                            if update_id > last_update_id:
                                last_update_id = update_id
                            
                            # X·ª≠ l√Ω tin nh·∫Øn
                            self._handle_telegram_message(chat_id, text)
                elif response.status_code == 409:
                    # X·ª≠ l√Ω xung ƒë·ªôt - ch·ªâ c√≥ m·ªôt instance c·ªßa bot c√≥ th·ªÉ l·∫Øng nghe
                    logger.error("L·ªói xung ƒë·ªôt: Ch·ªâ m·ªôt instance bot c√≥ th·ªÉ l·∫Øng nghe Telegram")
                    time.sleep(60)
                else:
                    time.sleep(10)
                
            except Exception as e:
                logger.error(f"L·ªói Telegram listener: {str(e)}")
                time.sleep(10)

    def _handle_telegram_message(self, chat_id, text):
        """X·ª≠ l√Ω tin nh·∫Øn t·ª´ ng∆∞·ªùi d√πng"""
        # L∆∞u tr·∫°ng th√°i ng∆∞·ªùi d√πng
        user_state = self.user_states.get(chat_id, {})
        current_step = user_state.get('step')
        
        # X·ª≠ l√Ω theo b∆∞·ªõc hi·ªán t·∫°i
        if current_step == 'waiting_symbol':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy th√™m bot", chat_id, create_menu_keyboard())
            else:
                symbol = text.upper()
                self.user_states[chat_id] = {
                    'step': 'waiting_leverage',
                    'symbol': symbol
                }
                send_telegram(f"Ch·ªçn ƒë√≤n b·∫©y cho {symbol}:", chat_id, create_leverage_keyboard())
        
        elif current_step == 'waiting_leverage':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy th√™m bot", chat_id, create_menu_keyboard())
            elif 'x' in text:
                leverage = int(text.replace('', '').replace('x', '').strip())
                user_state['leverage'] = leverage
                user_state['step'] = 'waiting_percent'
                send_telegram(
                    f"üìå C·∫∑p: {user_state['symbol']}\n ƒê√≤n b·∫©y: {leverage}x\n\nNh·∫≠p % s·ªë d∆∞ mu·ªën s·ª≠ d·ª•ng (1-100):",
                    chat_id,
                    create_cancel_keyboard()
                )
        
        elif current_step == 'waiting_percent':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy th√™m bot", chat_id, create_menu_keyboard())
            else:
                try:
                    percent = float(text)
                    if 1 <= percent <= 100:
                        user_state['percent'] = percent
                        user_state['step'] = 'waiting_tp'
                        send_telegram(
                            f"üìå C·∫∑p: {user_state['symbol']}\n ƒêB: {user_state['leverage']}x\nüìä %: {percent}%\n\nNh·∫≠p % Take Profit (v√≠ d·ª•: 10):",
                            chat_id,
                            create_cancel_keyboard()
                        )
                    else:
                        send_telegram("‚ö†Ô∏è Vui l√≤ng nh·∫≠p % t·ª´ 1-100", chat_id)
                except:
                    send_telegram("‚ö†Ô∏è Gi√° tr·ªã kh√¥ng h·ª£p l·ªá, vui l√≤ng nh·∫≠p s·ªë", chat_id)
        
        elif current_step == 'waiting_tp':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy th√™m bot", chat_id, create_menu_keyboard())
            else:
                try:
                    tp = float(text)
                    if tp > 0:
                        user_state['tp'] = tp
                        user_state['step'] = 'waiting_sl'
                        send_telegram(
                            f"üìå C·∫∑p: {user_state['symbol']}\n ƒêB: {user_state['leverage']}x\nüìä %: {user_state['percent']}%\nüéØ TP: {tp}%\n\nNh·∫≠p % Stop Loss (v√≠ d·ª•: 5, 0 ƒë·ªÉ t·∫Øt SL):",
                            chat_id,
                            create_cancel_keyboard()
                        )
                    else:
                        send_telegram("‚ö†Ô∏è TP ph·∫£i l·ªõn h∆°n 0", chat_id)
                except:
                    send_telegram("‚ö†Ô∏è Gi√° tr·ªã kh√¥ng h·ª£p l·ªá, vui l√≤ng nh·∫≠p s·ªë", chat_id)
        
        elif current_step == 'waiting_sl':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy th√™m bot", chat_id, create_menu_keyboard())
            else:
                try:
                    sl = float(text)
                    if sl >= 0:
                        # Th√™m bot
                        symbol = user_state['symbol']
                        leverage = user_state['leverage']
                        percent = user_state['percent']
                        tp = user_state['tp']
                        
                        if self.add_bot(symbol, leverage, percent, tp, sl):
                            send_telegram(
                                f"‚úÖ <b>ƒê√É TH√äM BOT TH√ÄNH C√îNG</b>\n\n"
                                f"üìå C·∫∑p: {symbol}\n"
                                f" ƒê√≤n b·∫©y: {leverage}x\n"
                                f"üìä % S·ªë d∆∞: {percent}%\n"
                                f"üéØ TP: {tp}%\n"
                                f"üõ°Ô∏è SL: {sl}%\n"
                                f"üéØ Chi·∫øn l∆∞·ª£c: Reverse 24h",
                                chat_id,
                                create_menu_keyboard()
                            )
                        else:
                            send_telegram("‚ùå Kh√¥ng th·ªÉ th√™m bot, vui l√≤ng ki·ªÉm tra log", chat_id, create_menu_keyboard())
                        
                        # Reset tr·∫°ng th√°i
                        self.user_states[chat_id] = {}
                    else:
                        send_telegram("‚ö†Ô∏è SL ph·∫£i l·ªõn h∆°n ho·∫∑c b·∫±ng 0", chat_id)
                except:
                    send_telegram("‚ö†Ô∏è Gi√° tr·ªã kh√¥ng h·ª£p l·ªá, vui l√≤ng nh·∫≠p s·ªë", chat_id)
        
        # X·ª≠ l√Ω c√°c l·ªánh ch√≠nh
        elif text == "üìä Danh s√°ch Bot":
            if not self.bots:
                send_telegram("ü§ñ Kh√¥ng c√≥ bot n√†o ƒëang ch·∫°y", chat_id)
            else:
                message = "ü§ñ <b>DANH S√ÅCH BOT ƒêANG CH·∫†Y</b>\n\n"
                for symbol, bot in self.bots.items():
                    status = "üü¢ M·ªü" if bot.status == "open" else "üü° Ch·ªù"
                    message += f"üîπ {symbol} | {status} | {bot.side} | ƒêB: {bot.lev}x\n"
                send_telegram(message, chat_id)
        
        elif text == "‚ûï Th√™m Bot":
            self.user_states[chat_id] = {'step': 'waiting_symbol'}
            send_telegram("Ch·ªçn c·∫∑p coin:", chat_id, create_symbols_keyboard())
        
        elif text == "‚õî D·ª´ng Bot":
            if not self.bots:
                send_telegram("ü§ñ Kh√¥ng c√≥ bot n√†o ƒëang ch·∫°y", chat_id)
            else:
                message = "‚õî <b>CH·ªåN BOT ƒê·ªÇ D·ª™NG</b>\n\n"
                keyboard = []
                row = []
                
                for i, symbol in enumerate(self.bots.keys()):
                    message += f"üîπ {symbol}\n"
                    row.append({"text": f"‚õî {symbol}"})
                    if len(row) == 2 or i == len(self.bots) - 1:
                        keyboard.append(row)
                        row = []
                
                keyboard.append([{"text": "‚ùå H·ªßy b·ªè"}])
                
                send_telegram(
                    message, 
                    chat_id, 
                    {"keyboard": keyboard, "resize_keyboard": True, "one_time_keyboard": True}
                )
        
        elif text.startswith("‚õî "):
            symbol = text.replace("‚õî ", "").strip().upper()
            if symbol in self.bots:
                self.stop_bot(symbol)
                send_telegram(f"‚õî ƒê√£ g·ª≠i l·ªánh d·ª´ng bot {symbol}", chat_id, create_menu_keyboard())
            else:
                send_telegram(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y bot {symbol}", chat_id, create_menu_keyboard())
        
        elif text == "üí∞ S·ªë d∆∞ t√†i kho·∫£n":
            try:
                balance = get_balance()
                send_telegram(f"üí∞ <b>S·ªê D∆Ø KH·∫¢ D·ª§NG</b>: {balance:.2f} USDT", chat_id)
            except Exception as e:
                send_telegram(f"‚ö†Ô∏è L·ªói l·∫•y s·ªë d∆∞: {str(e)}", chat_id)
        
        elif text == "üìà V·ªã th·∫ø ƒëang m·ªü":
            try:
                positions = get_positions()
                if not positions:
                    send_telegram("üì≠ Kh√¥ng c√≥ v·ªã th·∫ø n√†o ƒëang m·ªü", chat_id)
                    return
                
                message = "üìà <b>V·ªä TH·∫æ ƒêANG M·ªû</b>\n\n"
                for pos in positions:
                    position_amt = float(pos.get('positionAmt', 0))
                    if position_amt != 0:
                        symbol = pos.get('symbol', 'UNKNOWN')
                        entry = float(pos.get('entryPrice', 0))
                        side = "LONG" if position_amt > 0 else "SHORT"
                        pnl = float(pos.get('unRealizedProfit', 0))
                        
                        message += (
                            f"üîπ {symbol} | {side}\n"
                            f"üìä Kh·ªëi l∆∞·ª£ng: {abs(position_amt):.4f}\n"
                            f"üè∑Ô∏è Gi√° v√†o: {entry:.4f}\n"
                            f"üí∞ PnL: {pnl:.2f} USDT\n\n"
                        )
                
                send_telegram(message, chat_id)
            except Exception as e:
                send_telegram(f"‚ö†Ô∏è L·ªói l·∫•y v·ªã th·∫ø: {str(e)}", chat_id)
        
        # G·ª≠i l·∫°i menu n·∫øu kh√¥ng c√≥ l·ªánh ph√π h·ª£p
        elif text:
            self.send_main_menu(chat_id)

# ========== H√ÄM KH·ªûI CH·∫†Y CH√çNH ==========
def main():
    # Kh·ªüi t·∫°o h·ªá th·ªëng
    manager = BotManager()
    
    # Th√™m c√°c bot t·ª´ c·∫•u h√¨nh
    if BOT_CONFIGS:
        for config in BOT_CONFIGS:
            if len(config) >= 5:
                symbol, lev, percent, tp, sl = config[0], config[1], config[2], config[3], config[4]
                threshold = config[5] if len(config) > 5 else 30  # M·∫∑c ƒë·ªãnh 30% n·∫øu kh√¥ng c√≥
                
                if manager.add_bot(symbol, lev, percent, tp, sl, threshold):
                    manager.log(f"‚úÖ Bot cho {symbol} kh·ªüi ƒë·ªông th√†nh c√¥ng (Chi·∫øn l∆∞·ª£c Reverse 24h - Ng∆∞·ª°ng: {threshold}%)")
                else:
                    manager.log(f"‚ö†Ô∏è Bot cho {symbol} kh·ªüi ƒë·ªông th·∫•t b·∫°i")
    else:
        manager.log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y c·∫•u h√¨nh bot! Vui l√≤ng thi·∫øt l·∫≠p bi·∫øn m√¥i tr∆∞·ªùng BOT_CONFIGS.")
    
    # Th√¥ng b√°o s·ªë d∆∞ ban ƒë·∫ßu
    try:
        balance = get_balance()
        manager.log(f"üí∞ S·ªê D∆Ø BAN ƒê·∫¶U: {balance:.2f} USDT")
    except Exception as e:
        manager.log(f"‚ö†Ô∏è L·ªói l·∫•y s·ªë d∆∞ ban ƒë·∫ßu: {str(e)}")
    
    try:
        # Gi·ªØ ch∆∞∆°ng tr√¨nh ch·∫°y
        while manager.running:
            time.sleep(1)
            
    except KeyboardInterrupt:
        manager.log("üëã Nh·∫≠n t√≠n hi·ªáu d·ª´ng t·ª´ ng∆∞·ªùi d√πng...")
    except Exception as e:
        manager.log(f"‚ùå L·ªñI H·ªÜ TH·ªêNG: {str(e)}")
    finally:
        manager.stop_all()

if __name__ == "__main__":
    main()
