# trading_bot_lib.py
import json
import hmac
import hashlib
import time
import threading
import urllib.request
import urllib.parse
import numpy as np
import websocket
import logging
import requests
import os
import math
import traceback
from datetime import datetime
from concurrent.futures import ThreadPoolExecutor

# ========== C·∫§U H√åNH LOGGING ==========
def setup_logging():
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(module)s - %(message)s',
        handlers=[
            logging.StreamHandler(),
            logging.FileHandler('bot_errors.log')
        ]
    )
    return logging.getLogger()

logger = setup_logging()

# ========== H√ÄM TELEGRAM ==========
def send_telegram(message, chat_id=None, reply_markup=None, bot_token=None, default_chat_id=None):
    if not bot_token:
        logger.warning("Telegram Bot Token ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p")
        return
    
    chat_id = chat_id or default_chat_id
    if not chat_id:
        logger.warning("Telegram Chat ID ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p")
        return
    
    # CH·ªà L√ÄM S·∫†CH K√ù T·ª∞ ƒê·∫∂C BI·ªÜT, GI·ªÆ NGUY√äN TH·∫∫ HTML
    clean_message = message
    try:
        # Ch·ªâ thay th·∫ø c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát c√≥ th·ªÉ g√¢y l·ªói HTML, gi·ªØ nguy√™n th·∫ª <b>, </b>
        clean_message = message
    except:
        pass
    
    url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": clean_message,
        "parse_mode": "HTML"
    }
    
    if reply_markup:
        payload["reply_markup"] = json.dumps(reply_markup)
    
    try:
        response = requests.post(url, json=payload, timeout=15)
        if response.status_code != 200:
            logger.error(f"L·ªói Telegram ({response.status_code}): {response.text}")
    except Exception as e:
        logger.error(f"L·ªói k·∫øt n·ªëi Telegram: {str(e)}")

# ========== MENU TELEGRAM N√ÇNG CAO ==========
def create_main_menu():
    return {
        "keyboard": [
            [{"text": "üìä Danh s√°ch Bot"}],
            [{"text": "‚ûï Th√™m Bot"}, {"text": "‚õî D·ª´ng Bot"}],
            [{"text": "üí∞ S·ªë d∆∞"}, {"text": "üìà V·ªã th·∫ø"}],
            [{"text": "‚öôÔ∏è C·∫•u h√¨nh"}, {"text": "üéØ Chi·∫øn l∆∞·ª£c"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": False
    }

def create_cancel_keyboard():
    return {
        "keyboard": [[{"text": "‚ùå H·ªßy b·ªè"}]],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_strategy_keyboard():
    """B√†n ph√≠m ch·ªçn chi·∫øn l∆∞·ª£c giao d·ªãch - B∆Ø·ªöC ƒê·∫¶U TI√äN"""
    return {
        "keyboard": [
            [{"text": "ü§ñ RSI/EMA Recursive"}, {"text": "üìä EMA Crossover"}],
            [{"text": "üéØ Reverse 24h"}, {"text": "üìà Trend Following"}],
            [{"text": "‚ö° Scalping"}, {"text": "üõ°Ô∏è Safe Grid"}],
            [{"text": "‚ùå H·ªßy b·ªè"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_symbols_keyboard(strategy=None):
    """B√†n ph√≠m ch·ªçn coin - c√≥ th·ªÉ t√πy ch·ªânh theo chi·∫øn l∆∞·ª£c"""
    if strategy == "Reverse 24h":
        # ∆Øu ti√™n c√°c coin c√≥ bi·∫øn ƒë·ªông m·∫°nh
        volatile_symbols = get_top_volatile_symbols(limit=8, threshold=20)
    else:
        # C√°c coin ph·ªï bi·∫øn cho chi·∫øn l∆∞·ª£c kh√°c
        volatile_symbols = ["BTCUSDT", "ETHUSDT", "BNBUSDT", "ADAUSDT", "DOGEUSDT", "XRPUSDT", "DOTUSDT", "LINKUSDT"]
    
    keyboard = []
    row = []
    for symbol in volatile_symbols:
        row.append({"text": symbol})
        if len(row) == 3:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    keyboard.append([{"text": "‚ùå H·ªßy b·ªè"}])
    
    return {
        "keyboard": keyboard,
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_leverage_keyboard(strategy=None):
    """B√†n ph√≠m ch·ªçn ƒë√≤n b·∫©y - c√≥ th·ªÉ t√πy ch·ªânh theo chi·∫øn l∆∞·ª£c"""
    if strategy == "Scalping":
        leverages = ["3", "5", "10", "15", "20", "25", "50", "75", "100"]
    elif strategy == "Reverse 24h":
        leverages = ["3", "5", "8", "10", "15", "25", "50", "75", "100"]
    elif strategy == "Safe Grid":
        leverages = ["3", "5", "8", "10", "25", "50", "75", "100"]
    else:
        leverages = ["3", "5", "10", "15", "20", "25", "50", "75", "100"]
    
    keyboard = []
    row = []
    for lev in leverages:
        row.append({"text": f" {lev}x"})
        if len(row) == 3:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    keyboard.append([{"text": "‚ùå H·ªßy b·ªè"}])
    
    return {
        "keyboard": keyboard,
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_percent_keyboard():
    """B√†n ph√≠m ch·ªçn % s·ªë d∆∞ v·ªõi g·ª£i √Ω"""
    return {
        "keyboard": [
            [{"text": "1"}, {"text": "3"}, {"text": "5"}, {"text": "10"}],
            [{"text": "15"}, {"text": "20"}, {"text": "25"}, {"text": "50"}],
            [{"text": "‚ùå H·ªßy b·ªè"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_tp_keyboard():
    """B√†n ph√≠m ch·ªçn Take Profit v·ªõi g·ª£i √Ω"""
    return {
        "keyboard": [
            [{"text": "50"}, {"text": "100"}, {"text": "200"}],
            [{"text": "300"}, {"text": "500"}, {"text": "1000"}],
            [{"text": "‚ùå H·ªßy b·ªè"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_sl_keyboard():
    """B√†n ph√≠m ch·ªçn Stop Loss v·ªõi g·ª£i √Ω"""
    return {
        "keyboard": [
            [{"text": "0"}, {"text": "50"}, {"text": "100"}],
            [{"text": "150"}, {"text": "200"}, {"text": "500"}],
            [{"text": "‚ùå H·ªßy b·ªè"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_threshold_keyboard():
    """B√†n ph√≠m ch·ªçn ng∆∞·ª°ng bi·∫øn ƒë·ªông cho Reverse 24h"""
    return {
        "keyboard": [
            [{"text": "30"}, {"text": "50"}, {"text": "70"}],
            [{"text": "100"}, {"text": "150"}, {"text": "200"}],
            [{"text": "‚ùå H·ªßy b·ªè"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def get_top_volatile_symbols(limit=10, threshold=20):
    """L·∫•y danh s√°ch coin c√≥ bi·∫øn ƒë·ªông 24h cao nh·∫•t"""
    try:
        url = "https://fapi.binance.com/fapi/v1/ticker/24hr"
        data = binance_api_request(url)
        if not data:
            return ["BTCUSDT", "ETHUSDT", "ADAUSDT", "BNBUSDT", "XRPUSDT", "DOGEUSDT", "DOTUSDT", "LINKUSDT"]
        
        # L·ªçc c√°c symbol USDT v√† c√≥ bi·∫øn ƒë·ªông > threshold
        volatile_pairs = []
        for ticker in data:
            symbol = ticker.get('symbol', '')
            if symbol.endswith('USDT'):
                change = float(ticker.get('priceChangePercent', 0))
                if abs(change) >= threshold:
                    volatile_pairs.append((symbol, abs(change)))
        
        # S·∫Øp x·∫øp theo bi·∫øn ƒë·ªông gi·∫£m d·∫ßn
        volatile_pairs.sort(key=lambda x: x[1], reverse=True)
        
        # L·∫•y top limit
        top_symbols = [pair[0] for pair in volatile_pairs[:limit]]
        
        # N·∫øu kh√¥ng ƒë·ªß, th√™m c√°c symbol m·∫∑c ƒë·ªãnh
        default_symbols = ["BTCUSDT", "ETHUSDT", "BNBUSDT", "ADAUSDT", "XRPUSDT", "DOGEUSDT", "DOTUSDT", "LINKUSDT", "SOLUSDT", "MATICUSDT"]
        for symbol in default_symbols:
            if len(top_symbols) < limit and symbol not in top_symbols:
                top_symbols.append(symbol)
        
        return top_symbols[:limit]
        
    except Exception as e:
        logger.error(f"L·ªói l·∫•y danh s√°ch coin bi·∫øn ƒë·ªông: {str(e)}")
        return ["BTCUSDT", "ETHUSDT", "BNBUSDT", "ADAUSDT", "XRPUSDT"]

def get_qualified_symbols(api_key, api_secret, strategy_type, leverage, threshold=None, max_candidates=8, final_limit=2):
    """
    T√¨m coin ƒë·ªß ƒëi·ªÅu ki·ªán theo chi·∫øn l∆∞·ª£c - T·ªêI ƒêA 2 COIN
    """
    try:
        # KI·ªÇM TRA API KEY TR∆Ø·ªöC
        test_balance = get_balance(api_key, api_secret)
        if test_balance is None:
            logger.error("‚ùå KH√îNG TH·ªÇ K·∫æT N·ªêI BINANCE - Ki·ªÉm tra API Key")
            return []
        
        # B∆Ø·ªöC 1: L·∫•y danh s√°ch coin bi·∫øn ƒë·ªông cao
        if strategy_type == "Reverse 24h":
            volatile_candidates = get_top_volatile_symbols(limit=max_candidates, threshold=threshold)
        elif strategy_type == "Scalping":
            volatile_candidates = get_top_volatile_symbols(limit=max_candidates, threshold=5)  # Ng∆∞·ª°ng cao h∆°n cho Scalping
        elif strategy_type == "Safe Grid":
            volatile_candidates = get_top_volatile_symbols(limit=max_candidates, threshold=10)  # Ng∆∞·ª°ng v·ª´a cho Safe Grid
        else:
            volatile_candidates = get_top_volatile_symbols(limit=max_candidates, threshold=15)
        
        if not volatile_candidates:
            logger.warning(f"‚ùå Kh√¥ng t√¨m th·∫•y coin n√†o c√≥ bi·∫øn ƒë·ªông ph√π h·ª£p")
            return []
        
        logger.info(f"üìä {strategy_type}: t√¨m th·∫•y {len(volatile_candidates)} coin bi·∫øn ƒë·ªông cao")
        
        # B∆Ø·ªöC 2: Ki·ªÉm tra ƒë√≤n b·∫©y tr√™n c√°c coin bi·∫øn ƒë·ªông
        qualified_symbols = []
        
        for symbol in volatile_candidates:
            if len(qualified_symbols) >= final_limit:
                break
                
            try:
                # LO·∫†I B·ªé BTC V√Ä ETH ƒê·ªÇ ∆ØU TI√äN COIN M·ªöI
                if symbol in ['BTCUSDT', 'ETHUSDT']:
                    continue
                    
                # Ki·ªÉm tra ƒë√≤n b·∫©y
                leverage_success = set_leverage(symbol, leverage, api_key, api_secret)
                
                if leverage_success:
                    qualified_symbols.append(symbol)
                    logger.info(f"‚úÖ {symbol}: ph√π h·ª£p {strategy_type} + ƒë√≤n b·∫©y {leverage}x")
                else:
                    logger.warning(f"‚ö†Ô∏è {symbol}: kh√¥ng th·ªÉ ƒë·∫∑t ƒë√≤n b·∫©y {leverage}x")
                    
                time.sleep(0.2)
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è L·ªói ki·ªÉm tra {symbol}: {str(e)}")
                continue
        
        # N·∫øu kh√¥ng ƒë·ªß coin, th√™m coin d·ª± ph√≤ng (kh√¥ng bao g·ªìm BTC/ETH)
        backup_symbols = ["ADAUSDT", "DOTUSDT", "LINKUSDT", "MATICUSDT", "ATOMUSDT", "AVAXUSDT", "SOLUSDT", "BNBUSDT"]
        for symbol in backup_symbols:
            if len(qualified_symbols) < final_limit and symbol not in qualified_symbols:
                try:
                    leverage_success = set_leverage(symbol, leverage, api_key, api_secret)
                    if leverage_success:
                        qualified_symbols.append(symbol)
                        logger.info(f"‚úÖ Th√™m coin d·ª± ph√≤ng: {symbol}")
                except:
                    continue
        
        logger.info(f"üéØ {strategy_type}: {len(qualified_symbols)} coin ƒë·ªß ƒëi·ªÅu ki·ªán")
        return qualified_symbols
        
    except Exception as e:
        logger.error(f"‚ùå L·ªói t√¨m coin {strategy_type}: {str(e)}")
        return []

# ========== API BINANCE ==========
def sign(query, api_secret):
    try:
        return hmac.new(api_secret.encode(), query.encode(), hashlib.sha256).hexdigest()
    except Exception as e:
        logger.error(f"L·ªói t·∫°o ch·ªØ k√Ω: {str(e)}")
        return ""

def binance_api_request(url, method='GET', params=None, headers=None):
    max_retries = 3
    for attempt in range(max_retries):
        try:
            if method.upper() == 'GET':
                if params:
                    query = urllib.parse.urlencode(params)
                    url = f"{url}?{query}"
                req = urllib.request.Request(url, headers=headers or {})
            else:
                data = urllib.parse.urlencode(params).encode() if params else None
                req = urllib.request.Request(url, data=data, headers=headers or {}, method=method)
            
            with urllib.request.urlopen(req, timeout=15) as response:
                if response.status == 200:
                    return json.loads(response.read().decode())
                else:
                    error_content = response.read().decode()
                    logger.error(f"L·ªói API ({response.status}): {error_content}")
                    
                    # X·ª¨ L√ù ƒê·∫∂C BI·ªÜT CHO L·ªñI 401
                    if response.status == 401:
                        logger.error("‚ùå L·ªñI 401 UNAUTHORIZED - Ki·ªÉm tra:")
                        logger.error("1. API Key v√† Secret Key c√≥ ƒë√∫ng kh√¥ng?")
                        logger.error("2. API Key c√≥ quy·ªÅn Futures kh√¥ng?") 
                        logger.error("3. IP c√≥ ƒë∆∞·ª£c whitelist kh√¥ng?")
                        return None
                    
                    if response.status == 429:
                        time.sleep(2 ** attempt)
                    elif response.status >= 500:
                        time.sleep(1)
                    continue
        except urllib.error.HTTPError as e:
            logger.error(f"L·ªói HTTP ({e.code}): {e.reason}")
            
            # X·ª¨ L√ù ƒê·∫∂C BI·ªÜT CHO L·ªñI 401
            if e.code == 401:
                logger.error("‚ùå L·ªñI 401 UNAUTHORIZED - Vui l√≤ng ki·ªÉm tra API Key!")
                return None
                
            if e.code == 429:
                time.sleep(2 ** attempt)
            elif e.code >= 500:
                time.sleep(1)
            continue
        except Exception as e:
            logger.error(f"L·ªói k·∫øt n·ªëi API: {str(e)}")
            time.sleep(1)
    
    logger.error(f"Kh√¥ng th·ªÉ th·ª±c hi·ªán y√™u c·∫ßu API sau {max_retries} l·∫ßn th·ª≠")
    return None

def get_step_size(symbol, api_key, api_secret):
    url = "https://fapi.binance.com/fapi/v1/exchangeInfo"
    try:
        data = binance_api_request(url)
        if not data:
            return 0.001
            
        for s in data['symbols']:
            if s['symbol'] == symbol.upper():
                for f in s['filters']:
                    if f['filterType'] == 'LOT_SIZE':
                        return float(f['stepSize'])
    except Exception as e:
        logger.error(f"L·ªói l·∫•y step size: {str(e)}")
    return 0.001

def set_leverage(symbol, lev, api_key, api_secret):
    try:
        ts = int(time.time() * 1000)
        params = {
            "symbol": symbol.upper(),
            "leverage": lev,
            "timestamp": ts
        }
        query = urllib.parse.urlencode(params)
        sig = sign(query, api_secret)
        url = f"https://fapi.binance.com/fapi/v1/leverage?{query}&signature={sig}"
        headers = {'X-MBX-APIKEY': api_key}
        
        response = binance_api_request(url, method='POST', headers=headers)
        
        # THAY ƒê·ªîI QUAN TR·ªåNG: N·∫øu l·ªói 401, coi nh∆∞ kh√¥ng th·ªÉ ƒë·∫∑t ƒë√≤n b·∫©y
        if response is None:
            logger.error(f"‚ùå Kh√¥ng th·ªÉ ƒë·∫∑t ƒë√≤n b·∫©y cho {symbol} do l·ªói x√°c th·ª±c")
            return False
            
        if response and 'leverage' in response:
            return True
        return False
    except Exception as e:
        logger.error(f"L·ªói thi·∫øt l·∫≠p ƒë√≤n b·∫©y: {str(e)}")
        return False

def get_balance(api_key, api_secret):
    try:
        ts = int(time.time() * 1000)
        params = {"timestamp": ts}
        query = urllib.parse.urlencode(params)
        sig = sign(query, api_secret)
        url = f"https://fapi.binance.com/fapi/v2/account?{query}&signature={sig}"
        headers = {'X-MBX-APIKEY': api_key}
        
        data = binance_api_request(url, headers=headers)
        if not data:
            return None
            
        for asset in data['assets']:
            if asset['asset'] == 'USDT':
                return float(asset['availableBalance'])
        return 0
    except Exception as e:
        logger.error(f"L·ªói l·∫•y s·ªë d∆∞: {str(e)}")
        return None

def place_order(symbol, side, qty, api_key, api_secret):
    try:
        ts = int(time.time() * 1000)
        params = {
            "symbol": symbol.upper(),
            "side": side,
            "type": "MARKET",
            "quantity": qty,
            "timestamp": ts
        }
        query = urllib.parse.urlencode(params)
        sig = sign(query, api_secret)
        url = f"https://fapi.binance.com/fapi/v1/order?{query}&signature={sig}"
        headers = {'X-MBX-APIKEY': api_key}
        
        return binance_api_request(url, method='POST', headers=headers)
    except Exception as e:
        logger.error(f"L·ªói ƒë·∫∑t l·ªánh: {str(e)}")
    return None

def cancel_all_orders(symbol, api_key, api_secret):
    try:
        ts = int(time.time() * 1000)
        params = {"symbol": symbol.upper(), "timestamp": ts}
        query = urllib.parse.urlencode(params)
        sig = sign(query, api_secret)
        url = f"https://fapi.binance.com/fapi/v1/allOpenOrders?{query}&signature={sig}"
        headers = {'X-MBX-APIKEY': api_key}
        
        binance_api_request(url, method='DELETE', headers=headers)
        return True
    except Exception as e:
        logger.error(f"L·ªói h·ªßy l·ªánh: {str(e)}")
    return False

def get_current_price(symbol):
    try:
        url = f"https://fapi.binance.com/fapi/v1/ticker/price?symbol={symbol.upper()}"
        data = binance_api_request(url)
        if data and 'price' in data:
            return float(data['price'])
    except Exception as e:
        logger.error(f"L·ªói l·∫•y gi√°: {str(e)}")
    return 0

def get_positions(symbol=None, api_key=None, api_secret=None):
    try:
        ts = int(time.time() * 1000)
        params = {"timestamp": ts}
        if symbol:
            params["symbol"] = symbol.upper()
            
        query = urllib.parse.urlencode(params)
        sig = sign(query, api_secret)
        url = f"https://fapi.binance.com/fapi/v2/positionRisk?{query}&signature={sig}"
        headers = {'X-MBX-APIKEY': api_key}
        
        positions = binance_api_request(url, headers=headers)
        if not positions:
            return []
            
        if symbol:
            for pos in positions:
                if pos['symbol'] == symbol.upper():
                    return [pos]
            
        return positions
    except Exception as e:
        logger.error(f"L·ªói l·∫•y v·ªã th·∫ø: {str(e)}")
    return []

def get_24h_change(symbol):
    """L·∫•y % thay ƒë·ªïi gi√° 24h cho m·ªôt symbol"""
    try:
        url = f"https://fapi.binance.com/fapi/v1/ticker/24hr?symbol={symbol.upper()}"
        data = binance_api_request(url)
        if data and 'priceChangePercent' in data:
            return float(data['priceChangePercent'])
    except Exception as e:
        logger.error(f"L·ªói l·∫•y bi·∫øn ƒë·ªông 24h cho {symbol}: {str(e)}")
    return 0

# ========== CH·ªà B√ÅO K·ª∏ THU·∫¨T ==========
def calc_rsi(prices, period=14):
    try:
        if len(prices) < period + 1:
            return None
        
        deltas = np.diff(prices)
        gains = np.where(deltas > 0, deltas, 0)
        losses = np.where(deltas < 0, -deltas, 0)
        
        avg_gain = np.mean(gains[:period])
        avg_loss = np.mean(losses[:period])
        
        if avg_loss == 0:
            return 100.0
        
        rs = avg_gain / avg_loss
        return 100.0 - (100.0 / (1 + rs))
    except Exception as e:
        logger.error(f"L·ªói t√≠nh RSI: {str(e)}")
        return None

def calc_ema(prices, period):
    prices = np.array(prices)
    if len(prices) < period:
        return None
    weights = np.exp(np.linspace(-1., 0., period))
    weights /= weights.sum()
    ema = np.convolve(prices, weights, mode='valid')
    return float(ema[-1])

# ========== WEBSOCKET MANAGER ==========
class WebSocketManager:
    def __init__(self):
        self.connections = {}
        self.executor = ThreadPoolExecutor(max_workers=10)
        self._lock = threading.Lock()
        self._stop_event = threading.Event()
        
    def add_symbol(self, symbol, callback):
        symbol = symbol.upper()
        with self._lock:
            if symbol not in self.connections:
                self._create_connection(symbol, callback)
                
    def _create_connection(self, symbol, callback):
        if self._stop_event.is_set():
            return
            
        stream = f"{symbol.lower()}@trade"
        url = f"wss://fstream.binance.com/ws/{stream}"
        
        def on_message(ws, message):
            try:
                data = json.loads(message)
                if 'p' in data:
                    price = float(data['p'])
                    self.executor.submit(callback, price)
            except Exception as e:
                logger.error(f"L·ªói x·ª≠ l√Ω tin nh·∫Øn WebSocket {symbol}: {str(e)}")
                
        def on_error(ws, error):
            logger.error(f"L·ªói WebSocket {symbol}: {str(error)}")
            if not self._stop_event.is_set():
                time.sleep(5)
                self._reconnect(symbol, callback)
            
        def on_close(ws, close_status_code, close_msg):
            logger.info(f"WebSocket ƒë√≥ng {symbol}: {close_status_code} - {close_msg}")
            if not self._stop_event.is_set() and symbol in self.connections:
                time.sleep(5)
                self._reconnect(symbol, callback)
                
        ws = websocket.WebSocketApp(
            url,
            on_message=on_message,
            on_error=on_error,
            on_close=on_close
        )
        
        thread = threading.Thread(target=ws.run_forever, daemon=True)
        thread.start()
        
        self.connections[symbol] = {
            'ws': ws,
            'thread': thread,
            'callback': callback
        }
        logger.info(f"WebSocket b·∫Øt ƒë·∫ßu cho {symbol}")
        
    def _reconnect(self, symbol, callback):
        logger.info(f"K·∫øt n·ªëi l·∫°i WebSocket cho {symbol}")
        self.remove_symbol(symbol)
        self._create_connection(symbol, callback)
        
    def remove_symbol(self, symbol):
        symbol = symbol.upper()
        with self._lock:
            if symbol in self.connections:
                try:
                    self.connections[symbol]['ws'].close()
                except Exception as e:
                    logger.error(f"L·ªói ƒë√≥ng WebSocket {symbol}: {str(e)}")
                del self.connections[symbol]
                logger.info(f"WebSocket ƒë√£ x√≥a cho {symbol}")
                
    def stop(self):
        self._stop_event.set()
        for symbol in list(self.connections.keys()):
            self.remove_symbol(symbol)

# ========== BASE BOT CLASS ==========
class BaseBot:
    def __init__(self, symbol, lev, percent, tp, sl, ws_manager, api_key, api_secret, telegram_bot_token, telegram_chat_id, strategy_name):
        self.symbol = symbol.upper()
        self.lev = lev
        self.percent = percent
        self.tp = tp
        self.sl = sl
        self.ws_manager = ws_manager
        self.api_key = api_key
        self.api_secret = api_secret
        self.telegram_bot_token = telegram_bot_token
        self.telegram_chat_id = telegram_chat_id
        self.strategy_name = strategy_name
        
        # KH·ªûI T·∫†O T·∫§T C·∫¢ BI·∫æN QUAN TR·ªåNG ƒê·ªÇ TR√ÅNH L·ªñI None
        self.last_signal_check = 0
        self.last_price = 0
        self.previous_price = 0
        self.price_change_24h = 0
        self.price_history = []
        self.max_history_size = 100
        
        self.check_position_status()
        self.status = "waiting"
        self.side = ""
        self.qty = 0
        self.entry = 0
        self.prices = []

        self._stop = False
        self.position_open = False
        self.last_trade_time = 0
        self.position_check_interval = 60
        self.last_position_check = 0
        self.last_error_log_time = 0
        self.last_close_time = 0
        self.cooldown_period = 900
        self.max_position_attempts = 3
        self.position_attempt_count = 0
        
        # ƒê·∫¢M B·∫¢O KH√îNG C√ì L·ªñI THI·∫æU THU·ªòC T√çNH
        self._ensure_required_attributes()
        
        self.ws_manager.add_symbol(self.symbol, self._handle_price_update)
        
        self.thread = threading.Thread(target=self._run, daemon=True)
        self.thread.start()
        self.log(f"üü¢ Bot {strategy_name} kh·ªüi ƒë·ªông cho {self.symbol}")

    def _ensure_required_attributes(self):
        """ƒê·∫£m b·∫£o t·∫•t c·∫£ thu·ªôc t√≠nh quan tr·ªçng ƒë·ªÅu ƒë∆∞·ª£c kh·ªüi t·∫°o"""
        required_attrs = {
            'last_signal_check': 0,
            'last_price': 0,
            'previous_price': 0,
            'price_change_24h': 0,
            'price_history': [],
            'max_history_size': 100,
            'status': "waiting",
            'side': "",
            'qty': 0,
            'entry': 0,
            'prices': [],
            '_stop': False,
            'position_open': False,
            'last_trade_time': 0,
            'position_check_interval': 60,
            'last_position_check': 0,
            'last_error_log_time': 0,
            'last_close_time': 0,
            'cooldown_period': 900,
            'max_position_attempts': 3,
            'position_attempt_count': 0
        }
        
        for attr, default_value in required_attrs.items():
            if not hasattr(self, attr):
                setattr(self, attr, default_value)

    def log(self, message):
        logger.info(f"[{self.symbol} - {self.strategy_name}] {message}")
        send_telegram(f"<b>{self.symbol}</b> ({self.strategy_name}): {message}", 
                     bot_token=self.telegram_bot_token, 
                     default_chat_id=self.telegram_chat_id)

    def _handle_price_update(self, price):
        if self._stop: 
            return
            
        try:
            if price and price > 0:
                self.prices.append(float(price))
                if len(self.prices) > 100:
                    self.prices = self.prices[-100:]
        except Exception as e:
            self.log(f"‚ùå L·ªói x·ª≠ l√Ω gi√°: {str(e)}")

    def get_signal(self):
        """Ph∆∞∆°ng th·ª©c tr·ª´u t∆∞·ª£ng - c·∫ßn ƒë∆∞·ª£c override b·ªüi c√°c l·ªõp con"""
        raise NotImplementedError("Ph∆∞∆°ng th·ª©c get_signal c·∫ßn ƒë∆∞·ª£c tri·ªÉn khai")

    def _run(self):
        while not self._stop:
            try:
                current_time = time.time()
                
                if current_time - self.last_position_check > self.position_check_interval:
                    self.check_position_status()
                    self.last_position_check = current_time
                    
                signal = self.get_signal()
                
                if not self.position_open and self.status == "waiting":
                    if current_time - self.last_close_time < self.cooldown_period:
                        time.sleep(1)
                        continue

                    if signal and current_time - self.last_trade_time > 60:
                        self.open_position(signal)
                        self.last_trade_time = current_time
                        
                if self.position_open and self.status == "open":
                    self.check_tp_sl()
                    
                time.sleep(1)
                
            except Exception as e:
                if time.time() - self.last_error_log_time > 10:
                    error_msg = f"‚ùå L·ªói h·ªá th·ªëng: {str(e)}\n{traceback.format_exc()}"
                    self.log(error_msg)
                    self.last_error_log_time = time.time()
                time.sleep(1)

    def stop(self):
        self._stop = True
        self.ws_manager.remove_symbol(self.symbol)
        try:
            cancel_all_orders(self.symbol, self.api_key, self.api_secret)
        except Exception as e:
            if time.time() - self.last_error_log_time > 10:
                self.log(f"‚ùå L·ªói h·ªßy l·ªánh: {str(e)}")
                self.last_error_log_time = time.time()
        self.log(f"üî¥ Bot d·ª´ng cho {self.symbol}")

    def check_position_status(self):
        try:
            positions = get_positions(self.symbol, self.api_key, self.api_secret)
            
            if not positions or len(positions) == 0:
                return
            
            for pos in positions:
                if pos['symbol'] == self.symbol:
                    position_amt = float(pos.get('positionAmt', 0))
                    
                    if abs(position_amt) > 0:
                        self.position_open = True
                        self.status = "open"
                        self.side = "BUY" if position_amt > 0 else "SELL"
                        self.qty = position_amt
                        self.entry = float(pos.get('entryPrice', 0))
                        return
            
            self.position_open = False
            self.status = "waiting"
            self.side = ""
            self.qty = 0
            self.entry = 0
            
        except Exception as e:
            if time.time() - self.last_error_log_time > 10:
                self.log(f"‚ùå L·ªói ki·ªÉm tra v·ªã th·∫ø: {str(e)}")
                self.last_error_log_time = time.time()

    def check_tp_sl(self):
        if not self.position_open or not self.entry or not self.qty:
            return
            
        try:
            if len(self.prices) > 0:
                current_price = self.prices[-1]
            else:
                current_price = get_current_price(self.symbol)
                
            if current_price <= 0:
                return
                
            if self.side == "BUY":
                profit = (current_price - self.entry) * self.qty
            else:
                profit = (self.entry - current_price) * abs(self.qty)
                
            invested = self.entry * abs(self.qty) / self.lev
            if invested <= 0:
                return
                
            roi = (profit / invested) * 100
            
            if roi >= self.tp:
                self.close_position(f"‚úÖ ƒê·∫°t TP {self.tp}% (ROI: {roi:.2f}%)")
            elif self.sl is not None and roi <= -self.sl:
                self.close_position(f"‚ùå ƒê·∫°t SL {self.sl}% (ROI: {roi:.2f}%)")
                
        except Exception as e:
            if time.time() - self.last_error_log_time > 10:
                self.log(f"‚ùå L·ªói ki·ªÉm tra TP/SL: {str(e)}")
                self.last_error_log_time = time.time()

    def open_position(self, side):
        self.check_position_status()    
        try:
            cancel_all_orders(self.symbol, self.api_key, self.api_secret)
            
            if not set_leverage(self.symbol, self.lev, self.api_key, self.api_secret):
                self.log(f"‚ùå Kh√¥ng th·ªÉ ƒë·∫∑t ƒë√≤n b·∫©y {self.lev}")
                return
            
            balance = get_balance(self.api_key, self.api_secret)
            if balance is None:
                self.log(f"‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi Binance - Ki·ªÉm tra API Key")
                return
                
            if balance <= 0:
                self.log(f"‚ùå Kh√¥ng ƒë·ªß s·ªë d∆∞ USDT")
                return
            
            if self.percent > 100:
                self.percent = 100
            elif self.percent <= 0:
                self.percent = 0.1
                
            usdt_amount = balance * (self.percent / 100)
            price = get_current_price(self.symbol)
            if price <= 0:
                self.log(f"‚ùå L·ªói l·∫•y gi√°")
                return
                
            step = get_step_size(self.symbol, self.api_key, self.api_secret)
            if step <= 0:
                step = 0.001
            
            qty = (usdt_amount * self.lev) / price
            
            if step > 0:
                steps = qty / step
                qty = round(steps) * step
            
            qty = max(qty, 0)
            qty = round(qty, 8)
            
            min_qty = step
            
            if qty < min_qty:
                self.log(f"‚ö†Ô∏è S·ªë l∆∞·ª£ng qu√° nh·ªè ({qty}), kh√¥ng ƒë·∫∑t l·ªánh")
                return
                
            self.position_attempt_count += 1
            if self.position_attempt_count > self.max_position_attempts:
                self.log(f"‚ö†Ô∏è ƒê√£ ƒë·∫°t gi·ªõi h·∫°n s·ªë l·∫ßn th·ª≠ m·ªü l·ªánh ({self.max_position_attempts})")
                self.position_attempt_count = 0
                return
                
            res = place_order(self.symbol, side, qty, self.api_key, self.api_secret)
            if not res:
                self.log(f"‚ùå L·ªói khi ƒë·∫∑t l·ªánh")
                return
                
            executed_qty = float(res.get('executedQty', 0))
            if executed_qty < 0:
                self.log(f"‚ùå L·ªánh kh√¥ng kh·ªõp, s·ªë l∆∞·ª£ng th·ª±c thi: {executed_qty}")
                return

            self.entry = float(res.get('avgPrice', price))
            self.side = side
            self.qty = executed_qty if side == "BUY" else -executed_qty
            self.status = "open"
            self.position_open = True
            self.position_attempt_count = 0

            message = (
                f"‚úÖ <b>ƒê√É M·ªû V·ªä TH·∫æ {self.symbol}</b>\n"
                f"ü§ñ Chi·∫øn l∆∞·ª£c: {self.strategy_name}\n"
                f"üìå H∆∞·ªõng: {side}\n"
                f"üè∑Ô∏è Gi√° v√†o: {self.entry:.4f}\n"
                f"üìä Kh·ªëi l∆∞·ª£ng: {executed_qty}\n"
                f"üíµ Gi√° tr·ªã: {executed_qty * self.entry:.2f} USDT\n"
                f"üí∞ ƒê√≤n b·∫©y: {self.lev}x\n"
                f"üéØ TP: {self.tp}% | üõ°Ô∏è SL: {self.sl}%"
            )
            self.log(message)

        except Exception as e:
            self.position_open = False
            error_msg = f"‚ùå L·ªói khi v√†o l·ªánh: {str(e)}\n{traceback.format_exc()}"
            self.log(error_msg)

    def close_position(self, reason=""):
        try:
            cancel_all_orders(self.symbol, self.api_key, self.api_secret)
            
            if abs(self.qty) > 0:
                close_side = "SELL" if self.side == "BUY" else "BUY"
                close_qty = abs(self.qty)
                
                step = get_step_size(self.symbol, self.api_key, self.api_secret)
                if step > 0:
                    steps = close_qty / step
                    close_qty = round(steps) * step
                
                close_qty = max(close_qty, 0)
                close_qty = round(close_qty, 8)
                
                res = place_order(self.symbol, close_side, close_qty, self.api_key, self.api_secret)
                if res:
                    price = float(res.get('avgPrice', 0))
                    message = (
                        f"‚õî <b>ƒê√É ƒê√ìNG V·ªä TH·∫æ {self.symbol}</b>\n"
                        f"ü§ñ Chi·∫øn l∆∞·ª£c: {self.strategy_name}\n"
                        f"üìå L√Ω do: {reason}\n"
                        f"üè∑Ô∏è Gi√° ra: {price:.4f}\n"
                        f"üìä Kh·ªëi l∆∞·ª£ng: {close_qty}\n"
                        f"üíµ Gi√° tr·ªã: {close_qty * price:.2f} USDT"
                    )
                    self.log(message)
                    
                    # G·ªåI CALLBACK KHI ƒê√ìNG L·ªÜNH (CHO C√ÅC BOT T·ª∞ ƒê·ªòNG)
                    if hasattr(self, 'on_position_closed'):
                        self.on_position_closed(self.symbol, reason)
                    
                    self.status = "waiting"
                    self.side = ""
                    self.qty = 0
                    self.entry = 0
                    self.position_open = False
                    self.last_trade_time = time.time()
                    self.last_close_time = time.time()
                else:
                    self.log(f"‚ùå L·ªói khi ƒë√≥ng l·ªánh")
        except Exception as e:
            error_msg = f"‚ùå L·ªói khi ƒë√≥ng l·ªánh: {str(e)}\n{traceback.format_exc()}"
            self.log(error_msg)


# ========== REVERSE 24H BOT ==========
class Reverse24hBot(BaseBot):
    def __init__(self, symbol, lev, percent, tp, sl, ws_manager, api_key, api_secret, telegram_bot_token, telegram_chat_id, threshold=30):
        super().__init__(symbol, lev, percent, tp, sl, ws_manager, api_key, api_secret, telegram_bot_token, telegram_chat_id, "Reverse 24h")
        self.threshold = threshold
        self.signal_check_interval = 300  # 5 ph√∫t
        self.last_signal_check = 0
        
        # H·ªÜ TH·ªêNG T√åM COIN T·ª∞ ƒê·ªòNG
        self.last_symbol_refresh = 0
        self.symbol_refresh_interval = 300  # 5 ph√∫t refresh khi ch∆∞a ƒë·ªß coin
        self.max_symbols = 2  # T·ªêI ƒêA 2 COIN
        self.current_symbols = [] if symbol is None else [symbol]
        self.active_symbols = {}  # Coin ƒëang c√≥ v·ªã th·∫ø
        self.auto_symbol_mode = symbol is None
        
        # Kh·ªüi t·∫°o danh s√°ch coin ngay t·ª´ ƒë·∫ßu
        if self.auto_symbol_mode:
            self.refresh_qualified_symbols(force_refresh=True)

    def refresh_qualified_symbols(self, force_refresh=False):
        """L√†m m·ªõi danh s√°ch coin ƒë·ªß ƒëi·ªÅu ki·ªán - CH·ªà T√åM KHI CH∆ØA ƒê·ª¶ 2 COIN"""
        try:
            if not self.auto_symbol_mode:
                return
                
            current_time = time.time()
            
            # N·∫øu ƒë√£ ƒë·ªß coin v√† kh√¥ng ph·∫£i force refresh, kh√¥ng c·∫ßn t√¨m th√™m
            if len(self.current_symbols) >= self.max_symbols and not force_refresh:
                return
                
            # Ki·ªÉm tra th·ªùi gian refresh
            if not force_refresh and current_time - self.last_symbol_refresh < self.symbol_refresh_interval:
                return
                
            self.log(f"üîÑ ƒêang t√¨m coin m·ªõi ƒë·ªß ƒëi·ªÅu ki·ªán (ng∆∞·ª°ng: ¬±{self.threshold}%)...")
            
            # S·ªë l∆∞·ª£ng coin c·∫ßn t√¨m th√™m
            needed_symbols = self.max_symbols - len(self.current_symbols)
            
            new_symbols = get_qualified_symbols(
                self.api_key, self.api_secret,
                strategy_type="Reverse 24h",
                leverage=self.lev,
                threshold=self.threshold,
                final_limit=needed_symbols
            )
            
            if new_symbols:
                # Th√™m coin m·ªõi v√†o danh s√°ch (kh√¥ng v∆∞·ª£t qu√° max_symbols)
                for symbol in new_symbols:
                    if len(self.current_symbols) < self.max_symbols and symbol not in self.current_symbols:
                        self.current_symbols.append(symbol)
                        self.log(f"‚úÖ Th√™m coin m·ªõi: {symbol}")
                
                self.log(f"üìä Danh s√°ch coin hi·ªán t·∫°i: {', '.join(self.current_symbols)}")
                self.last_symbol_refresh = current_time
                
            else:
                self.log(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y coin n√†o ƒë·ªß ƒëi·ªÅu ki·ªán")
                
        except Exception as e:
            self.log(f"‚ùå L·ªói refresh symbol: {str(e)}")

    def on_position_closed(self, symbol, reason=""):
        """Callback khi m·ªôt v·ªã th·∫ø ƒë∆∞·ª£c ƒë√≥ng - T√åM COIN THAY TH·∫æ NGAY"""
        try:
            # X√≥a symbol kh·ªèi active symbols
            if symbol in self.active_symbols:
                del self.active_symbols[symbol]
                self.log(f"üóëÔ∏è ƒê√£ x√≥a {symbol} kh·ªèi danh s√°ch active")
            
            # X√≥a symbol kh·ªèi current symbols ƒë·ªÉ t√¨m coin m·ªõi
            if symbol in self.current_symbols:
                self.current_symbols.remove(symbol)
                self.log(f"üóëÔ∏è ƒê√£ x√≥a {symbol} kh·ªèi danh s√°ch hi·ªán t·∫°i")
            
            # FORCE REFRESH ngay l·∫≠p t·ª©c ƒë·ªÉ t√¨m coin thay th·∫ø
            self.log(f"üîé T√¨m coin thay th·∫ø cho {symbol}...")
            self.refresh_qualified_symbols(force_refresh=True)
            
        except Exception as e:
            self.log(f"‚ùå L·ªói trong on_position_closed: {str(e)}")

    def get_signal(self):
        current_time = time.time()
        
        # Refresh danh s√°ch coin ƒë·ªãnh k·ª≥
        self.refresh_qualified_symbols()
        
        if current_time - self.last_signal_check < self.signal_check_interval:
            return None
            
        self.last_signal_check = current_time
        
        try:
            # N·∫øu kh√¥ng c√≥ coin n√†o, kh√¥ng c√≥ t√≠n hi·ªáu
            if not self.current_symbols:
                return None
                
            # Ki·ªÉm tra t·∫•t c·∫£ coin trong danh s√°ch
            for symbol in self.current_symbols:
                # Ki·ªÉm tra n·∫øu coin n√†y ƒë√£ c√≥ v·ªã th·∫ø
                if symbol in self.active_symbols:
                    continue
                    
                change_24h = get_24h_change(symbol)
                
                if abs(change_24h) >= self.threshold:
                    # C·∫≠p nh·∫≠t symbol hi·ªán t·∫°i n·∫øu t√¨m th·∫•y t√≠n hi·ªáu
                    if symbol != self.symbol:
                        self.symbol = symbol
                        self.log(f"üîÑ Chuy·ªÉn sang coin: {symbol} (Bi·∫øn ƒë·ªông: {change_24h:.2f}%)")
                    
                    # Th√™m v√†o active symbols
                    self.active_symbols[symbol] = "BUY" if change_24h < 0 else "SELL"
                    
                    if change_24h > 0:
                        signal_info = (
                            f"üéØ <b>T√çN HI·ªÜU REVERSE 24H - SELL</b>\n"
                            f"üìä Coin: {symbol}\n"
                            f"üìà Bi·∫øn ƒë·ªông 24h: {change_24h:+.2f}%\n"
                            f"üéØ Ng∆∞·ª°ng k√≠ch ho·∫°t: ¬±{self.threshold}%\n"
                            f"üí∞ ƒê√≤n b·∫©y: {self.lev}x"
                        )
                        self.log(signal_info)
                        return "SELL"
                    else:
                        signal_info = (
                            f"üéØ <b>T√çN HI·ªÜU REVERSE 24H - BUY</b>\n"
                            f"üìä Coin: {symbol}\n"
                            f"üìâ Bi·∫øn ƒë·ªông 24h: {change_24h:+.2f}%\n"
                            f"üéØ Ng∆∞·ª°ng k√≠ch ho·∫°t: ¬±{self.threshold}%\n"
                            f"üí∞ ƒê√≤n b·∫©y: {self.lev}x"
                        )
                        self.log(signal_info)
                        return "BUY"
            
            self.log(f"‚ûñ Kh√¥ng c√≥ t√≠n hi·ªáu - ƒêang theo d√µi {len(self.current_symbols)} coin")
            return None
            
        except Exception as e:
            error_msg = f"‚ùå L·ªói t√≠n hi·ªáu Reverse 24h: {str(e)}"
            self.log(error_msg)
            return None

# ========== SCALPING BOT ==========
class ScalpingBot(BaseBot):
    def __init__(self, symbol, lev, percent, tp, sl, ws_manager, api_key, api_secret, telegram_bot_token, telegram_chat_id):
        super().__init__(symbol, lev, percent, tp, sl, ws_manager, api_key, api_secret, telegram_bot_token, telegram_chat_id, "Scalping")
        
        # C·∫§U H√åNH SCALPING
        self.last_scalp_time = 0
        self.scalp_cooldown = 300  # 5 ph√∫t
        
        # H·ªÜ TH·ªêNG T√åM COIN T·ª∞ ƒê·ªòNG
        self.last_symbol_refresh = 0
        self.symbol_refresh_interval = 300  # 5 ph√∫t
        self.max_symbols = 2  # T·ªêI ƒêA 2 COIN
        self.current_symbols = [] if symbol is None else [symbol]
        self.active_symbols = {}
        self.auto_symbol_mode = symbol is None
        
        if self.auto_symbol_mode:
            self.refresh_scalping_symbols(force_refresh=True)

    def refresh_scalping_symbols(self, force_refresh=False):
        """T√¨m coin ph√π h·ª£p cho Scalping"""
        try:
            if not self.auto_symbol_mode:
                return
                
            current_time = time.time()
            
            if len(self.current_symbols) >= self.max_symbols and not force_refresh:
                return
                
            if not force_refresh and current_time - self.last_symbol_refresh < self.symbol_refresh_interval:
                return
                
            self.log(f"üîÑ ƒêang t√¨m coin Scalping...")
            
            needed_symbols = self.max_symbols - len(self.current_symbols)
            
            new_symbols = get_qualified_symbols(
                self.api_key, self.api_secret,
                strategy_type="Scalping",
                leverage=self.lev,
                final_limit=needed_symbols
            )
            
            if new_symbols:
                for symbol in new_symbols:
                    if len(self.current_symbols) < self.max_symbols and symbol not in self.current_symbols:
                        self.current_symbols.append(symbol)
                        self.log(f"‚úÖ Th√™m coin Scalping: {symbol}")
                
                self.log(f"üìä Danh s√°ch coin Scalping: {', '.join(self.current_symbols)}")
                self.last_symbol_refresh = current_time
            else:
                self.log(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y coin Scalping n√†o")
                
        except Exception as e:
            self.log(f"‚ùå L·ªói refresh Scalping symbol: {str(e)}")

    def on_position_closed(self, symbol, reason=""):
        """Callback khi ƒë√≥ng l·ªánh - t√¨m coin thay th·∫ø"""
        try:
            if symbol in self.active_symbols:
                del self.active_symbols[symbol]
            if symbol in self.current_symbols:
                self.current_symbols.remove(symbol)
            
            self.log(f"üîé T√¨m coin Scalping thay th·∫ø cho {symbol}...")
            self.refresh_scalping_symbols(force_refresh=True)
            
        except Exception as e:
            self.log(f"‚ùå L·ªói trong on_position_closed Scalping: {str(e)}")

    def get_signal(self):
        current_time = time.time()
        
        self.refresh_scalping_symbols()
        
        if current_time - self.last_scalp_time < self.scalp_cooldown:
            return None
            
        if not self.current_symbols:
            return None
            
        try:
            for symbol in self.current_symbols:
                if symbol in self.active_symbols:
                    continue
                    
                # Logic Scalping ƒë∆°n gi·∫£n - bi·∫øn ƒë·ªông nhanh
                price_data = self.get_recent_prices(symbol)
                if len(price_data) < 10:
                    continue
                    
                price_change = ((price_data[-1] - price_data[0]) / price_data[0]) * 100
                
                if abs(price_change) > 1.0:  # Bi·∫øn ƒë·ªông > 1%
                    if symbol != self.symbol:
                        self.symbol = symbol
                        self.log(f"üîÑ Chuy·ªÉn sang coin Scalping: {symbol}")
                    
                    self.active_symbols[symbol] = "SELL" if price_change > 0 else "BUY"
                    self.last_scalp_time = current_time
                    
                    if price_change > 0:
                        self.log(f"‚ö° T√≠n hi·ªáu Scalping SELL - Bi·∫øn ƒë·ªông: {price_change:.2f}%")
                        return "SELL"
                    else:
                        self.log(f"‚ö° T√≠n hi·ªáu Scalping BUY - Bi·∫øn ƒë·ªông: {price_change:.2f}%")
                        return "BUY"
                        
            return None
            
        except Exception as e:
            self.log(f"‚ùå L·ªói t√≠n hi·ªáu Scalping: {str(e)}")
            return None

    def get_recent_prices(self, symbol, limit=10):
        """L·∫•y gi√° g·∫ßn ƒë√¢y cho coin"""
        try:
            url = f"https://fapi.binance.com/fapi/v1/klines?symbol={symbol}&interval=1m&limit={limit}"
            data = binance_api_request(url)
            if data:
                return [float(k[4]) for k in data]  # Close prices
        except:
            pass
        return []

# ========== SAFE GRID BOT ==========
class SafeGridBot(BaseBot):
    def __init__(self, symbol, lev, percent, tp, sl, ws_manager, api_key, api_secret, telegram_bot_token, telegram_chat_id):
        super().__init__(symbol, lev, percent, tp, sl, ws_manager, api_key, api_secret, telegram_bot_token, telegram_chat_id, "Safe Grid")
        
        # C·∫§U H√åNH SAFE GRID
        self.grid_levels = 5
        self.grid_spacing = 0.02  # 2%
        self.orders_placed = 0
        
        # H·ªÜ TH·ªêNG T√åM COIN T·ª∞ ƒê·ªòNG
        self.last_symbol_refresh = 0
        self.symbol_refresh_interval = 300  # 5 ph√∫t
        self.max_symbols = 2  # T·ªêI ƒêA 2 COIN
        self.current_symbols = [] if symbol is None else [symbol]
        self.active_symbols = {}
        self.auto_symbol_mode = symbol is None
        
        if self.auto_symbol_mode:
            self.refresh_safegrid_symbols(force_refresh=True)

    def refresh_safegrid_symbols(self, force_refresh=False):
        """T√¨m coin ph√π h·ª£p cho Safe Grid"""
        try:
            if not self.auto_symbol_mode:
                return
                
            current_time = time.time()
            
            if len(self.current_symbols) >= self.max_symbols and not force_refresh:
                return
                
            if not force_refresh and current_time - self.last_symbol_refresh < self.symbol_refresh_interval:
                return
                
            self.log(f"üîÑ ƒêang t√¨m coin Safe Grid...")
            
            needed_symbols = self.max_symbols - len(self.current_symbols)
            
            new_symbols = get_qualified_symbols(
                self.api_key, self.api_secret,
                strategy_type="Safe Grid",
                leverage=self.lev,
                final_limit=needed_symbols
            )
            
            if new_symbols:
                for symbol in new_symbols:
                    if len(self.current_symbols) < self.max_symbols and symbol not in self.current_symbols:
                        self.current_symbols.append(symbol)
                        self.log(f"‚úÖ Th√™m coin Safe Grid: {symbol}")
                
                self.log(f"üìä Danh s√°ch coin Safe Grid: {', '.join(self.current_symbols)}")
                self.last_symbol_refresh = current_time
            else:
                self.log(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y coin Safe Grid n√†o")
                
        except Exception as e:
            self.log(f"‚ùå L·ªói refresh Safe Grid symbol: {str(e)}")

    def on_position_closed(self, symbol, reason=""):
        """Callback khi ƒë√≥ng l·ªánh - t√¨m coin thay th·∫ø"""
        try:
            if symbol in self.active_symbols:
                del self.active_symbols[symbol]
            if symbol in self.current_symbols:
                self.current_symbols.remove(symbol)
            
            self.log(f"üîé T√¨m coin Safe Grid thay th·∫ø cho {symbol}...")
            self.refresh_safegrid_symbols(force_refresh=True)
            
        except Exception as e:
            self.log(f"‚ùå L·ªói trong on_position_closed Safe Grid: {str(e)}")

    def get_signal(self):
        self.refresh_safegrid_symbols()
        
        if not self.current_symbols:
            return None
            
        try:
            # Logic Grid ƒë∆°n gi·∫£n - lu√¢n phi√™n mua/b√°n
            for symbol in self.current_symbols:
                if symbol in self.active_symbols:
                    continue
                    
                if symbol != self.symbol:
                    self.symbol = symbol
                    self.log(f"üîÑ Chuy·ªÉn sang coin Safe Grid: {symbol}")
                
                self.active_symbols[symbol] = "BUY"
                self.orders_placed += 1
                
                if self.orders_placed % 2 == 1:
                    self.log(f"üõ°Ô∏è T√≠n hi·ªáu Safe Grid BUY - L·ªánh #{self.orders_placed}")
                    return "BUY"
                else:
                    self.log(f"üõ°Ô∏è T√≠n hi·ªáu Safe Grid SELL - L·ªánh #{self.orders_placed}")
                    return "SELL"
                    
            return None
            
        except Exception as e:
            self.log(f"‚ùå L·ªói t√≠n hi·ªáu Safe Grid: {str(e)}")
            return None

# ========== C√ÅC CHI·∫æN L∆Ø·ª¢C BOT KH√ÅC NHAU ==========

class RSIEMABot(BaseBot):
    """Bot s·ª≠ d·ª•ng chi·∫øn l∆∞·ª£c RSI k·∫øt h·ª£p EMA"""
    
    def __init__(self, symbol, lev, percent, tp, sl, ws_manager, api_key, api_secret, telegram_bot_token, telegram_chat_id):
        super().__init__(symbol, lev, percent, tp, sl, ws_manager, api_key, api_secret, telegram_bot_token, telegram_chat_id, "RSI/EMA Recursive")
        # KH·ªûI T·∫†O T·∫§T C·∫¢ THU·ªòC T√çNH C·∫¶N THI·∫æT
        self.rsi_history = []
        self.ema_fast = None
        self.ema_slow = None

    def _fetch_klines(self, interval="5m", limit=50):
        url = f"https://fapi.binance.com/fapi/v1/klines?symbol={self.symbol}&interval={interval}&limit={limit}"
        data = binance_api_request(url)
        if not data or len(data) < 20:
            return None
        return data

    def _calc_rsi_series(self, closes, period=14):
        if len(closes) < period + 1:
            return [None] * len(closes)

        deltas = np.diff(closes)
        seed = deltas[:period]
        up = seed[seed >= 0].sum() / period
        down = -seed[seed < 0].sum() / period
        rs = up / down if down != 0 else 0
        rsi = np.zeros_like(closes, dtype=float)
        rsi[:period] = 100. - 100. / (1. + rs)

        upval, downval = up, down
        for i in range(period, len(closes)):
            delta = deltas[i - 1]
            upval = (upval * (period - 1) + (delta if delta > 0 else 0)) / period
            downval = (downval * (period - 1) + (-delta if delta < 0 else 0)) / period
            rs = upval / downval if downval != 0 else 0
            rsi[i] = 100. - 100. / (1. + rs)

        return rsi

    def _ema_last(self, values, period):
        if len(values) < period:
            return None
        k = 2 / (period + 1)
        ema_val = float(values[0])
        for x in values[1:]:
            ema_val = float(x) * k + ema_val * (1 - k)
        return ema_val

    def _atr(self, highs, lows, closes, period=14):
        if len(closes) < period + 1:
            return None
        trs = []
        for i in range(1, len(closes)):
            h = float(highs[i]); l = float(lows[i]); pc = float(closes[i-1])
            tr = max(h - l, abs(h - pc), abs(l - pc))
            trs.append(tr)
        if len(trs) < period:
            return None
        return sum(trs[-period:]) / period

    def _candle_full(self, o, h, l, c, rsi, atr, ema_fast, ema_slow):
        body = abs(c - o)
        candle_range = h - l
        signal = "NEUTRAL"

        if c > o:
            if rsi > 85:
                signal = "UP_OVERBOUGHT"
            elif rsi > 65:
                signal = "UP_STRONG"
            else:
                signal = "UP_WEAK"
        elif c < o:
            if rsi < 15:
                signal = "DOWN_OVERSOLD"
            elif rsi < 35:
                signal = "DOWN_STRONG"
            else:
                signal = "DOWN_WEAK"

        if atr:
            if candle_range >= 1.4 * atr and "WEAK" in signal:
                signal = signal.replace("WEAK", "STRONG")
            if body >= 0.6 * atr and "WEAK" in signal:
                signal = signal.replace("WEAK", "STRONG")

        if ema_fast and ema_slow:
            if "UP" in signal and ema_fast < ema_slow:
                signal = "NEUTRAL"
            if "DOWN" in signal and ema_fast > ema_slow:
                signal = "NEUTRAL"

        return signal

    def _recursive_logic(self, states, idx=2):
        if idx >= len(states):
            return None

        prev2, prev1, curr = states[idx-2], states[idx-1], states[idx]
        decision = None

        if prev2 == "UP_STRONG" and prev1 == "UP_STRONG" and curr.startswith("UP"):
            decision = "BUY"
        elif prev1 == "DOWN_OVERSOLD" or curr == "DOWN_OVERSOLD":
            decision = "BUY"
        elif prev1.startswith("DOWN") and curr == "UP_STRONG":
            decision = "BUY"

        elif prev2 == "DOWN_STRONG" and prev1 == "DOWN_STRONG" and curr.startswith("DOWN"):
            decision = "SELL"
        elif prev1 == "UP_OVERBOUGHT" or curr == "UP_OVERBOUGHT":
            decision = "SELL"
        elif prev1.startswith("UP") and curr == "DOWN_STRONG":
            decision = "SELL"

        elif prev1 == "NEUTRAL" and curr == "NEUTRAL":
            decision = None

        next_decision = self._recursive_logic(states, idx + 1)
        return next_decision if next_decision else decision

    def get_signal(self):
        try:
            data = self._fetch_klines(interval="1m", limit=50)
            if not data:
                return None

            opens  = [float(k[1]) for k in data]
            highs  = [float(k[2]) for k in data]
            lows   = [float(k[3]) for k in data]
            closes = [float(k[4]) for k in data]

            atr = self._atr(highs, lows, closes, period=14)
            ema_fast = self._ema_last(closes, 9)
            ema_slow = self._ema_last(closes, 21)
            rsi_values = self._calc_rsi_series(closes, period=14)

            idx_start = len(closes) - 5
            states = []
            for i in range(idx_start, len(closes)):
                rsi = rsi_values[i] if rsi_values[i] is not None else 50
                state = self._candle_full(
                    opens[i], highs[i], lows[i], closes[i],
                    rsi, atr, ema_fast, ema_slow
                )
                states.append(state)

            decision = self._recursive_logic(states)
            return decision

        except Exception as e:
            self.log(f"‚ùå L·ªói t√≠n hi·ªáu RSI/EMA: {str(e)}")
            return None

class EMACrossoverBot(BaseBot):
    """Bot s·ª≠ d·ª•ng chi·∫øn l∆∞·ª£c giao c·∫Øt EMA"""
    
    def __init__(self, symbol, lev, percent, tp, sl, ws_manager, api_key, api_secret, telegram_bot_token, telegram_chat_id):
        super().__init__(symbol, lev, percent, tp, sl, ws_manager, api_key, api_secret, telegram_bot_token, telegram_chat_id, "EMA Crossover")
        # KH·ªûI T·∫†O T·∫§T C·∫¢ THU·ªòC T√çNH C·∫¶N THI·∫æT
        self.ema_fast_period = 9
        self.ema_slow_period = 21

    def get_ema_crossover_signal(self):
        # KI·ªÇM TRA AN TO√ÄN CHO T·∫§T C·∫¢ THU·ªòC T√çNH
        if not hasattr(self, 'ema_fast_period'):
            self.ema_fast_period = 9
        if not hasattr(self, 'ema_slow_period'):
            self.ema_slow_period = 21
            
        if len(self.prices) < self.ema_slow_period:
            return None
    
        def ema(values, period):
            k = 2 / (period + 1)
            ema_val = float(values[0])
            for price in values[1:]:
                ema_val = float(price) * k + ema_val * (1 - k)
            return float(ema_val)
    
        short_ema = ema(self.prices[-self.ema_slow_period:], self.ema_fast_period)
        long_ema = ema(self.prices[-self.ema_slow_period:], self.ema_slow_period)
    
        if short_ema > long_ema:
            return "BUY"
        elif short_ema < long_ema:
            return "SELL"
        else:
            return None

    def get_signal(self):
        return self.get_ema_crossover_signal()

class TrendFollowingBot(BaseBot):
    """Bot theo xu h∆∞·ªõng s·ª≠ d·ª•ng EMA v√† RSI"""
    
    def __init__(self, symbol, lev, percent, tp, sl, ws_manager, api_key, api_secret, telegram_bot_token, telegram_chat_id):
        super().__init__(symbol, lev, percent, tp, sl, ws_manager, api_key, api_secret, telegram_bot_token, telegram_chat_id, "Trend Following")
        # KH·ªûI T·∫†O T·∫§T C·∫¢ THU·ªòC T√çNH C·∫¶N THI·∫æT
        self.ema_period = 20
        self.rsi_period = 14

    def get_signal(self):
        # KI·ªÇM TRA AN TO√ÄN CHO T·∫§T C·∫¢ THU·ªòC T√çNH
        if not hasattr(self, 'ema_period'):
            self.ema_period = 20
        if not hasattr(self, 'rsi_period'):
            self.rsi_period = 14
            
        if len(self.prices) < self.ema_period + self.rsi_period:
            return None
            
        try:
            # T√≠nh EMA
            ema = calc_ema(self.prices[-self.ema_period:], self.ema_period)
            current_price = self.prices[-1]
            
            # T√≠nh RSI
            rsi = calc_rsi(np.array(self.prices[-self.rsi_period-1:]), self.rsi_period)
            
            if ema is None or rsi is None:
                return None
            
            # Logic theo xu h∆∞·ªõng
            if current_price > ema and rsi > 75:
                return "BUY"
            elif current_price < ema and rsi < 25:
                return "SELL"
            else:
                return None
                
        except Exception as e:
            self.log(f"‚ùå L·ªói t√≠n hi·ªáu Trend Following: {str(e)}")
            return None

# ========== BOT MANAGER ƒêA CHI·∫æN L∆Ø·ª¢C ==========
class BotManager:
    def __init__(self, api_key, api_secret, telegram_bot_token, telegram_chat_id):
        self.ws_manager = WebSocketManager()
        self.bots = {}
        self.running = True
        self.start_time = time.time()
        self.user_states = {}
        self.admin_chat_id = telegram_chat_id
        self.api_key = api_key
        self.api_secret = api_secret
        self.telegram_bot_token = telegram_bot_token
        self.telegram_chat_id = telegram_chat_id
        
        # KI·ªÇM TRA API KEY NGAY KHI KH·ªûI T·∫†O
        self._verify_api_connection()
        
        self.log("üü¢ H·ªÜ TH·ªêNG BOT ƒêA CHI·∫æN L∆Ø·ª¢C ƒê√É KH·ªûI ƒê·ªòNG")
        
        self.status_thread = threading.Thread(target=self._status_monitor, daemon=True)
        self.status_thread.start()
        
        self.telegram_thread = threading.Thread(target=self._telegram_listener, daemon=True)
        self.telegram_thread.start()
        
        if self.admin_chat_id:
            self.send_main_menu(self.admin_chat_id)

    def _verify_api_connection(self):
        """Ki·ªÉm tra k·∫øt n·ªëi API ngay khi kh·ªüi t·∫°o"""
        balance = get_balance(self.api_key, self.api_secret)
        if balance is None:
            self.log("‚ùå L·ªñI: Kh√¥ng th·ªÉ k·∫øt n·ªëi Binance API. Ki·ªÉm tra:")
            self.log("1. API Key v√† Secret Key c√≥ ƒë√∫ng kh√¥ng?")
            self.log("2. API Key c√≥ quy·ªÅn Futures kh√¥ng?")
            self.log("3. IP c√≥ ƒë∆∞·ª£c whitelist kh√¥ng?")
            self.log("4. Th·ªùi gian server c√≥ ƒë·ªìb·ªô kh√¥ng?")
        else:
            self.log(f"‚úÖ K·∫øt n·ªëi Binance th√†nh c√¥ng! S·ªë d∆∞: {balance:.2f} USDT")

    def log(self, message):
        logger.info(f"[SYSTEM] {message}")
        send_telegram(f"<b>SYSTEM</b>: {message}", 
                     bot_token=self.telegram_bot_token, 
                     default_chat_id=self.telegram_chat_id)

    def send_main_menu(self, chat_id):
        welcome = (
            "ü§ñ <b>BOT GIAO D·ªäCH FUTURES BINANCE</b>\n\n"
            "üéØ <b>H·ªÜ TH·ªêNG ƒêA CHI·∫æN L∆Ø·ª¢C</b>\n"
            "Ch·ªçn m·ªôt trong c√°c t√πy ch·ªçn b√™n d∆∞·ªõi:"
        )
        send_telegram(welcome, chat_id, create_main_menu(),
                     bot_token=self.telegram_bot_token, 
                     default_chat_id=self.telegram_chat_id)

    def add_bot(self, symbol, lev, percent, tp, sl, strategy_type, **kwargs):
        if sl == 0:
            sl = None
            
        # KI·ªÇM TRA API KEY TR∆Ø·ªöC KHI TH√äM BOT
        test_balance = get_balance(self.api_key, self.api_secret)
        if test_balance is None:
            self.log("‚ùå L·ªñI: API Key kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i!")
            return False
            
        # X·ª¨ L√ù C√ÅC CHI·∫æN L∆Ø·ª¢C T·ª∞ ƒê·ªòNG
        if strategy_type in ["Reverse 24h", "Scalping", "Safe Grid"]:
            threshold = kwargs.get('threshold', 30)
            
            # T·∫°o bot v·ªõi symbol=None ƒë·ªÉ k√≠ch ho·∫°t ch·∫ø ƒë·ªô t·ª± ƒë·ªông
            bot_id = f"AUTO_{strategy_type}_{int(time.time())}"
            
            try:
                if strategy_type == "Reverse 24h":
                    bot = Reverse24hBot(None, lev, percent, tp, sl, self.ws_manager,
                                       self.api_key, self.api_secret, self.telegram_bot_token, 
                                       self.telegram_chat_id, threshold)
                elif strategy_type == "Scalping":
                    bot = ScalpingBot(None, lev, percent, tp, sl, self.ws_manager,
                                     self.api_key, self.api_secret, self.telegram_bot_token, 
                                     self.telegram_chat_id)
                elif strategy_type == "Safe Grid":
                    bot = SafeGridBot(None, lev, percent, tp, sl, self.ws_manager,
                                     self.api_key, self.api_secret, self.telegram_bot_token, 
                                     self.telegram_chat_id)
                
                self.bots[bot_id] = bot
                
                success_msg = (
                    f"‚úÖ <b>ƒê√É T·∫†O BOT {strategy_type} T·ª∞ ƒê·ªòNG</b>\n\n"
                    f"üéØ Chi·∫øn l∆∞·ª£c: {strategy_type}\n"
                    f"üí∞ ƒê√≤n b·∫©y: {lev}x\n"
                    f"üìä % S·ªë d∆∞: {percent}%\n"
                    f"üéØ TP: {tp}%\n"
                    f"üõ°Ô∏è SL: {sl}%\n\n"
                    f"ü§ñ Bot s·∫Ω t·ª± ƒë·ªông t√¨m v√† giao d·ªãch tr√™n 2 coin ph√π h·ª£p nh·∫•t"
                )
                if strategy_type == "Reverse 24h":
                    success_msg += f"\nüìä Ng∆∞·ª°ng bi·∫øn ƒë·ªông: {threshold}%"
                    
                self.log(success_msg)
                return True
                
            except Exception as e:
                error_msg = f"‚ùå L·ªói t·∫°o bot {strategy_type}: {str(e)}"
                self.log(error_msg)
                return False
        
        # C√ÅC CHI·∫æN L∆Ø·ª¢C KH√ÅC (MANUAL)
        else:
            symbol = symbol.upper()
            bot_id = f"{symbol}_{strategy_type}"
            
            if bot_id in self.bots:
                self.log(f"‚ö†Ô∏è ƒê√£ c√≥ bot {strategy_type} cho {symbol}")
                return False
                
            try:
                # T·∫°o bot theo chi·∫øn l∆∞·ª£c
                if strategy_type == "RSI/EMA Recursive":
                    bot = RSIEMABot(symbol, lev, percent, tp, sl, self.ws_manager, 
                                   self.api_key, self.api_secret, self.telegram_bot_token, self.telegram_chat_id)
                elif strategy_type == "EMA Crossover":
                    bot = EMACrossoverBot(symbol, lev, percent, tp, sl, self.ws_manager,
                                         self.api_key, self.api_secret, self.telegram_bot_token, self.telegram_chat_id)
                elif strategy_type == "Trend Following":
                    bot = TrendFollowingBot(symbol, lev, percent, tp, sl, self.ws_manager,
                                           self.api_key, self.api_secret, self.telegram_bot_token, self.telegram_chat_id)
                else:
                    self.log(f"‚ùå Chi·∫øn l∆∞·ª£c {strategy_type} kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£")
                    return False
                
                self.bots[bot_id] = bot
                self.log(f"‚úÖ ƒê√£ th√™m bot {strategy_type}: {symbol} | ƒêB: {lev}x | %: {percent} | TP/SL: {tp}%/{sl}%")
                return True
                
            except Exception as e:
                error_msg = f"‚ùå L·ªói t·∫°o bot {symbol}: {str(e)}\n{traceback.format_exc()}"
                self.log(error_msg)
                return False

    def stop_bot(self, bot_id):
        bot = self.bots.get(bot_id)
        if bot:
            bot.stop()
            self.log(f"‚õî ƒê√£ d·ª´ng bot {bot_id}")
            del self.bots[bot_id]
            return True
        return False

    def stop_all(self):
        self.log("‚õî ƒêang d·ª´ng t·∫•t c·∫£ bot...")
        for bot_id in list(self.bots.keys()):
            self.stop_bot(bot_id)
        self.ws_manager.stop()
        self.running = False
        self.log("üî¥ H·ªá th·ªëng ƒë√£ d·ª´ng")

    def _status_monitor(self):
        while self.running:
            try:
                uptime = time.time() - self.start_time
                hours, rem = divmod(uptime, 3600)
                minutes, seconds = divmod(rem, 60)
                uptime_str = f"{int(hours)}h {int(minutes)}m {int(seconds)}s"
                
                active_bots = [bot_id for bot_id, bot in self.bots.items() if not bot._stop]
                balance = get_balance(self.api_key, self.api_secret)
                
                if balance is None:
                    status_msg = "‚ùå <b>L·ªñI K·∫æT N·ªêI BINANCE</b>\nVui l√≤ng ki·ªÉm tra API Key!"
                else:
                    status_msg = (
                        f"üìä <b>B√ÅO C√ÅO H·ªÜ TH·ªêNG</b>\n"
                        f"‚è± Th·ªùi gian ho·∫°t ƒë·ªông: {uptime_str}\n"
                        f"ü§ñ S·ªë bot ƒëang ch·∫°y: {len(active_bots)}\n"
                        f"üìà Bot ho·∫°t ƒë·ªông: {', '.join(active_bots) if active_bots else 'Kh√¥ng c√≥'}\n"
                        f"üí∞ S·ªë d∆∞ kh·∫£ d·ª•ng: {balance:.2f} USDT"
                    )
                send_telegram(status_msg,
                            bot_token=self.telegram_bot_token,
                            default_chat_id=self.telegram_chat_id)
                
                for bot_id, bot in self.bots.items():
                    if bot.status == "open":
                        status_msg = (
                            f"üîπ <b>{bot_id}</b>\n"
                            f"üìå H∆∞·ªõng: {bot.side}\n"
                            f"üè∑Ô∏è Gi√° v√†o: {bot.entry:.4f}\n"
                            f"üìä Kh·ªëi l∆∞·ª£ng: {abs(bot.qty)}\n"
                            f"üí∞ ƒê√≤n b·∫©y: {bot.lev}x\n"
                            f"üéØ TP: {bot.tp}% | üõ°Ô∏è SL: {bot.sl}%"
                        )
                        send_telegram(status_msg,
                                    bot_token=self.telegram_bot_token,
                                    default_chat_id=self.telegram_chat_id)
                
            except Exception as e:
                logger.error(f"L·ªói b√°o c√°o tr·∫°ng th√°i: {str(e)}")
            
            time.sleep(6 * 3600)  # 6 gi·ªù

    def _telegram_listener(self):
        last_update_id = 0
        
        while self.running and self.telegram_bot_token:
            try:
                url = f"https://api.telegram.org/bot{self.telegram_bot_token}/getUpdates?offset={last_update_id+1}&timeout=30"
                response = requests.get(url, timeout=35)
                
                if response.status_code == 200:
                    data = response.json()
                    if data.get('ok'):
                        for update in data['result']:
                            update_id = update['update_id']
                            message = update.get('message', {})
                            chat_id = str(message.get('chat', {}).get('id'))
                            text = message.get('text', '').strip()
                            
                            if chat_id != self.admin_chat_id:
                                continue
                            
                            if update_id > last_update_id:
                                last_update_id = update_id
                            
                            self._handle_telegram_message(chat_id, text)
                elif response.status_code == 409:
                    logger.error("L·ªói xung ƒë·ªôt: Ch·ªâ m·ªôt instance bot c√≥ th·ªÉ l·∫Øng nghe Telegram")
                    time.sleep(60)
                else:
                    time.sleep(10)
                
            except Exception as e:
                logger.error(f"L·ªói Telegram listener: {str(e)}")
                time.sleep(10)

    def _handle_telegram_message(self, chat_id, text):
        user_state = self.user_states.get(chat_id, {})
        current_step = user_state.get('step')
        
        # X·ª≠ l√Ω theo b∆∞·ªõc hi·ªán t·∫°i
        if current_step == 'waiting_strategy':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy th√™m bot", chat_id, create_main_menu(),
                            self.telegram_bot_token, self.telegram_chat_id)
            elif text in ["ü§ñ RSI/EMA Recursive", "üìä EMA Crossover", "üéØ Reverse 24h", 
                         "üìà Trend Following", "‚ö° Scalping", "üõ°Ô∏è Safe Grid"]:
                strategy_map = {
                    "ü§ñ RSI/EMA Recursive": "RSI/EMA Recursive",
                    "üìä EMA Crossover": "EMA Crossover", 
                    "üéØ Reverse 24h": "Reverse 24h",
                    "üìà Trend Following": "Trend Following",
                    "‚ö° Scalping": "Scalping",
                    "üõ°Ô∏è Safe Grid": "Safe Grid"
                }
                strategy = strategy_map[text]
                user_state['strategy'] = strategy
                
                # X·ª¨ L√ù ƒê·∫∂C BI·ªÜT CHO C√ÅC CHI·∫æN L∆Ø·ª¢C T·ª∞ ƒê·ªòNG
                if strategy in ["Reverse 24h", "Scalping", "Safe Grid"]:
                    if strategy == "Reverse 24h":
                        user_state['step'] = 'waiting_threshold'
                        send_telegram(
                            f"üéØ <b>ƒê√É CH·ªåN: {strategy}</b>\n\n"
                            f"ü§ñ Bot s·∫Ω t·ª± ƒë·ªông t√¨m 2 coin ph√π h·ª£p nh·∫•t\n\n"
                            f"Ch·ªçn ng∆∞·ª°ng bi·∫øn ƒë·ªông (%):",
                            chat_id,
                            create_threshold_keyboard(),
                            self.telegram_bot_token, self.telegram_chat_id
                        )
                    else:
                        user_state['step'] = 'waiting_leverage'
                        send_telegram(
                            f"üéØ <b>ƒê√É CH·ªåN: {strategy}</b>\n\n"
                            f"ü§ñ Bot s·∫Ω t·ª± ƒë·ªông t√¨m 2 coin ph√π h·ª£p nh·∫•t\n\n"
                            f"Ch·ªçn ƒë√≤n b·∫©y:",
                            chat_id,
                            create_leverage_keyboard(strategy),
                            self.telegram_bot_token, self.telegram_chat_id
                        )
                else:
                    user_state['step'] = 'waiting_symbol'
                    send_telegram(
                        f"üéØ <b>ƒê√É CH·ªåN: {strategy}</b>\n\n"
                        f"Ch·ªçn c·∫∑p coin:",
                        chat_id,
                        create_symbols_keyboard(strategy),
                        self.telegram_bot_token, self.telegram_chat_id
                    )
        
        # B∆Ø·ªöC M·ªöI: NH·∫¨P THRESHOLD CHO REVERSE 24H
        elif current_step == 'waiting_threshold':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy th√™m bot", chat_id, create_main_menu(),
                            self.telegram_bot_token, self.telegram_chat_id)
            else:
                try:
                    threshold = float(text)
                    if threshold > 0:
                        user_state['threshold'] = threshold
                        user_state['step'] = 'waiting_leverage'
                        
                        # Hi·ªÉn th·ªã th√¥ng tin t√¨m ki·∫øm
                        send_telegram(
                            f"üéØ <b>THI·∫æT L·∫¨P REVERSE 24H</b>\n"
                            f"üìä Ng∆∞·ª°ng bi·∫øn ƒë·ªông: {threshold}%\n"
                            f"üîç S·∫Ω t√¨m 2 coin ƒë·∫°t ng∆∞·ª°ng v√† c√≥ ƒë√≤n b·∫©y kh·∫£ d·ª•ng\n\n"
                            f"Ch·ªçn ƒë√≤n b·∫©y:",
                            chat_id,
                            create_leverage_keyboard(user_state.get('strategy')),
                            self.telegram_bot_token, self.telegram_chat_id
                        )
                    else:
                        send_telegram("‚ö†Ô∏è Ng∆∞·ª°ng ph·∫£i l·ªõn h∆°n 0", chat_id,
                                    bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
                except:
                    send_telegram("‚ö†Ô∏è Gi√° tr·ªã kh√¥ng h·ª£p l·ªá, vui l√≤ng nh·∫≠p s·ªë", chat_id,
                                bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
        
        elif current_step == 'waiting_symbol':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy th√™m bot", chat_id, create_main_menu(),
                            self.telegram_bot_token, self.telegram_chat_id)
            else:
                symbol = text.upper()
                user_state['symbol'] = symbol
                user_state['step'] = 'waiting_leverage'
                send_telegram(
                    f"üìå <b>ƒê√É CH·ªåN: {symbol}</b>\n"
                    f"üéØ Chi·∫øn l∆∞·ª£c: {user_state['strategy']}\n\n"
                    f"Ch·ªçn ƒë√≤n b·∫©y:",
                    chat_id,
                    create_leverage_keyboard(user_state.get('strategy')),
                    self.telegram_bot_token, self.telegram_chat_id
                )
        
        elif current_step == 'waiting_leverage':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy th√™m bot", chat_id, create_main_menu(),
                            self.telegram_bot_token, self.telegram_chat_id)
            elif 'x' in text:
                leverage = int(text.replace('', '').replace('x', '').strip())
                user_state['leverage'] = leverage
                user_state['step'] = 'waiting_percent'
                
                # Hi·ªÉn th·ªã th√¥ng tin kh√°c nhau cho chi·∫øn l∆∞·ª£c t·ª± ƒë·ªông
                if user_state.get('strategy') in ["Reverse 24h", "Scalping", "Safe Grid"]:
                    if user_state.get('strategy') == "Reverse 24h":
                        send_telegram(
                            f"üéØ Chi·∫øn l∆∞·ª£c: {user_state['strategy']}\n"
                            f"üìä Ng∆∞·ª°ng: {user_state.get('threshold', 30)}%\n"
                            f"üí∞ ƒê√≤n b·∫©y: {leverage}x\n\n"
                            f"Nh·∫≠p % s·ªë d∆∞ mu·ªën s·ª≠ d·ª•ng:\n"
                            f"üí° <i>G·ª£i √Ω: 1%, 3%, 5%, 10%</i>",
                            chat_id,
                            create_percent_keyboard(),
                            self.telegram_bot_token, self.telegram_chat_id
                        )
                    else:
                        send_telegram(
                            f"üéØ Chi·∫øn l∆∞·ª£c: {user_state['strategy']}\n"
                            f"üí∞ ƒê√≤n b·∫©y: {leverage}x\n\n"
                            f"Nh·∫≠p % s·ªë d∆∞ mu·ªën s·ª≠ d·ª•ng:\n"
                            f"üí° <i>G·ª£i √Ω: 1%, 3%, 5%, 10%</i>",
                            chat_id,
                            create_percent_keyboard(),
                            self.telegram_bot_token, self.telegram_chat_id
                        )
                else:
                    send_telegram(
                        f"üìå C·∫∑p: {user_state['symbol']}\n"
                        f"üéØ Chi·∫øn l∆∞·ª£c: {user_state['strategy']}\n"
                        f"üí∞ ƒê√≤n b·∫©y: {leverage}x\n\n"
                        f"Nh·∫≠p % s·ªë d∆∞ mu·ªën s·ª≠ d·ª•ng:\n"
                        f"üí° <i>G·ª£i √Ω: 1%, 3%, 5%, 10%</i>",
                        chat_id,
                        create_percent_keyboard(),
                        self.telegram_bot_token, self.telegram_chat_id
                    )

        elif current_step == 'waiting_percent':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy th√™m bot", chat_id, create_main_menu(),
                            self.telegram_bot_token, self.telegram_chat_id)
            else:
                try:
                    percent = float(text)
                    if 1 <= percent <= 100:
                        user_state['percent'] = percent
                        user_state['step'] = 'waiting_tp'
                        
                        if user_state.get('strategy') in ["Reverse 24h", "Scalping", "Safe Grid"]:
                            if user_state.get('strategy') == "Reverse 24h":
                                send_telegram(
                                    f"üéØ Chi·∫øn l∆∞·ª£c: {user_state['strategy']}\n"
                                    f"üìä Ng∆∞·ª°ng: {user_state.get('threshold', 30)}%\n"
                                    f"üí∞ ƒêB: {user_state['leverage']}x\n"
                                    f"üìä %: {percent}%\n\n"
                                    f"Nh·∫≠p % Take Profit:\n"
                                    f"üí° <i>G·ª£i √Ω: 50%, 100%, 200%</i>",
                                    chat_id,
                                    create_tp_keyboard(),
                                    self.telegram_bot_token, self.telegram_chat_id
                                )
                            else:
                                send_telegram(
                                    f"üéØ Chi·∫øn l∆∞·ª£c: {user_state['strategy']}\n"
                                    f"üí∞ ƒêB: {user_state['leverage']}x\n"
                                    f"üìä %: {percent}%\n\n"
                                    f"Nh·∫≠p % Take Profit:\n"
                                    f"üí° <i>G·ª£i √Ω: 50%, 100%, 200%</i>",
                                    chat_id,
                                    create_tp_keyboard(),
                                    self.telegram_bot_token, self.telegram_chat_id
                                )
                        else:
                            send_telegram(
                                f"üìå C·∫∑p: {user_state['symbol']}\n"
                                f"üéØ Chi·∫øn l∆∞·ª£c: {user_state['strategy']}\n"
                                f"üí∞ ƒêB: {user_state['leverage']}x\n"
                                f"üìä %: {percent}%\n\n"
                                f"Nh·∫≠p % Take Profit:\n"
                                f"üí° <i>G·ª£i √Ω: 50%, 100%, 200%</i>",
                                chat_id,
                                create_tp_keyboard(),
                                self.telegram_bot_token, self.telegram_chat_id
                            )
                    else:
                        send_telegram("‚ö†Ô∏è Vui l√≤ng nh·∫≠p % t·ª´ 1-100", chat_id,
                                    bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
                except:
                    send_telegram("‚ö†Ô∏è Gi√° tr·ªã kh√¥ng h·ª£p l·ªá, vui l√≤ng nh·∫≠p s·ªë", chat_id,
                                bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
        
        elif current_step == 'waiting_tp':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy th√™m bot", chat_id, create_main_menu(),
                            self.telegram_bot_token, self.telegram_chat_id)
            else:
                try:
                    tp = float(text)
                    if tp > 0:
                        user_state['tp'] = tp
                        user_state['step'] = 'waiting_sl'
                        
                        if user_state.get('strategy') in ["Reverse 24h", "Scalping", "Safe Grid"]:
                            if user_state.get('strategy') == "Reverse 24h":
                                send_telegram(
                                    f"üéØ Chi·∫øn l∆∞·ª£c: {user_state['strategy']}\n"
                                    f"üìä Ng∆∞·ª°ng: {user_state.get('threshold', 30)}%\n"
                                    f"üí∞ ƒêB: {user_state['leverage']}x\n"
                                    f"üìä %: {user_state['percent']}%\n"
                                    f"üéØ TP: {tp}%\n\n"
                                    f"Nh·∫≠p % Stop Loss:\n"
                                    f"üí° <i>G·ª£i √Ω: 0 (t·∫Øt SL), 150%, 500%</i>",
                                    chat_id,
                                    create_sl_keyboard(),
                                    self.telegram_bot_token, self.telegram_chat_id
                                )
                            else:
                                send_telegram(
                                    f"üéØ Chi·∫øn l∆∞·ª£c: {user_state['strategy']}\n"
                                    f"üí∞ ƒêB: {user_state['leverage']}x\n"
                                    f"üìä %: {user_state['percent']}%\n"
                                    f"üéØ TP: {tp}%\n\n"
                                    f"Nh·∫≠p % Stop Loss:\n"
                                    f"üí° <i>G·ª£i √Ω: 0 (t·∫Øt SL), 150%, 500%</i>",
                                    chat_id,
                                    create_sl_keyboard(),
                                    self.telegram_bot_token, self.telegram_chat_id
                                )
                        else:
                            send_telegram(
                                f"üìå C·∫∑p: {user_state['symbol']}\n"
                                f"üéØ Chi·∫øn l∆∞·ª£c: {user_state['strategy']}\n"
                                f"üí∞ ƒêB: {user_state['leverage']}x\n"
                                f"üìä %: {user_state['percent']}%\n"
                                f"üéØ TP: {tp}%\n\n"
                                f"Nh·∫≠p % Stop Loss:\n"
                                f"üí° <i>G·ª£i √Ω: 0 (t·∫Øt SL), 150%, 500%</i>",
                                chat_id,
                                create_sl_keyboard(),
                                self.telegram_bot_token, self.telegram_chat_id
                            )
                    else:
                        send_telegram("‚ö†Ô∏è TP ph·∫£i l·ªõn h∆°n 0", chat_id,
                                    bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
                except:
                    send_telegram("‚ö†Ô∏è Gi√° tr·ªã kh√¥ng h·ª£p l·ªá, vui l√≤ng nh·∫≠p s·ªë", chat_id,
                                bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
        
        elif current_step == 'waiting_sl':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy th√™m bot", chat_id, create_main_menu(),
                            self.telegram_bot_token, self.telegram_chat_id)
            else:
                try:
                    sl = float(text)
                    if sl >= 0:
                        # Th√™m bot - X·ª¨ L√ù KH√ÅC NHAU CHO CHI·∫æN L∆Ø·ª¢C T·ª∞ ƒê·ªòNG
                        strategy = user_state['strategy']
                        leverage = user_state['leverage']
                        percent = user_state['percent']
                        tp = user_state['tp']
                        
                        if strategy in ["Reverse 24h", "Scalping", "Safe Grid"]:
                            # Chi·∫øn l∆∞·ª£c t·ª± ƒë·ªông: kh√¥ng c·∫ßn symbol
                            threshold = user_state.get('threshold', 30)
                            if self.add_bot(symbol=None, lev=leverage, percent=percent, tp=tp, sl=sl, 
                                          strategy_type=strategy, threshold=threshold):
                                success_msg = (
                                    f"‚úÖ <b>ƒê√É TH√äM BOT {strategy} T·ª∞ ƒê·ªòNG</b>\n\n"
                                    f"üéØ Chi·∫øn l∆∞·ª£c: {strategy}\n"
                                    f"üí∞ ƒê√≤n b·∫©y: {leverage}x\n"
                                    f"üìä % S·ªë d∆∞: {percent}%\n"
                                    f"üéØ TP: {tp}%\n"
                                    f"üõ°Ô∏è SL: {sl}%\n\n"
                                    f"ü§ñ Bot s·∫Ω t·ª± ƒë·ªông t√¨m v√† giao d·ªãch tr√™n 2 coin ph√π h·ª£p nh·∫•t"
                                )
                                if strategy == "Reverse 24h":
                                    success_msg += f"\nüìä Ng∆∞·ª°ng bi·∫øn ƒë·ªông: {threshold}%"
                                    
                                send_telegram(
                                    success_msg,
                                    chat_id,
                                    create_main_menu(),
                                    self.telegram_bot_token, self.telegram_chat_id
                                )
                            else:
                                send_telegram("‚ùå Kh√¥ng th·ªÉ th√™m bot", chat_id, create_main_menu(),
                                            self.telegram_bot_token, self.telegram_chat_id)
                        else:
                            # C√°c chi·∫øn l∆∞·ª£c kh√°c: c·∫ßn symbol
                            symbol = user_state['symbol']
                            if self.add_bot(symbol, leverage, percent, tp, sl, strategy):
                                success_msg = (
                                    f"‚úÖ <b>ƒê√É TH√äM BOT TH√ÄNH C√îNG</b>\n\n"
                                    f"üìå C·∫∑p: {symbol}\n"
                                    f"üéØ Chi·∫øn l∆∞·ª£c: {strategy}\n"
                                    f"üí∞ ƒê√≤n b·∫©y: {leverage}x\n"
                                    f"üìä % S·ªë d∆∞: {percent}%\n"
                                    f"üéØ TP: {tp}%\n"
                                    f"üõ°Ô∏è SL: {sl}%"
                                )
                                send_telegram(
                                    success_msg,
                                    chat_id,
                                    create_main_menu(),
                                    self.telegram_bot_token, self.telegram_chat_id
                                )
                            else:
                                send_telegram("‚ùå Kh√¥ng th·ªÉ th√™m bot, vui l√≤ng ki·ªÉm tra log", chat_id, create_main_menu(),
                                            self.telegram_bot_token, self.telegram_chat_id)
                        
                        # Reset tr·∫°ng th√°i
                        self.user_states[chat_id] = {}
                    else:
                        send_telegram("‚ö†Ô∏è SL ph·∫£i l·ªõn h∆°n ho·∫∑c b·∫±ng 0", chat_id,
                                    bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
                except:
                    send_telegram("‚ö†Ô∏è Gi√° tr·ªã kh√¥ng h·ª£p l·ªá, vui l√≤ng nh·∫≠p s·ªë", chat_id,
                                bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
        
        # X·ª≠ l√Ω c√°c l·ªánh ch√≠nh
        elif text == "üìä Danh s√°ch Bot":
            if not self.bots:
                send_telegram("ü§ñ Kh√¥ng c√≥ bot n√†o ƒëang ch·∫°y", chat_id,
                            bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
            else:
                message = "ü§ñ <b>DANH S√ÅCH BOT ƒêANG CH·∫†Y</b>\n\n"
                for bot_id, bot in self.bots.items():
                    status = "üü¢ M·ªü" if bot.status == "open" else "üü° Ch·ªù"
                    message += f"üîπ {bot_id} | {status} | {bot.side} | ƒêB: {bot.lev}x\n"
                send_telegram(message, chat_id,
                            bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
        
        elif text == "‚ûï Th√™m Bot":
            self.user_states[chat_id] = {'step': 'waiting_strategy'}
            
            # Ki·ªÉm tra k·∫øt n·ªëi API tr∆∞·ªõc
            balance = get_balance(self.api_key, self.api_secret)
            if balance is None:
                send_telegram("‚ùå <b>L·ªñI K·∫æT N·ªêI BINANCE</b>\nVui l√≤ng ki·ªÉm tra API Key tr∆∞·ªõc khi th√™m bot!", chat_id,
                            bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
                return
            
            # Hi·ªÉn th·ªã th√¥ng tin ƒë·∫∑c bi·ªát cho chi·∫øn l∆∞·ª£c t·ª± ƒë·ªông
            send_telegram(
                f"üéØ <b>CH·ªåN CHI·∫æN L∆Ø·ª¢C GIAO D·ªäCH</b>\n\n"
                f"üí° <b>Chi·∫øn l∆∞·ª£c t·ª± ƒë·ªông (T√¨m 2 coin):</b>\n‚Ä¢ Reverse 24h\n‚Ä¢ Scalping  \n‚Ä¢ Safe Grid\n\n"
                f"üí° <b>Chi·∫øn l∆∞·ª£c th·ªß c√¥ng:</b>\n‚Ä¢ RSI/EMA Recursive\n‚Ä¢ EMA Crossover\n‚Ä¢ Trend Following",
                chat_id,
                create_strategy_keyboard(),
                self.telegram_bot_token, self.telegram_chat_id
            )
        
        elif text == "‚õî D·ª´ng Bot":
            if not self.bots:
                send_telegram("ü§ñ Kh√¥ng c√≥ bot n√†o ƒëang ch·∫°y", chat_id,
                            bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
            else:
                message = "‚õî <b>CH·ªåN BOT ƒê·ªÇ D·ª™NG</b>\n\n"
                keyboard = []
                row = []
                
                for i, bot_id in enumerate(self.bots.keys()):
                    message += f"üîπ {bot_id}\n"
                    row.append({"text": f"‚õî {bot_id}"})
                    if len(row) == 2 or i == len(self.bots) - 1:
                        keyboard.append(row)
                        row = []
                
                keyboard.append([{"text": "‚ùå H·ªßy b·ªè"}])
                
                send_telegram(
                    message, 
                    chat_id, 
                    {"keyboard": keyboard, "resize_keyboard": True, "one_time_keyboard": True},
                    self.telegram_bot_token, self.telegram_chat_id
                )
        
        elif text.startswith("‚õî "):
            bot_id = text.replace("‚õî ", "").strip()
            if bot_id in self.bots:
                self.stop_bot(bot_id)
                send_telegram(f"‚õî ƒê√£ g·ª≠i l·ªánh d·ª´ng bot {bot_id}", chat_id, create_main_menu(),
                            self.telegram_bot_token, self.telegram_chat_id)
            else:
                send_telegram(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y bot {bot_id}", chat_id, create_main_menu(),
                            self.telegram_bot_token, self.telegram_chat_id)
        
        elif text == "üí∞ S·ªë d∆∞":
            try:
                balance = get_balance(self.api_key, self.api_secret)
                if balance is None:
                    send_telegram("‚ùå <b>L·ªñI K·∫æT N·ªêI BINANCE</b>\nVui l√≤ng ki·ªÉm tra API Key!", chat_id,
                                bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
                else:
                    send_telegram(f"üí∞ <b>S·ªê D∆Ø KH·∫¢ D·ª§NG</b>: {balance:.2f} USDT", chat_id,
                                bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
            except Exception as e:
                send_telegram(f"‚ö†Ô∏è L·ªói l·∫•y s·ªë d∆∞: {str(e)}", chat_id,
                            bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
        
        elif text == "üìà V·ªã th·∫ø":
            try:
                positions = get_positions(api_key=self.api_key, api_secret=self.api_secret)
                if not positions:
                    send_telegram("üì≠ Kh√¥ng c√≥ v·ªã th·∫ø n√†o ƒëang m·ªü", chat_id,
                                bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
                    return
                
                message = "üìà <b>V·ªä TH·∫æ ƒêANG M·ªû</b>\n\n"
                for pos in positions:
                    position_amt = float(pos.get('positionAmt', 0))
                    if position_amt != 0:
                        symbol = pos.get('symbol', 'UNKNOWN')
                        entry = float(pos.get('entryPrice', 0))
                        side = "LONG" if position_amt > 0 else "SHORT"
                        pnl = float(pos.get('unRealizedProfit', 0))
                        
                        message += (
                            f"üîπ {symbol} | {side}\n"
                            f"üìä Kh·ªëi l∆∞·ª£ng: {abs(position_amt):.4f}\n"
                            f"üè∑Ô∏è Gi√° v√†o: {entry:.4f}\n"
                            f"üí∞ PnL: {pnl:.2f} USDT\n\n"
                        )
                
                send_telegram(message, chat_id,
                            bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
            except Exception as e:
                send_telegram(f"‚ö†Ô∏è L·ªói l·∫•y v·ªã th·∫ø: {str(e)}", chat_id,
                            bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
        
        elif text == "üéØ Chi·∫øn l∆∞·ª£c":
            strategy_info = (
                "üéØ <b>DANH S√ÅCH CHI·∫æN L∆Ø·ª¢C</b>\n\n"
                "üéØ <b>Reverse 24h</b> - T·ª∞ ƒê·ªòNG\n"
                "‚Ä¢ ƒê·∫£o chi·ªÅu bi·∫øn ƒë·ªông 24h\n"
                "‚Ä¢ T·ª± t√¨m 2 coin bi·∫øn ƒë·ªông cao\n"
                "‚Ä¢ Lo·∫°i b·ªè BTC/ETH\n\n"
                "‚ö° <b>Scalping</b> - T·ª∞ ƒê·ªòNG\n"
                "‚Ä¢ Giao d·ªãch t·ªëc ƒë·ªô cao\n"
                "‚Ä¢ T·ª± t√¨m 2 coin bi·∫øn ƒë·ªông nhanh\n"
                "‚Ä¢ Lo·∫°i b·ªè BTC/ETH\n\n"
                "üõ°Ô∏è <b>Safe Grid</b> - T·ª∞ ƒê·ªòNG\n"
                "‚Ä¢ Grid an to√†n\n"
                "‚Ä¢ T·ª± t√¨m 2 coin ·ªïn ƒë·ªãnh\n"
                "‚Ä¢ Lo·∫°i b·ªè BTC/ETH\n\n"
                "ü§ñ <b>RSI/EMA Recursive</b>\n"
                "‚Ä¢ Ph√¢n t√≠ch RSI + EMA ƒë·ªá quy\n\n"
                "üìä <b>EMA Crossover</b>\n"
                "‚Ä¢ Giao c·∫Øt EMA nhanh/ch·∫≠m\n\n"
                "üìà <b>Trend Following</b>\n"
                "‚Ä¢ Theo xu h∆∞·ªõng EMA + RSI"
            )
            send_telegram(strategy_info, chat_id,
                        bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
        
        elif text == "‚öôÔ∏è C·∫•u h√¨nh":
            balance = get_balance(self.api_key, self.api_secret)
            api_status = "‚úÖ ƒê√£ k·∫øt n·ªëi" if balance is not None else "‚ùå L·ªói k·∫øt n·ªëi"
            
            config_info = (
                "‚öôÔ∏è <b>C·∫§U H√åNH H·ªÜ TH·ªêNG</b>\n\n"
                f"üîë Binance API: {api_status}\n"
                f"ü§ñ S·ªë bot: {len(self.bots)}\n"
                f"üìä Chi·∫øn l∆∞·ª£c: {len(set(bot.strategy_name for bot in self.bots.values()))}\n"
                f"üåê WebSocket: {len(self.ws_manager.connections)} k·∫øt n·ªëi"
            )
            send_telegram(config_info, chat_id,
                        bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
        
        # G·ª≠i l·∫°i menu n·∫øu kh√¥ng c√≥ l·ªánh ph√π h·ª£p
        elif text:
            self.send_main_menu(chat_id)
