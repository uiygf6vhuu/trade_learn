# trading_bot_perfect_system.py - H·ªÜ TH·ªêNG BOT GIAO D·ªäCH HO√ÄN CH·ªàNH V·ªöI CHI·∫æN L∆Ø·ª¢C T√çCH H·ª¢P
import json
import hmac
import hashlib
import time
import threading
import urllib.request
import urllib.parse
import numpy as np
import websocket
import logging
import requests
import os
import math
import traceback
import random
from datetime import datetime
from concurrent.futures import ThreadPoolExecutor

# ========== C·∫§U H√åNH LOGGING CHUY√äN NGHI·ªÜP ==========
def setup_logging():
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(module)s - %(message)s',
        handlers=[
            logging.StreamHandler(),
            logging.FileHandler('perfect_bot_system.log')
        ]
    )
    return logging.getLogger()

logger = setup_logging()

# ========== H√ÄM TELEGRAM N√ÇNG C·∫§P ==========
def send_telegram(message, chat_id=None, reply_markup=None, bot_token=None, default_chat_id=None):
    if not bot_token:
        logger.warning("Telegram Bot Token ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p")
        return
    
    chat_id = chat_id or default_chat_id
    if not chat_id:
        logger.warning("Telegram Chat ID ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p")
        return
    
    url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": message,
        "parse_mode": "HTML"
    }
    
    if reply_markup:
        payload["reply_markup"] = json.dumps(reply_markup)
    
    try:
        response = requests.post(url, json=payload, timeout=15)
        if response.status_code != 200:
            logger.error(f"L·ªói Telegram ({response.status_code}): {response.text}")
    except Exception as e:
        logger.error(f"L·ªói k·∫øt n·ªëi Telegram: {str(e)}")

# ========== MENU TELEGRAM HO√ÄN CH·ªàNH ==========
def create_main_menu():
    return {
        "keyboard": [
            [{"text": "üìä Danh s√°ch Bot"}, {"text": "üìä Th·ªëng k√™"}],
            [{"text": "‚ûï Th√™m Bot"}, {"text": "‚õî D·ª´ng Bot"}],
            [{"text": "üí∞ S·ªë d∆∞"}, {"text": "üìà V·ªã th·∫ø"}],
            [{"text": "‚öôÔ∏è C·∫•u h√¨nh"}, {"text": "üéØ Chi·∫øn l∆∞·ª£c"}],
            [{"text": "üöÄ Kh·ªüi ch·∫°y h·ªá th·ªëng"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": False
    }

def create_cancel_keyboard():
    return {
        "keyboard": [[{"text": "‚ùå H·ªßy b·ªè"}]],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_strategy_keyboard():
    return {
        "keyboard": [
            [{"text": "üéØ H·ªá th·ªëng Ho√†n h·∫£o"}],
            [{"text": "‚ùå H·ªßy b·ªè"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_bot_count_keyboard():
    return {
        "keyboard": [
            [{"text": "1"}, {"text": "2"}, {"text": "3"}],
            [{"text": "5"}, {"text": "8"}],
            [{"text": "‚ùå H·ªßy b·ªè"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_leverage_keyboard():
    leverages = ["3", "5", "10", "15", "20", "25"]
    
    keyboard = []
    row = []
    for lev in leverages:
        row.append({"text": f"{lev}x"})
        if len(row) == 3:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    keyboard.append([{"text": "‚ùå H·ªßy b·ªè"}])
    
    return {
        "keyboard": keyboard,
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_percent_keyboard():
    return {
        "keyboard": [
            [{"text": "1"}, {"text": "2"}, {"text": "3"}],
            [{"text": "5"}, {"text": "8"}, {"text": "10"}],
            [{"text": "‚ùå H·ªßy b·ªè"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_tp_keyboard():
    return {
        "keyboard": [
            [{"text": "50"}, {"text": "100"}, {"text": "150"}],
            [{"text": "200"}, {"text": "300"}, {"text": "500"}],
            [{"text": "‚ùå H·ªßy b·ªè"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_sl_keyboard():
    return {
        "keyboard": [
            [{"text": "T·∫ÆT SL"}, {"text": "30"}, {"text": "50"}],
            [{"text": "80"}, {"text": "100"}, {"text": "150"}],
            [{"text": "‚ùå H·ªßy b·ªè"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_coin_per_bot_keyboard():
    return {
        "keyboard": [
            [{"text": "1"}, {"text": "2"}, {"text": "3"}],
            [{"text": "‚ùå H·ªßy b·ªè"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

# ========== H·ªÜ TH·ªêNG CH·ªà B√ÅO XU H∆Ø·ªöNG T√çCH H·ª¢P HO√ÄN CH·ªàNH ==========
class PerfectTrendIndicatorSystem:
    """H·ªÜ TH·ªêNG CH·ªà B√ÅO XU H∆Ø·ªöNG HO√ÄN H·∫¢O - K·∫æT H·ª¢P ƒêA CH·ªà B√ÅO"""
    
    def __init__(self):
        self.ema_fast = 9
        self.ema_slow = 21
        self.ema_trend = 50
        self.rsi_period = 14
        self.macd_fast = 12
        self.macd_slow = 26
        self.macd_signal = 9
        self.lookback = 100
        
    def calculate_ema(self, prices, period):
        """T√≠nh EMA v·ªõi x·ª≠ l√Ω l·ªói"""
        if len(prices) < period:
            return prices[-1] if prices else 0
            
        ema = [prices[0]]
        multiplier = 2 / (period + 1)
        
        for i in range(1, len(prices)):
            ema_value = (prices[i] * multiplier) + (ema[i-1] * (1 - multiplier))
            ema.append(ema_value)
            
        return ema[-1]
    
    def calculate_rsi(self, prices, period=14):
        """T√≠nh RSI ch√≠nh x√°c"""
        if len(prices) < period + 1:
            return 50
            
        gains = []
        losses = []
        
        for i in range(1, len(prices)):
            change = prices[i] - prices[i-1]
            if change > 0:
                gains.append(change)
                losses.append(0)
            else:
                gains.append(0)
                losses.append(abs(change))
        
        if len(gains) < period:
            return 50
            
        avg_gain = np.mean(gains[-period:])
        avg_loss = np.mean(losses[-period:])
        
        if avg_loss == 0:
            return 100 if avg_gain > 0 else 50
            
        rs = avg_gain / avg_loss
        rsi = 100 - (100 / (1 + rs))
        
        return rsi
    
    def calculate_macd(self, prices):
        """T√≠nh MACD signal"""
        if len(prices) < self.macd_slow:
            return 0
            
        ema_fast = self.calculate_ema(prices, self.macd_fast)
        ema_slow = self.calculate_ema(prices, self.macd_slow)
        macd_line = ema_fast - ema_slow
        
        # T√≠nh MACD signal line ƒë∆°n gi·∫£n
        macd_prices = [macd_line] * 10  # Gi·∫£ l·∫≠p d·ªØ li·ªáu MACD
        signal_line = self.calculate_ema(macd_prices, self.macd_signal)
        
        return macd_line - signal_line
    
    def get_volume_profile(self, symbol):
        """Ph√¢n t√≠ch volume n√¢ng cao"""
        try:
            url = "https://fapi.binance.com/fapi/v1/klines"
            params = {
                'symbol': symbol.upper(),
                'interval': '15m',
                'limit': 25
            }
            data = binance_api_request(url, params=params)
            if not data:
                return 1.0, 0.0
                
            volumes = [float(candle[5]) for candle in data]
            if len(volumes) < 5:
                return 1.0, 0.0
                
            current_volume = volumes[-1]
            avg_volume = np.mean(volumes[:-1])
            volume_ratio = current_volume / avg_volume if avg_volume > 0 else 1.0
            
            # ƒê·ªô bi·∫øn ƒë·ªông volume
            volume_volatility = np.std(volumes) / avg_volume if avg_volume > 0 else 0.0
            
            return volume_ratio, volume_volatility
            
        except Exception as e:
            logger.error(f"L·ªói ph√¢n t√≠ch volume {symbol}: {str(e)}")
            return 1.0, 0.0
    
    def get_market_structure(self, symbol):
        """Ph√¢n t√≠ch c·∫•u tr√∫c th·ªã tr∆∞·ªùng to√†n di·ªán"""
        try:
            url = "https://fapi.binance.com/fapi/v1/klines"
            params = {
                'symbol': symbol.upper(),
                'interval': '1h',
                'limit': 50
            }
            data = binance_api_request(url, params=params)
            if not data or len(data) < 20:
                return 0, 0, "NEUTRAL"
                
            highs = [float(candle[2]) for candle in data]
            lows = [float(candle[3]) for candle in data]
            closes = [float(candle[4]) for candle in data]
            
            # H·ªó tr·ª£ v√† kh√°ng c·ª± ƒë·ªông
            resistance = max(highs[-20:])
            support = min(lows[-20:])
            current_price = closes[-1]
            
            # X√°c ƒë·ªãnh xu h∆∞·ªõng
            if current_price > resistance * 0.98:
                structure = "BULLISH"
            elif current_price < support * 1.02:
                structure = "BEARISH"
            else:
                structure = "RANGING"
            
            return support, resistance, structure
            
        except Exception as e:
            logger.error(f"L·ªói ph√¢n t√≠ch c·∫•u tr√∫c {symbol}: {str(e)}")
            return 0, 0, "NEUTRAL"
    
    def analyze_symbol(self, symbol):
        """PH√ÇN T√çCH HO√ÄN CH·ªàNH - K·∫æT H·ª¢P 5 CH·ªà B√ÅO QUAN TR·ªåNG"""
        try:
            klines = self.get_klines(symbol, '15m', self.lookback)
            if not klines or len(klines) < 50:
                return "NEUTRAL", 0.0
            
            closes = [float(candle[4]) for candle in klines]
            current_price = closes[-1]
            
            # 1. T√çN HI·ªÜU EMA (25%)
            ema_fast = self.calculate_ema(closes, self.ema_fast)
            ema_slow = self.calculate_ema(closes, self.ema_slow)
            ema_trend = self.calculate_ema(closes, self.ema_trend)
            
            ema_signal = "NEUTRAL"
            ema_strength = 0
            
            if current_price > ema_fast > ema_slow > ema_trend:
                ema_signal = "BUY"
                ema_strength = 1.0
            elif current_price < ema_fast < ema_slow < ema_trend:
                ema_signal = "SELL" 
                ema_strength = 1.0
            elif current_price > ema_fast > ema_slow:
                ema_signal = "BUY"
                ema_strength = 0.7
            elif current_price < ema_fast < ema_slow:
                ema_signal = "SELL"
                ema_strength = 0.7
            elif (ema_signal == "NEUTRAL" and 
                  ((current_price > ema_fast and current_price > ema_slow) or 
                   (current_price < ema_fast and current_price < ema_slow))):
                ema_strength = 0.4
            else:
                ema_strength = 0.2
            
            # 2. T√çN HI·ªÜU RSI (20%)
            rsi = self.calculate_rsi(closes, self.rsi_period)
            volume_ratio, volume_volatility = self.get_volume_profile(symbol)
            
            rsi_signal = "NEUTRAL"
            rsi_strength = 0
            
            if rsi < 25 and volume_ratio > 1.3:
                rsi_signal = "BUY"
                rsi_strength = min((30 - rsi) / 30 * volume_ratio, 1.0)
            elif rsi > 75 and volume_ratio > 1.3:
                rsi_signal = "SELL" 
                rsi_strength = min((rsi - 70) / 30 * volume_ratio, 1.0)
            elif 35 < rsi < 65:
                rsi_strength = 0.3
            elif (rsi < 35 and volume_ratio > 1.1) or (rsi > 65 and volume_ratio > 1.1):
                rsi_strength = 0.5
            
            # 3. T√çN HI·ªÜU MARKET STRUCTURE (25%)
            support, resistance, structure = self.get_market_structure(symbol)
            sr_signal = "NEUTRAL"
            sr_strength = 0
            
            if support > 0 and resistance > 0:
                distance_to_resistance = (resistance - current_price) / current_price
                distance_to_support = (current_price - support) / current_price
                
                if structure == "BULLISH" and volume_ratio > 1.2:
                    sr_signal = "BUY"
                    sr_strength = min(volume_ratio * 0.8, 1.0)
                elif structure == "BEARISH" and volume_ratio > 1.2:
                    sr_signal = "SELL"
                    sr_strength = min(volume_ratio * 0.8, 1.0)
                elif distance_to_resistance < 0.008 and volume_ratio > 1.1:
                    sr_signal = "SELL"
                    sr_strength = 0.7
                elif distance_to_support < 0.008 and volume_ratio > 1.1:
                    sr_signal = "BUY" 
                    sr_strength = 0.7
                elif structure != "NEUTRAL":
                    sr_strength = 0.4
            
            # 4. T√çN HI·ªÜU MACD (15%)
            macd_signal = "NEUTRAL"
            macd_strength = 0
            
            try:
                macd_value = self.calculate_macd(closes)
                if macd_value > 0.001:
                    macd_signal = "BUY"
                    macd_strength = min(abs(macd_value) * 100, 1.0)
                elif macd_value < -0.001:
                    macd_signal = "SELL"
                    macd_strength = min(abs(macd_value) * 100, 1.0)
                else:
                    macd_strength = 0.2
            except:
                macd_strength = 0.1
            
            # 5. T√çN HI·ªÜU PRICE ACTION (15%)
            price_signal = self.analyze_price_action(closes)
            price_strength = 0.6 if price_signal != "NEUTRAL" else 0.2
            
            # T·ªîNG H·ª¢P T·∫§T C·∫¢ T√çN HI·ªÜU V·ªöI TR·ªåNG S·ªê
            signals = {
                "BUY": 0,
                "SELL": 0, 
                "NEUTRAL": 0
            }
            
            weights = {
                "EMA": 0.25,
                "RSI_VOLUME": 0.20, 
                "STRUCTURE": 0.25,
                "MACD": 0.15,
                "PRICE_ACTION": 0.15
            }
            
            # √Åp d·ª•ng tr·ªçng s·ªë
            if ema_signal != "NEUTRAL":
                signals[ema_signal] += weights["EMA"] * ema_strength
                
            if rsi_signal != "NEUTRAL": 
                signals[rsi_signal] += weights["RSI_VOLUME"] * rsi_strength
                
            if sr_signal != "NEUTRAL":
                signals[sr_signal] += weights["STRUCTURE"] * sr_strength
                
            if macd_signal != "NEUTRAL":
                signals[macd_signal] += weights["MACD"] * macd_strength
                
            if price_signal != "NEUTRAL":
                signals[price_signal] += weights["PRICE_ACTION"] * price_strength
            
            # X√°c ƒë·ªãnh t√≠n hi·ªáu cu·ªëi c√πng
            max_signal = max(signals, key=signals.get)
            confidence = signals[max_signal]
            
            if confidence >= 0.35:
                logger.info(f"üéØ {symbol} - {max_signal} (ƒê·ªô tin c·∫≠y: {confidence:.1%})")
                logger.info(f"   üìä EMA:{ema_strength:.1%} RSI:{rsi_strength:.1%} STRUCT:{sr_strength:.1%} MACD:{macd_strength:.1%}")
                return max_signal, confidence
            else:
                logger.debug(f"‚ö™ {symbol} - T√≠n hi·ªáu y·∫øu (Confidence: {confidence:.1%})")
                return "NEUTRAL", confidence
                
        except Exception as e:
            logger.error(f"‚ùå L·ªói ph√¢n t√≠ch {symbol}: {str(e)}")
            return "NEUTRAL", 0.0
    
    def analyze_price_action(self, prices):
        """Ph√¢n t√≠ch price action ƒë∆°n gi·∫£n"""
        if len(prices) < 10:
            return "NEUTRAL"
            
        recent_trend = prices[-5:]
        prev_trend = prices[-10:-5]
        
        if (all(recent_trend[i] >= recent_trend[i-1] for i in range(1, len(recent_trend))) and
            recent_trend[-1] > max(prev_trend)):
            return "BUY"
        elif (all(recent_trend[i] <= recent_trend[i-1] for i in range(1, len(recent_trend))) and
              recent_trend[-1] < min(prev_trend)):
            return "SELL"
        return "NEUTRAL"
    
    def get_klines(self, symbol, interval, limit):
        """L·∫•y d·ªØ li·ªáu n·∫øn t·ª´ Binance"""
        try:
            url = "https://fapi.binance.com/fapi/v1/klines"
            params = {
                'symbol': symbol.upper(),
                'interval': interval,
                'limit': limit
            }
            return binance_api_request(url, params=params)
        except Exception as e:
            logger.error(f"‚ùå L·ªói l·∫•y n·∫øn {symbol} {interval}: {str(e)}")
            return None

# ========== QU·∫¢N L√ù COIN TH√îNG MINH ==========
class SmartCoinManager:
    """QU·∫¢N L√ù COIN TH√îNG MINH V·ªöI GI·ªöI H·∫†N ƒê·ªòNG"""
    
    _instance = None
    _lock = threading.Lock()
    
    def __new__(cls):
        with cls._lock:
            if cls._instance is None:
                cls._instance = super(SmartCoinManager, cls).__new__(cls)
                cls._instance.managed_coins = {}
                cls._instance.max_coins = 10
                cls._instance.coin_scores = {}
        return cls._instance
    
    def set_max_coins(self, max_coins):
        """Thi·∫øt l·∫≠p s·ªë coin t·ªëi ƒëa"""
        with self._lock:
            self.max_coins = max_coins
    
    def can_add_coin(self, symbol=None):
        """Ki·ªÉm tra c√≥ th·ªÉ th√™m coin kh√¥ng"""
        with self._lock:
            return len(self.managed_coins) < self.max_coins
    
    def register_coin(self, symbol, bot_id, strategy, score=0.5):
        """ƒêƒÉng k√Ω coin v·ªõi ƒëi·ªÉm s·ªë"""
        with self._lock:
            if symbol not in self.managed_coins and len(self.managed_coins) < self.max_coins:
                self.managed_coins[symbol] = {
                    "bot_id": bot_id,
                    "strategy": strategy,
                    "timestamp": time.time()
                }
                self.coin_scores[symbol] = score
                return True
            return False
    
    def unregister_coin(self, symbol):
        """H·ªßy ƒëƒÉng k√Ω coin"""
        with self._lock:
            if symbol in self.managed_coins:
                del self.managed_coins[symbol]
                if symbol in self.coin_scores:
                    del self.coin_scores[symbol]
                return True
            return False
    
    def is_coin_managed(self, symbol):
        """Ki·ªÉm tra coin ƒë√£ ƒë∆∞·ª£c qu·∫£n l√Ω ch∆∞a"""
        with self._lock:
            return symbol in self.managed_coins
    
    def get_managed_coins(self):
        """L·∫•y danh s√°ch coin ƒëang qu·∫£n l√Ω"""
        with self._lock:
            return self.managed_coins.copy()
    
    def get_available_slots(self):
        """L·∫•y s·ªë slot c√≤n tr·ªëng"""
        with self._lock:
            return max(0, self.max_coins - len(self.managed_coins))
    
    def get_lowest_score_coin(self):
        """L·∫•y coin c√≥ ƒëi·ªÉm s·ªë th·∫•p nh·∫•t"""
        with self._lock:
            if not self.coin_scores:
                return None
            return min(self.coin_scores.items(), key=lambda x: x[1])

# ========== SMART COIN FINDER HO√ÄN CH·ªàNH ==========
class PerfectCoinFinder:
    """T√åM COIN HO√ÄN H·∫¢O V·ªöI H·ªÜ TH·ªêNG ƒê√ÅNH GI√Å ƒêA TI√äU CH√ç"""
    
    def __init__(self, api_key, api_secret):
        self.api_key = api_key
        self.api_secret = api_secret
        self.analyzer = PerfectTrendIndicatorSystem()
        self.leverage_cache = {}
        
    def check_leverage_support(self, symbol, required_leverage):
        """Ki·ªÉm tra coin h·ªó tr·ª£ ƒë√≤n b·∫©y"""
        try:
            cache_key = f"{symbol}_{required_leverage}"
            if cache_key in self.leverage_cache:
                return self.leverage_cache[cache_key]
                
            max_leverage = self.get_max_leverage(symbol)
            if max_leverage and max_leverage >= required_leverage:
                self.leverage_cache[cache_key] = True
                return True
            else:
                self.leverage_cache[cache_key] = False
                return False
                
        except Exception as e:
            return False
    
    def get_max_leverage(self, symbol):
        """L·∫•y ƒë√≤n b·∫©y t·ªëi ƒëa c·ªßa coin"""
        try:
            ts = int(time.time() * 1000)
            params = {"timestamp": ts}
            query = urllib.parse.urlencode(params)
            sig = sign(query, self.api_secret)
            url = f"https://fapi.binance.com/fapi/v1/leverageBracket?{query}&signature={sig}"
            headers = {'X-MBX-APIKEY': self.api_key}
            
            data = binance_api_request(url, headers=headers)
            if not data:
                return None
                
            for bracket in data:
                if bracket['symbol'] == symbol:
                    max_leverage = bracket['brackets'][0]['initialLeverage']
                    return max_leverage
                    
            return None
            
        except Exception as e:
            return None

    def find_perfect_coin(self, target_direction, required_leverage, excluded_symbols=None):
        """T√åM COIN HO√ÄN H·∫¢O THEO ƒêA TI√äU CH√ç"""
        try:
            if excluded_symbols is None:
                excluded_symbols = set()
            
            logger.info(f"üîç T√¨m coin {target_direction} v·ªõi ƒë√≤n b·∫©y {required_leverage}x...")
            
            all_symbols = get_all_usdt_pairs(limit=400)
            if not all_symbols:
                logger.error("‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c danh s√°ch coin t·ª´ Binance")
                return None
            
            # X√°o tr·ªôn ƒë·ªÉ tr√°nh thi√™n v·ªã
            random.shuffle(all_symbols)
            
            best_coin = None
            best_score = 0
            qualified_coins = []
            
            for symbol in all_symbols:
                try:
                    # B·ªè qua c√°c symbol ƒë·∫∑c bi·ªát v√† b·ªã exclude
                    if (symbol in ['BTCUSDT', 'ETHUSDT', 'BNBUSDT'] or 
                        symbol in excluded_symbols or
                        "DOWN" in symbol or "UP" in symbol):
                        continue
                    
                    # Ki·ªÉm tra ƒë√≤n b·∫©y
                    if not self.check_leverage_support(symbol, required_leverage):
                        continue
                    
                    # Ph√¢n t√≠ch coin
                    signal, confidence = self.analyzer.analyze_symbol(symbol)
                    
                    if signal == target_direction and confidence >= 0.4:
                        # T√≠nh ƒëi·ªÉm t·ªïng h·ª£p
                        score = self.calculate_comprehensive_score(symbol, confidence, target_direction)
                        
                        qualified_coins.append({
                            'symbol': symbol,
                            'direction': target_direction,
                            'score': score,
                            'confidence': confidence,
                            'qualified': True
                        })
                        
                        if score > best_score:
                            best_score = score
                            best_coin = qualified_coins[-1]
                            
                except Exception as e:
                    continue
            
            # Log k·∫øt qu·∫£ t√¨m ki·∫øm
            if qualified_coins:
                logger.info(f"‚úÖ T√¨m th·∫•y {len(qualified_coins)} coin {target_direction} ph√π h·ª£p")
                for coin in sorted(qualified_coins, key=lambda x: x['score'], reverse=True)[:3]:
                    logger.info(f"   ü•á {coin['symbol']} - ƒêi·ªÉm: {coin['score']:.2f} - Tin c·∫≠y: {coin['confidence']:.1%}")
            
            return best_coin if best_coin else self._find_fallback_coin(target_direction, excluded_symbols)
                
        except Exception as e:
            logger.error(f"‚ùå L·ªói t√¨m coin: {str(e)}")
            return None
    
    def calculate_comprehensive_score(self, symbol, confidence, target_direction):
        """T√≠nh ƒëi·ªÉm t·ªïng h·ª£p cho coin"""
        try:
            base_score = confidence
            
            # ƒêi·ªÉm volume
            volume_ratio, volume_volatility = self.analyzer.get_volume_profile(symbol)
            volume_score = min(volume_ratio, 2.0) / 2.0  # Chu·∫©n h√≥a v·ªÅ 0-1
            
            # ƒêi·ªÉm bi·∫øn ƒë·ªông 24h
            change_24h = abs(get_24h_change(symbol))
            volatility_score = min(change_24h / 10.0, 1.0)  # Chu·∫©n h√≥a v·ªÅ 0-1
            
            # ƒêi·ªÉm t·ªïng h·ª£p
            total_score = (base_score * 0.6 + volume_score * 0.25 + volatility_score * 0.15)
            
            return total_score
            
        except Exception:
            return confidence
    
    def _find_fallback_coin(self, target_direction, excluded_symbols):
        """Ph∆∞∆°ng ph√°p d·ª± ph√≤ng khi kh√¥ng t√¨m th·∫•y coin t·ªët"""
        logger.info(f"üîÑ S·ª≠ d·ª•ng fallback cho {target_direction}")
        
        all_symbols = get_all_usdt_pairs(limit=200)
        if not all_symbols:
            return None
            
        random.shuffle(all_symbols)
        
        for symbol in all_symbols:
            if symbol in ['BTCUSDT', 'ETHUSDT'] or symbol in excluded_symbols:
                continue
                
            try:
                change_24h = get_24h_change(symbol)
                if change_24h is None:
                    continue
                
                if target_direction == "BUY" and change_24h < -3:
                    return {
                        'symbol': symbol,
                        'direction': target_direction,
                        'score': 0.4,
                        'confidence': 0.4,
                        'fallback': True,
                        'qualified': True
                    }
                elif target_direction == "SELL" and change_24h > 3:
                    return {
                        'symbol': symbol,
                        'direction': target_direction,
                        'score': 0.4,
                        'confidence': 0.4,
                        'fallback': True,
                        'qualified': True
                    }
                        
            except Exception:
                continue
        
        return None

# ========== C√ÇN B·∫∞NG V·ªä TH·∫æ TH√îNG MINH ==========
class IntelligentPositionBalancer:
    """C√ÇN B·∫∞NG V·ªä TH·∫æ TH√îNG MINH D·ª∞A TR√äN ƒêA Y·∫æU T·ªê"""
    
    def __init__(self, bot_manager):
        self.bot_manager = bot_manager
        self.position_history = []
        self.max_history = 100
        
    def get_portfolio_balance(self):
        """Ph√¢n t√≠ch c√¢n b·∫±ng to√†n b·ªô portfolio"""
        try:
            all_positions = get_positions(api_key=self.bot_manager.api_key, 
                                        api_secret=self.bot_manager.api_secret)
            
            if not all_positions:
                return {"status": "empty", "recommendation": "NEUTRAL", "details": "Kh√¥ng c√≥ v·ªã th·∫ø"}
            
            # Th·ªëng k√™ chi ti·∫øt
            stats = {
                'long_count': 0,
                'short_count': 0,
                'long_value': 0.0,
                'short_value': 0.0,
                'total_value': 0.0,
                'unrealized_pnl': 0.0
            }
            
            position_details = []
            
            for pos in all_positions:
                position_amt = float(pos.get('positionAmt', 0))
                if position_amt != 0:
                    symbol = pos.get('symbol', 'UNKNOWN')
                    entry_price = float(pos.get('entryPrice', 0))
                    leverage = float(pos.get('leverage', 1))
                    unrealized_pnl = float(pos.get('unRealizedProfit', 0))
                    
                    position_value = abs(position_amt) * entry_price / leverage
                    stats['total_value'] += position_value
                    stats['unrealized_pnl'] += unrealized_pnl
                    
                    if position_amt > 0:
                        stats['long_count'] += 1
                        stats['long_value'] += position_value
                        position_details.append(f"{symbol}(LONG:${position_value:.0f})")
                    else:
                        stats['short_count'] += 1
                        stats['short_value'] += position_value
                        position_details.append(f"{symbol}(SHORT:${position_value:.0f})")
            
            # T√≠nh t·ª∑ l·ªá
            total_count = stats['long_count'] + stats['short_count']
            if total_count > 0:
                stats['long_ratio'] = stats['long_count'] / total_count
                stats['short_ratio'] = stats['short_count'] / total_count
            else:
                stats['long_ratio'] = stats['short_ratio'] = 0.5
                
            if stats['total_value'] > 0:
                stats['long_value_ratio'] = stats['long_value'] / stats['total_value']
                stats['short_value_ratio'] = stats['short_value'] / stats['total_value']
            else:
                stats['long_value_ratio'] = stats['short_value_ratio'] = 0.5
            
            # ƒê·ªÅ xu·∫•t chi·∫øn l∆∞·ª£c
            recommendation = self._generate_recommendation(stats)
            
            # L∆∞u l·ªãch s·ª≠
            self.position_history.append({
                'timestamp': time.time(),
                'stats': stats,
                'recommendation': recommendation
            })
            if len(self.position_history) > self.max_history:
                self.position_history.pop(0)
            
            return {
                "status": "analyzed",
                "recommendation": recommendation,
                "stats": stats,
                "details": position_details
            }
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói ph√¢n t√≠ch portfolio: {str(e)}")
            return {"status": "error", "recommendation": "NEUTRAL", "details": str(e)}
    
    def _generate_recommendation(self, stats):
        """T·∫°o ƒë·ªÅ xu·∫•t chi·∫øn l∆∞·ª£c th√¥ng minh"""
        # ∆Øu ti√™n ph√¢n t√≠ch theo gi√° tr·ªã h∆°n l√† s·ªë l∆∞·ª£ng
        long_value_ratio = stats.get('long_value_ratio', 0.5)
        short_value_ratio = stats.get('short_value_ratio', 0.5)
        
        if long_value_ratio >= 0.7:
            return "SELL"
        elif short_value_ratio >= 0.7:
            return "BUY"
        elif long_value_ratio >= 0.6:
            return "SELL"
        elif short_value_ratio >= 0.6:
            return "BUY"
        elif long_value_ratio > short_value_ratio + 0.15:
            return "SELL"
        elif short_value_ratio > long_value_ratio + 0.15:
            return "BUY"
        else:
            # Ng·∫´u nhi√™n c√≥ tr·ªçng s·ªë nh·∫π
            return "BUY" if random.random() > 0.5 else "SELL"
    
    def get_intelligent_direction(self):
        """L·∫•y h∆∞·ªõng giao d·ªãch th√¥ng minh"""
        analysis = self.get_portfolio_balance()
        
        if analysis["status"] == "empty":
            logger.info("‚öñÔ∏è Portfolio tr·ªëng ‚Üí Ch·ªçn h∆∞·ªõng ng·∫´u nhi√™n")
            return "BUY" if random.random() > 0.5 else "SELL"
        
        recommendation = analysis["recommendation"]
        stats = analysis["stats"]
        
        logger.info(f"‚öñÔ∏è C√ÇN B·∫∞NG: LONG {stats['long_count']}(${stats['long_value']:.0f}) "
                   f"vs SHORT {stats['short_count']}(${stats['short_value']:.0f}) "
                   f"‚Üí {recommendation}")
        
        return recommendation

# ========== API BINANCE HO√ÄN CH·ªàNH ==========
def sign(query, api_secret):
    try:
        return hmac.new(api_secret.encode(), query.encode(), hashlib.sha256).hexdigest()
    except Exception as e:
        logger.error(f"L·ªói t·∫°o ch·ªØ k√Ω: {str(e)}")
        return ""

def binance_api_request(url, method='GET', params=None, headers=None):
    max_retries = 3
    for attempt in range(max_retries):
        try:
            if method.upper() == 'GET':
                if params:
                    query = urllib.parse.urlencode(params)
                    url = f"{url}?{query}"
                req = urllib.request.Request(url, headers=headers or {})
            else:
                data = urllib.parse.urlencode(params).encode() if params else None
                req = urllib.request.Request(url, data=data, headers=headers or {}, method=method)
            
            with urllib.request.urlopen(req, timeout=15) as response:
                if response.status == 200:
                    return json.loads(response.read().decode())
                else:
                    error_content = response.read().decode()
                    logger.error(f"L·ªói API ({response.status}): {error_content}")
                    if response.status == 401:
                        return None
                    if response.status == 429:
                        time.sleep(2 ** attempt)
                    elif response.status >= 500:
                        time.sleep(1)
                    continue
        except urllib.error.HTTPError as e:
            logger.error(f"L·ªói HTTP ({e.code}): {e.reason}")
            if e.code == 401:
                return None
            if e.code == 429:
                time.sleep(2 ** attempt)
            elif e.code >= 500:
                time.sleep(1)
            continue
        except Exception as e:
            logger.error(f"L·ªói k·∫øt n·ªëi API: {str(e)}")
            time.sleep(1)
    
    logger.error(f"Kh√¥ng th·ªÉ th·ª±c hi·ªán y√™u c·∫ßu API sau {max_retries} l·∫ßn th·ª≠")
    return None

def get_all_usdt_pairs(limit=600):
    try:
        url = "https://fapi.binance.com/fapi/v1/exchangeInfo"
        data = binance_api_request(url)
        if not data:
            logger.warning("Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu t·ª´ Binance, tr·∫£ v·ªÅ danh s√°ch r·ªóng")
            return []
        
        usdt_pairs = []
        for symbol_info in data.get('symbols', []):
            symbol = symbol_info.get('symbol', '')
            if symbol.endswith('USDT') and symbol_info.get('status') == 'TRADING':
                usdt_pairs.append(symbol)
        
        logger.info(f"‚úÖ L·∫•y ƒë∆∞·ª£c {len(usdt_pairs)} coin USDT t·ª´ Binance")
        return usdt_pairs[:limit] if limit else usdt_pairs
        
    except Exception as e:
        logger.error(f"‚ùå L·ªói l·∫•y danh s√°ch coin t·ª´ Binance: {str(e)}")
        return []

def get_step_size(symbol, api_key, api_secret):
    url = "https://fapi.binance.com/fapi/v1/exchangeInfo"
    try:
        data = binance_api_request(url)
        if not data:
            return 0.001
        for s in data['symbols']:
            if s['symbol'] == symbol.upper():
                for f in s['filters']:
                    if f['filterType'] == 'LOT_SIZE':
                        return float(f['stepSize'])
    except Exception as e:
        logger.error(f"L·ªói l·∫•y step size: {str(e)}")
    return 0.001

def set_leverage(symbol, lev, api_key, api_secret):
    try:
        ts = int(time.time() * 1000)
        params = {
            "symbol": symbol.upper(),
            "leverage": lev,
            "timestamp": ts
        }
        query = urllib.parse.urlencode(params)
        sig = sign(query, api_secret)
        url = f"https://fapi.binance.com/fapi/v1/leverage?{query}&signature={sig}"
        headers = {'X-MBX-APIKEY': api_key}
        
        response = binance_api_request(url, method='POST', headers=headers)
        if response is None:
            return False
        if response and 'leverage' in response:
            return True
        return False
    except Exception as e:
        logger.error(f"L·ªói thi·∫øt l·∫≠p ƒë√≤n b·∫©y: {str(e)}")
        return False

def get_balance(api_key, api_secret):
    try:
        ts = int(time.time() * 1000)
        params = {"timestamp": ts}
        query = urllib.parse.urlencode(params)
        sig = sign(query, api_secret)
        url = f"https://fapi.binance.com/fapi/v2/account?{query}&signature={sig}"
        headers = {'X-MBX-APIKEY': api_key}
        
        data = binance_api_request(url, headers=headers)
        if not data:
            return None
        for asset in data['assets']:
            if asset['asset'] == 'USDT':
                return float(asset['availableBalance'])
        return 0
    except Exception as e:
        logger.error(f"L·ªói l·∫•y s·ªë d∆∞: {str(e)}")
        return None

def place_order(symbol, side, qty, api_key, api_secret):
    try:
        ts = int(time.time() * 1000)
        params = {
            "symbol": symbol.upper(),
            "side": side,
            "type": "MARKET",
            "quantity": qty,
            "timestamp": ts
        }
        query = urllib.parse.urlencode(params)
        sig = sign(query, api_secret)
        url = f"https://fapi.binance.com/fapi/v1/order?{query}&signature={sig}"
        headers = {'X-MBX-APIKEY': api_key}
        
        return binance_api_request(url, method='POST', headers=headers)
    except Exception as e:
        logger.error(f"L·ªói ƒë·∫∑t l·ªánh: {str(e)}")
    return None

def cancel_all_orders(symbol, api_key, api_secret):
    try:
        ts = int(time.time() * 1000)
        params = {"symbol": symbol.upper(), "timestamp": ts}
        query = urllib.parse.urlencode(params)
        sig = sign(query, api_secret)
        url = f"https://fapi.binance.com/fapi/v1/allOpenOrders?{query}&signature={sig}"
        headers = {'X-MBX-APIKEY': api_key}
        
        binance_api_request(url, method='DELETE', headers=headers)
        return True
    except Exception as e:
        logger.error(f"L·ªói h·ªßy l·ªánh: {str(e)}")
    return False

def get_current_price(symbol):
    try:
        url = f"https://fapi.binance.com/fapi/v1/ticker/price?symbol={symbol.upper()}"
        data = binance_api_request(url)
        if data and 'price' in data:
            return float(data['price'])
    except Exception as e:
        logger.error(f"L·ªói l·∫•y gi√°: {str(e)}")
    return 0

def get_positions(symbol=None, api_key=None, api_secret=None):
    try:
        ts = int(time.time() * 1000)
        params = {"timestamp": ts}
        if symbol:
            params["symbol"] = symbol.upper()
        query = urllib.parse.urlencode(params)
        sig = sign(query, api_secret)
        url = f"https://fapi.binance.com/fapi/v2/positionRisk?{query}&signature={sig}"
        headers = {'X-MBX-APIKEY': api_key}
        
        positions = binance_api_request(url, headers=headers)
        if not positions:
            return []
        if symbol:
            for pos in positions:
                if pos['symbol'] == symbol.upper():
                    return [pos]
        return positions
    except Exception as e:
        logger.error(f"L·ªói l·∫•y v·ªã th·∫ø: {str(e)}")
    return []

def get_24h_change(symbol):
    try:
        url = f"https://fapi.binance.com/fapi/v1/ticker/24hr?symbol={symbol.upper()}"
        data = binance_api_request(url)
        if data and 'priceChangePercent' in data:
            change = data['priceChangePercent']
            if change is None:
                return 0.0
            return float(change) if change is not None else 0.0
        return 0.0
    except Exception as e:
        logger.error(f"L·ªói l·∫•y bi·∫øn ƒë·ªông 24h cho {symbol}: {str(e)}")
    return 0.0

# ========== WEBSOCKET MANAGER HO√ÄN CH·ªàNH ==========
class WebSocketManager:
    def __init__(self):
        self.connections = {}
        self.executor = ThreadPoolExecutor(max_workers=20)
        self._lock = threading.Lock()
        self._stop_event = threading.Event()
        
    def add_symbol(self, symbol, callback):
        symbol = symbol.upper()
        with self._lock:
            if symbol not in self.connections:
                self._create_connection(symbol, callback)
                
    def _create_connection(self, symbol, callback):
        if self._stop_event.is_set():
            return
        stream = f"{symbol.lower()}@trade"
        url = f"wss://fstream.binance.com/ws/{stream}"
        
        def on_message(ws, message):
            try:
                data = json.loads(message)
                if 'p' in data:
                    price = float(data['p'])
                    self.executor.submit(callback, price)
            except Exception as e:
                logger.error(f"L·ªói x·ª≠ l√Ω tin nh·∫Øn WebSocket {symbol}: {str(e)}")
                
        def on_error(ws, error):
            logger.error(f"L·ªói WebSocket {symbol}: {str(error)}")
            if not self._stop_event.is_set():
                time.sleep(5)
                self._reconnect(symbol, callback)
            
        def on_close(ws, close_status_code, close_msg):
            logger.info(f"WebSocket ƒë√≥ng {symbol}: {close_status_code} - {close_msg}")
            if not self._stop_event.is_set() and symbol in self.connections:
                time.sleep(5)
                self._reconnect(symbol, callback)
                
        ws = websocket.WebSocketApp(
            url,
            on_message=on_message,
            on_error=on_error,
            on_close=on_close
        )
        
        thread = threading.Thread(target=ws.run_forever, daemon=True)
        thread.start()
        
        self.connections[symbol] = {
            'ws': ws,
            'thread': thread,
            'callback': callback
        }
        logger.info(f"WebSocket b·∫Øt ƒë·∫ßu cho {symbol}")
        
    def _reconnect(self, symbol, callback):
        logger.info(f"K·∫øt n·ªëi l·∫°i WebSocket cho {symbol}")
        self.remove_symbol(symbol)
        self._create_connection(symbol, callback)
        
    def remove_symbol(self, symbol):
        symbol = symbol.upper()
        with self._lock:
            if symbol in self.connections:
                try:
                    self.connections[symbol]['ws'].close()
                except Exception as e:
                    logger.error(f"L·ªói ƒë√≥ng WebSocket {symbol}: {str(e)}")
                del self.connections[symbol]
                logger.info(f"WebSocket ƒë√£ x√≥a cho {symbol}")
                
    def stop(self):
        self._stop_event.set()
        for symbol in list(self.connections.keys()):
            self.remove_symbol(symbol)

# ========== BOT GIAO D·ªäCH HO√ÄN H·∫¢O ==========
class PerfectTradingBot:
    def __init__(self, symbol, lev, percent, tp, sl, ws_manager, api_key, api_secret, 
                 telegram_bot_token, telegram_chat_id, config_key=None, bot_id=None):
        
        self.symbol = symbol.upper() if symbol else None
        self.lev = lev
        self.percent = percent
        self.tp = tp
        # X·ª≠ l√Ω t·∫Øt SL
        self.sl = None if sl == 0 else sl
        self.ws_manager = ws_manager
        self.api_key = api_key
        self.api_secret = api_secret
        self.telegram_bot_token = telegram_bot_token
        self.telegram_chat_id = telegram_chat_id
        self.config_key = config_key
        self.bot_id = bot_id or f"PERFECT_BOT_{int(time.time())}_{random.randint(1000, 9999)}"
        
        # Tr·∫°ng th√°i bot
        self.status = "searching"
        self.side = ""
        self.qty = 0
        self.entry = 0
        self.position_open = False
        self._stop = False
        
        # Qu·∫£n l√Ω th·ªùi gian
        self.last_trade_time = 0
        self.last_close_time = 0
        self.last_position_check = 0
        self.last_analysis_time = 0
        
        self.cooldown_period = 180
        self.position_check_interval = 20
        self.analysis_interval = 120
        
        # B·∫£o v·ªá ch·ªëng l·∫∑p
        self._close_attempted = False
        self._last_close_attempt = 0
        
        # Qu·∫£n l√Ω coin
        self.coin_manager = SmartCoinManager()
        self.coin_finder = PerfectCoinFinder(api_key, api_secret)
        self.position_balancer = None  # S·∫Ω ƒë∆∞·ª£c thi·∫øt l·∫≠p b·ªüi BotManager
        
        # T√¨m ki·∫øm coin
        self.current_target_direction = None
        self.last_find_time = 0
        self.find_interval = 30
        
        # Ph√¢n t√≠ch
        self.analyzer = PerfectTrendIndicatorSystem()
        
        # Chi·∫øm slot
        self.coin_occupied = False
        
        # Kh·ªüi ƒë·ªông
        self.check_position_status()
        if self.symbol:
            self.ws_manager.add_symbol(self.symbol, self._handle_price_update)
        
        self.thread = threading.Thread(target=self._run, daemon=True)
        self.thread.start()
        
        # Log kh·ªüi ƒë·ªông
        sl_display = "T·∫ÆT" if self.sl is None else f"{self.sl}%"
        self.log(f"üöÄ Bot ho√†n h·∫£o kh·ªüi ƒë·ªông | ƒêB: {lev}x | V·ªën: {percent}% | TP: {tp}% | SL: {sl_display}")

    def log(self, message):
        """Log th√¥ng minh - ch·ªâ log quan tr·ªçng"""
        bot_info = f"[Bot {self.bot_id}]"
        logger.info(f"{bot_info} [{self.symbol or 'NO_COIN'}] {message}")
        if self.telegram_bot_token and self.telegram_chat_id:
            symbol_info = f"<b>{self.symbol}</b>" if self.symbol else "<i>ƒêang t√¨m coin...</i>"
            send_telegram(f"{symbol_info} (Bot {self.bot_id}): {message}", 
                         bot_token=self.telegram_bot_token, 
                         default_chat_id=self.telegram_chat_id)

    def _handle_price_update(self, price):
        """X·ª≠ l√Ω c·∫≠p nh·∫≠t gi√° real-time"""
        if self._stop or not price or price <= 0:
            return
        try:
            # C√≥ th·ªÉ th√™m x·ª≠ l√Ω price action real-time ·ªü ƒë√¢y
            pass
        except Exception as e:
            self.log(f"‚ùå L·ªói x·ª≠ l√Ω gi√°: {str(e)}")

    def get_signal(self):
        """L·∫•y t√≠n hi·ªáu t·ª´ h·ªá th·ªëng ph√¢n t√≠ch ho√†n h·∫£o"""
        if not self.symbol:
            return None
            
        try:
            current_time = time.time()
            if current_time - self.last_analysis_time < self.analysis_interval:
                return None
            
            self.last_analysis_time = current_time
            
            signal, confidence = self.analyzer.analyze_symbol(self.symbol)
            
            if signal != "NEUTRAL":
                self.log(f"üéØ Nh·∫≠n t√≠n hi·ªáu {signal} (ƒê·ªô tin c·∫≠y: {confidence:.1%})")
            
            return signal
            
        except Exception as e:
            self.log(f"‚ùå L·ªói ph√¢n t√≠ch: {str(e)}")
            return None

    def get_intelligent_direction(self):
        """X√°c ƒë·ªãnh h∆∞·ªõng giao d·ªãch th√¥ng minh"""
        if self.position_balancer:
            return self.position_balancer.get_intelligent_direction()
        else:
            # Fallback c∆° b·∫£n
            all_positions = get_positions(api_key=self.api_key, api_secret=self.api_secret)
            
            buy_count = 0
            sell_count = 0
            
            for pos in all_positions:
                position_amt = float(pos.get('positionAmt', 0))
                if position_amt != 0:
                    if position_amt > 0:
                        buy_count += 1
                    else:
                        sell_count += 1
            
            total = buy_count + sell_count
            if total == 0:
                return "BUY" if random.random() > 0.5 else "SELL"
            
            if buy_count > sell_count:
                return "SELL"
            elif sell_count > buy_count:
                return "BUY"
            else:
                return "BUY" if random.random() > 0.5 else "SELL"

    def find_and_acquire_coin(self):
        """T√¨m v√† chi·∫øm coin th√¥ng minh"""
        current_time = time.time()
        if current_time - self.last_find_time < self.find_interval:
            return False
        
        self.last_find_time = current_time
        
        # Ki·ªÉm tra slot c√≤n tr·ªëng
        if not self.coin_manager.can_add_coin():
            return False
        
        # X√°c ƒë·ªãnh h∆∞·ªõng giao d·ªãch th√¥ng minh
        self.current_target_direction = self.get_intelligent_direction()
        
        # L·∫•y danh s√°ch coin ƒëang ƒë∆∞·ª£c qu·∫£n l√Ω
        managed_coins = self.coin_manager.get_managed_coins()
        excluded_symbols = set(managed_coins.keys())
        
        # T√¨m coin ho√†n h·∫£o
        coin_data = self.coin_finder.find_perfect_coin(
            self.current_target_direction, 
            self.lev,
            excluded_symbols
        )
    
        if coin_data and coin_data.get('qualified', False):
            new_symbol = coin_data['symbol']
            
            # Chi·∫øm slot
            if self.coin_manager.register_coin(new_symbol, self.bot_id, "PerfectSystem", coin_data['score']):
                # Gi·∫£i ph√≥ng coin c≈© n·∫øu c√≥
                if self.symbol and self.coin_occupied:
                    self.ws_manager.remove_symbol(self.symbol)
                    self.coin_manager.unregister_coin(self.symbol)
                
                # C·∫≠p nh·∫≠t coin m·ªõi
                self.symbol = new_symbol
                self.ws_manager.add_symbol(self.symbol, self._handle_price_update)
                self.coin_occupied = True
                
                self.log(f"üéØ ƒê√£ t√¨m th·∫•y coin ho√†n h·∫£o: {new_symbol} - {self.current_target_direction} (ƒêi·ªÉm: {coin_data['score']:.2f})")
                return True
            else:
                self.log(f"‚ùå Kh√¥ng th·ªÉ chi·∫øm slot cho {new_symbol}")
                return False
        
        return False

    def check_position_status(self):
        """Ki·ªÉm tra tr·∫°ng th√°i v·ªã th·∫ø ch√≠nh x√°c"""
        if not self.symbol:
            return
            
        try:
            positions = get_positions(self.symbol, self.api_key, self.api_secret)
            if not positions:
                self._reset_position()
                return
            
            position_found = False
            for pos in positions:
                if pos['symbol'] == self.symbol:
                    position_amt = float(pos.get('positionAmt', 0))
                    if abs(position_amt) > 0:
                        position_found = True
                        self.position_open = True
                        self.status = "open"
                        self.side = "BUY" if position_amt > 0 else "SELL"
                        self.qty = position_amt
                        self.entry = float(pos.get('entryPrice', 0))
                        break
                    else:
                        position_found = True
                        self._reset_position()
                        break
            
            if not position_found:
                self._reset_position()
                
        except Exception as e:
            self.log(f"‚ùå L·ªói ki·ªÉm tra v·ªã th·∫ø: {str(e)}")

    def _reset_position(self):
        """Reset tr·∫°ng th√°i an to√†n"""
        if self.position_open and self.symbol and self.coin_occupied:
            self.coin_manager.unregister_coin(self.symbol)
            self.ws_manager.remove_symbol(self.symbol)
            self.coin_occupied = False
            
        self.position_open = False
        self.status = "searching" if not self.symbol else "waiting"
        self.side = ""
        self.qty = 0
        self.entry = 0
        self._close_attempted = False
        self._last_close_attempt = 0

    def _run(self):
        """V√≤ng l·∫∑p ch√≠nh th√¥ng minh"""
        while not self._stop:
            try:
                current_time = time.time()
                
                # Ki·ªÉm tra v·ªã th·∫ø ƒë·ªãnh k·ª≥
                if current_time - self.last_position_check > self.position_check_interval:
                    self.check_position_status()
                    self.last_position_check = current_time
                
                if not self.position_open:
                    # T√¨m v√† chi·∫øm coin n·∫øu c·∫ßn
                    if not self.symbol or not self.coin_occupied or self.status == "searching":
                        if self.find_and_acquire_coin():
                            time.sleep(2)
                            continue
                    
                    # Ph√¢n t√≠ch v√† giao d·ªãch
                    signal = self.get_signal()
                    
                    if signal and signal != "NEUTRAL":
                        # Ki·ªÉm tra ƒëi·ªÅu ki·ªán giao d·ªãch
                        if (current_time - self.last_trade_time > 15 and
                            current_time - self.last_close_time > self.cooldown_period):
                            
                            if self.open_position(signal):
                                self.last_trade_time = current_time
                            else:
                                # Kh√¥ng m·ªü ƒë∆∞·ª£c v·ªã th·∫ø, t√¨m coin kh√°c
                                self.status = "searching"
                                if self.symbol and self.coin_occupied:
                                    self.coin_manager.unregister_coin(self.symbol)
                                    self.coin_occupied = False
                                self.symbol = None
                                time.sleep(2)
                        else:
                            time.sleep(1)
                    else:
                        # T√≠n hi·ªáu trung l·∫≠p, t√¨m coin kh√°c sau m·ªôt th·ªùi gian
                        if signal == "NEUTRAL" and current_time - self.last_find_time > 60:
                            self.status = "searching"
                            if self.symbol and self.coin_occupied:
                                self.coin_manager.unregister_coin(self.symbol)
                                self.coin_occupied = False
                            self.symbol = None
                        time.sleep(2)
                
                # Ki·ªÉm tra TP/SL
                if self.position_open and not self._close_attempted:
                    self.check_tp_sl()
                    
                time.sleep(1)
                
            except Exception as e:
                self.log(f"‚ùå L·ªói h·ªá th·ªëng: {str(e)}")
                time.sleep(5)

    def stop(self):
        """D·ª´ng bot an to√†n"""
        self._stop = True
        if self.symbol and self.coin_occupied:
            self.ws_manager.remove_symbol(self.symbol)
            self.coin_manager.unregister_coin(self.symbol)
        self.log(f"üî¥ Bot d·ª´ng")

    def open_position(self, side):
        """M·ªü v·ªã th·∫ø th√¥ng minh"""
        try:
            self.check_position_status()
            if self.position_open:
                return False
    
            if not set_leverage(self.symbol, self.lev, self.api_key, self.api_secret):
                self.log(f"‚ùå Kh√¥ng th·ªÉ ƒë·∫∑t ƒë√≤n b·∫©y {self.lev}x")
                return False
    
            balance = get_balance(self.api_key, self.api_secret)
            if balance is None or balance <= 0:
                self.log("‚ùå Kh√¥ng ƒë·ªß s·ªë d∆∞")
                return False
    
            current_price = get_current_price(self.symbol)
            if current_price <= 0:
                self.log("‚ùå L·ªói l·∫•y gi√°")
                return False
    
            step_size = get_step_size(self.symbol, self.api_key, self.api_secret)
            usd_amount = balance * (self.percent / 100)
            qty = (usd_amount * self.lev) / current_price
            
            if step_size > 0:
                qty = math.floor(qty / step_size) * step_size
                qty = round(qty, 8)
    
            if qty < step_size:
                self.log(f"‚ùå S·ªë l∆∞·ª£ng qu√° nh·ªè: {qty}")
                return False
    
            self.log(f"üìä ƒêang m·ªü l·ªánh {side} - SL: {step_size}, Qty: {qty}, Gi√°: {current_price}")
            
            result = place_order(self.symbol, side, qty, self.api_key, self.api_secret)
            if result and 'orderId' in result:
                executed_qty = float(result.get('executedQty', 0))
                avg_price = float(result.get('avgPrice', current_price))
                
                if executed_qty > 0:
                    self.entry = avg_price
                    self.side = side
                    self.qty = executed_qty if side == "BUY" else -executed_qty
                    self.position_open = True
                    self.status = "open"
                    
                    # Hi·ªÉn th·ªã SL
                    sl_display = "T·∫ÆT" if self.sl is None else f"{self.sl}%"
                    
                    message = (
                        f"‚úÖ <b>M·ªû V·ªä TH·∫æ TH√ÄNH C√îNG</b>\n"
                        f"üîó Coin: {self.symbol}\n"
                        f"üìå H∆∞·ªõng: {side}\n"
                        f"üè∑Ô∏è Gi√° v√†o: {self.entry:.4f}\n"
                        f"üìä Kh·ªëi l∆∞·ª£ng: {executed_qty:.4f}\n"
                        f"üí∞ Gi√° tr·ªã: {executed_qty * self.entry:.2f} USDT\n"
                        f"üíµ ƒê√≤n b·∫©y: {self.lev}x\n"
                        f"üéØ TP: {self.tp}% | üõ°Ô∏è SL: {sl_display}"
                    )
                    self.log(message)
                    return True
                else:
                    self.log(f"‚ùå L·ªánh kh√¥ng kh·ªõp - S·ªë l∆∞·ª£ng: {qty}")
                    return False
            else:
                error_msg = result.get('msg', 'Unknown error') if result else 'No response'
                self.log(f"‚ùå L·ªói ƒë·∫∑t l·ªánh {side}: {error_msg}")
                return False
                    
        except Exception as e:
            self.log(f"‚ùå L·ªói m·ªü l·ªánh: {str(e)}")
            return False

    def close_position(self, reason=""):
        """ƒê√≥ng v·ªã th·∫ø an to√†n"""
        try:
            self.check_position_status()
            
            if not self.position_open or abs(self.qty) <= 0:
                self.log(f"‚ö†Ô∏è Kh√¥ng c√≥ v·ªã th·∫ø ƒë·ªÉ ƒë√≥ng: {reason}")
                return False

            current_time = time.time()
            if self._close_attempted and current_time - self._last_close_attempt < 30:
                return False
            
            self._close_attempted = True
            self._last_close_attempt = current_time

            close_side = "SELL" if self.side == "BUY" else "BUY"
            close_qty = abs(self.qty)
            
            # H·ªßy t·∫•t c·∫£ l·ªánh ch·ªù
            cancel_all_orders(self.symbol, self.api_key, self.api_secret)
            time.sleep(0.5)
            
            # ƒê√≥ng l·ªánh
            result = place_order(self.symbol, close_side, close_qty, self.api_key, self.api_secret)
            if result and 'orderId' in result:
                current_price = get_current_price(self.symbol)
                pnl = 0
                if self.entry > 0:
                    if self.side == "BUY":
                        pnl = (current_price - self.entry) * abs(self.qty)
                    else:
                        pnl = (self.entry - current_price) * abs(self.qty)
                
                message = (
                    f"‚õî <b>ƒê√ìNG V·ªä TH·∫æ TH√ÄNH C√îNG</b>\n"
                    f"üîó Coin: {self.symbol}\n"
                    f"üìå L√Ω do: {reason}\n"
                    f"üè∑Ô∏è Gi√° ra: {current_price:.4f}\n"
                    f"üìä Kh·ªëi l∆∞·ª£ng: {close_qty:.4f}\n"
                    f"üí∞ PnL: {pnl:.2f} USDT"
                )
                self.log(message)
                
                # Reset tr·∫°ng th√°i
                self._reset_position()
                self.last_close_time = time.time()
                
                time.sleep(2)
                self.check_position_status()
                
                return True
            else:
                self._close_attempted = False
                self.log("‚ùå L·ªói ƒë√≥ng l·ªánh")
                return False
                
        except Exception as e:
            self._close_attempted = False
            self.log(f"‚ùå L·ªói ƒë√≥ng l·ªánh: {str(e)}")
            return False

    def check_tp_sl(self):
        """Ki·ªÉm tra Take Profit v√† Stop Loss th√¥ng minh"""
        if not self.position_open or self.entry <= 0 or self._close_attempted:
            return

        current_price = get_current_price(self.symbol)
        if current_price <= 0:
            return

        # T√≠nh ROI
        if self.side == "BUY":
            profit = (current_price - self.entry) * abs(self.qty)
        else:
            profit = (self.entry - current_price) * abs(self.qty)
            
        invested = self.entry * abs(self.qty) / self.lev
        if invested <= 0:
            return
            
        roi = (profit / invested) * 100

        # Ki·ªÉm tra TP
        if self.tp is not None and roi >= self.tp:
            self.close_position(f"‚úÖ ƒê·∫°t TP {self.tp}% (ROI: {roi:.2f}%)")
        # Ki·ªÉm tra SL (ch·ªâ khi SL ƒë∆∞·ª£c b·∫≠t)
        elif self.sl is not None and roi <= -self.sl:
            self.close_position(f"‚ùå ƒê·∫°t SL {self.sl}% (ROI: {roi:.2f}%)")

# ========== H·ªÜ TH·ªêNG QU·∫¢N L√ù HO√ÄN CH·ªàNH ==========
class BotManager:
    def __init__(self, api_key=None, api_secret=None, telegram_bot_token=None, telegram_chat_id=None):
        self.ws_manager = WebSocketManager()
        self.bots = {}
        self.running = True
        self.start_time = time.time()
        self.user_states = {}
        
        self.api_key = api_key
        self.api_secret = api_secret
        self.telegram_bot_token = telegram_bot_token
        self.telegram_chat_id = telegram_chat_id
        
        # H·ªá th·ªëng qu·∫£n l√Ω
        self.coin_manager = SmartCoinManager()
        self.position_balancer = IntelligentPositionBalancer(self)
        
        if api_key and api_secret:
            self._verify_api_connection()
            self.log("üöÄ H·ªÜ TH·ªêNG BOT HO√ÄN H·∫¢O ƒê√É KH·ªûI ƒê·ªòNG")
            self.log("üéØ K·∫øt h·ª£p 5 ch·ªâ b√°o: EMA + RSI + Volume + Market Structure + MACD")
            
            self.telegram_thread = threading.Thread(target=self._telegram_listener, daemon=True)
            self.telegram_thread.start()
            
            if self.telegram_chat_id:
                self.send_main_menu(self.telegram_chat_id)
        else:
            self.log("‚ö° BotManager kh·ªüi ƒë·ªông ·ªü ch·∫ø ƒë·ªô kh√¥ng config")

    def _verify_api_connection(self):
        """Ki·ªÉm tra k·∫øt n·ªëi API"""
        balance = get_balance(self.api_key, self.api_secret)
        if balance is None:
            self.log("‚ùå L·ªñI: Kh√¥ng th·ªÉ k·∫øt n·ªëi Binance API.")
        else:
            self.log(f"‚úÖ K·∫øt n·ªëi Binance th√†nh c√¥ng! S·ªë d∆∞: {balance:.2f} USDT")

    def log(self, message):
        """Log h·ªá th·ªëng"""
        logger.info(f"[PERFECT_SYSTEM] {message}")
        if self.telegram_bot_token and self.telegram_chat_id:
            send_telegram(f"<b>H·ªÜ TH·ªêNG HO√ÄN H·∫¢O</b>: {message}", 
                         bot_token=self.telegram_bot_token, 
                         default_chat_id=self.telegram_chat_id)

    def send_main_menu(self, chat_id):
        """G·ª≠i menu ch√≠nh"""
        welcome = (
            "ü§ñ <b>H·ªÜ TH·ªêNG BOT GIAO D·ªäCH HO√ÄN H·∫¢O</b>\n\n"
            "üéØ <b>T√çCH H·ª¢P 5 CH·ªà B√ÅO TH√îNG MINH</b>\n"
            "‚Ä¢ üìà EMA ƒêa khung (9,21,50)\n"
            "‚Ä¢ üîÑ RSI + Volume confirmation\n"  
            "‚Ä¢ üè∞ Market Structure & S/R\n"
            "‚Ä¢ üìä MACD Signal\n"
            "‚Ä¢ ‚ö° Price Action\n\n"
            "‚öñÔ∏è <b>C√ÇN B·∫∞NG V·ªä TH·∫æ TH√îNG MINH</b>\n"
            "‚Ä¢ T·ª± ƒë·ªông ph√¢n t√≠ch portfolio\n"
            "‚Ä¢ ƒê·ªÅ xu·∫•t h∆∞·ªõng giao d·ªãch t·ªëi ∆∞u\n"
            "‚Ä¢ Qu·∫£n l√Ω r·ªßi ro ƒëa t·∫ßng\n\n"
            "üî¢ <b>QU·∫¢N L√ù COIN TH√îNG MINH</b>\n"
            "‚Ä¢ Gi·ªõi h·∫°n s·ªë coin t·ªëi ƒëa\n"
            "‚Ä¢ T·ª± ƒë·ªông chuy·ªÉn coin kh√¥ng ph√π h·ª£p\n"
            "‚Ä¢ Chi·∫øm slot th√¥ng minh"
        )
        send_telegram(welcome, chat_id, create_main_menu(),
                     bot_token=self.telegram_bot_token, 
                     default_chat_id=self.telegram_chat_id)

    def start_perfect_system(self, bot_count, leverage, percent, tp, sl, max_coins):
        """Kh·ªüi ch·∫°y h·ªá th·ªëng ho√†n h·∫£o"""
        if not self.api_key or not self.api_secret:
            self.log("‚ùå Ch∆∞a thi·∫øt l·∫≠p API Key")
            return False
        
        # Ki·ªÉm tra k·∫øt n·ªëi
        test_balance = get_balance(self.api_key, self.api_secret)
        if test_balance is None:
            self.log("‚ùå L·ªñI: Kh√¥ng th·ªÉ k·∫øt n·ªëi Binance")
            return False
        
        # Thi·∫øt l·∫≠p gi·ªõi h·∫°n coin
        self.coin_manager.set_max_coins(max_coins)
        
        # X·ª≠ l√Ω SL
        actual_sl = 0 if sl == "T·∫ÆT SL" else sl
        
        created_count = 0
        
        for i in range(bot_count):
            try:
                bot_id = f"PERFECT_BOT_{i}_{int(time.time())}"
                
                if bot_id in self.bots:
                    continue
                
                bot = PerfectTradingBot(
                    symbol=None,  # Bot ƒë·ªông
                    lev=leverage,
                    percent=percent, 
                    tp=tp,
                    sl=actual_sl,
                    ws_manager=self.ws_manager,
                    api_key=self.api_key,
                    api_secret=self.api_secret,
                    telegram_bot_token=self.telegram_bot_token,
                    telegram_chat_id=self.telegram_chat_id,
                    bot_id=bot_id
                )
                
                # K·∫øt n·ªëi position balancer
                bot.position_balancer = self.position_balancer
                
                self.bots[bot_id] = bot
                created_count += 1
                
            except Exception as e:
                self.log(f"‚ùå L·ªói t·∫°o bot {i}: {str(e)}")
                continue
        
        if created_count > 0:
            sl_display = "T·∫ÆT" if actual_sl == 0 else f"{actual_sl}%"
            
            success_msg = (
                f"‚úÖ <b>H·ªÜ TH·ªêNG HO√ÄN H·∫¢O ƒê√É KH·ªûI CH·∫†Y</b>\n\n"
                f"ü§ñ S·ªë l∆∞·ª£ng bot: {created_count}\n"
                f"üí∞ ƒê√≤n b·∫©y: {leverage}x\n"
                f"üìä % S·ªë d∆∞: {percent}%\n"
                f"üéØ TP: {tp}%\n"
                f"üõ°Ô∏è SL: {sl_display}\n"
                f"üî¢ Coin t·ªëi ƒëa: {max_coins}\n\n"
                f"üéØ <b>CHI·∫æN L∆Ø·ª¢C HO√ÄN H·∫¢O</b>\n"
                f"‚Ä¢ 5 ch·ªâ b√°o t√≠ch h·ª£p th√¥ng minh\n"
                f"‚Ä¢ C√¢n b·∫±ng v·ªã th·∫ø t·ª± ƒë·ªông\n"
                f"‚Ä¢ Qu·∫£n l√Ω coin th√¥ng minh\n"
                f"‚Ä¢ T√¨m ki·∫øm coin t·ªëi ∆∞u\n"
                f"‚Ä¢ Chuy·ªÉn coin linh ho·∫°t"
            )
            
            self.log(success_msg)
            return True
        else:
            self.log("‚ùå Kh√¥ng th·ªÉ t·∫°o bot n√†o")
            return False

    def stop_bot(self, bot_id):
        """D·ª´ng bot c·ª• th·ªÉ"""
        bot = self.bots.get(bot_id)
        if bot:
            bot.stop()
            del self.bots[bot_id]
            self.log(f"‚õî ƒê√£ d·ª´ng bot {bot_id}")
            return True
        return False

    def stop_all(self):
        """D·ª´ng to√†n b·ªô h·ªá th·ªëng"""
        self.log("‚õî ƒêang d·ª´ng to√†n b·ªô h·ªá th·ªëng...")
        for bot_id in list(self.bots.keys()):
            self.stop_bot(bot_id)
        self.ws_manager.stop()
        self.running = False
        self.log("üî¥ H·ªá th·ªëng ƒë√£ d·ª´ng ho√†n to√†n")

    def get_system_summary(self):
        """L·∫•y th·ªëng k√™ h·ªá th·ªëng chi ti·∫øt"""
        try:
            # Ph√¢n t√≠ch portfolio
            portfolio_analysis = self.position_balancer.get_portfolio_balance()
            
            # Th·ªëng k√™ bot
            bot_stats = {
                'total_bots': len(self.bots),
                'searching_bots': 0,
                'trading_bots': 0,
                'open_positions': 0
            }
            
            bot_details = []
            for bot_id, bot in self.bots.items():
                if bot.status == "searching":
                    bot_stats['searching_bots'] += 1
                elif bot.status in ["waiting", "open"]:
                    bot_stats['trading_bots'] += 1
                
                if bot.position_open:
                    bot_stats['open_positions'] += 1
                
                bot_details.append(f"{bot_id} - {bot.symbol or 'T√¨m coin'} - {bot.status}")
            
            # Th·ªëng k√™ coin
            managed_coins = self.coin_manager.get_managed_coins()
            available_slots = self.coin_manager.get_available_slots()
            
            summary = (
                f"üìä <b>TH·ªêNG K√ä H·ªÜ TH·ªêNG HO√ÄN H·∫¢O</b>\n\n"
                f"ü§ñ <b>BOT</b>: {bot_stats['total_bots']} bots\n"
                f"   üîç ƒêang t√¨m coin: {bot_stats['searching_bots']}\n"
                f"   üìà ƒêang trade: {bot_stats['trading_bots']}\n"
                f"   üìä V·ªã th·∫ø m·ªü: {bot_stats['open_positions']}\n\n"
                f"üî¢ <b>QU·∫¢N L√ù COIN</b>\n"
                f"   üéØ Coin t·ªëi ƒëa: {self.coin_manager.max_coins}\n"
                f"   üîó ƒêang qu·∫£n l√Ω: {len(managed_coins)} coin\n"
                f"   üîì C√≤n tr·ªëng: {available_slots} slot\n"
            )
            
            if managed_coins:
                summary += f"\nüìã <b>Danh s√°ch coin:</b>\n"
                for symbol in list(managed_coins.keys())[:8]:
                    summary += f"‚Ä¢ {symbol}\n"
                if len(managed_coins) > 8:
                    summary += f"... v√† {len(managed_coins) - 8} coin kh√°c\n"
            
            if portfolio_analysis["status"] == "analyzed":
                stats = portfolio_analysis["stats"]
                summary += (
                    f"\nüí∞ <b>PORTFOLIO BINANCE</b>\n"
                    f"   üü¢ LONG: {stats['long_count']} (${stats['long_value']:.0f})\n"
                    f"   üî¥ SHORT: {stats['short_count']} (${stats['short_value']:.0f})\n"
                    f"   üìà T·ªïng gi√° tr·ªã: ${stats['total_value']:.0f}\n"
                    f"   üí∞ PnL: ${stats['unrealized_pnl']:.2f}\n"
                    f"   ‚öñÔ∏è ƒê·ªÅ xu·∫•t: {portfolio_analysis['recommendation']}"
                )
            
            return summary
                    
        except Exception as e:
            return f"‚ùå L·ªói th·ªëng k√™: {str(e)}"

    def _telegram_listener(self):
        """L·∫Øng nghe tin nh·∫Øn Telegram"""
        last_update_id = 0
        
        while self.running and self.telegram_bot_token:
            try:
                url = f"https://api.telegram.org/bot{self.telegram_bot_token}/getUpdates?offset={last_update_id+1}&timeout=30"
                response = requests.get(url, timeout=35)
                
                if response.status_code == 200:
                    data = response.json()
                    if data.get('ok'):
                        for update in data['result']:
                            update_id = update['update_id']
                            message = update.get('message', {})
                            chat_id = str(message.get('chat', {}).get('id'))
                            text = message.get('text', '').strip()
                            
                            if chat_id != self.telegram_chat_id:
                                continue
                            
                            if update_id > last_update_id:
                                last_update_id = update_id
                            
                            self._handle_telegram_message(chat_id, text)
                elif response.status_code == 409:
                    logger.error("L·ªói xung ƒë·ªôt Telegram")
                    time.sleep(60)
                else:
                    time.sleep(10)
                
            except Exception as e:
                logger.error(f"L·ªói Telegram listener: {str(e)}")
                time.sleep(10)

    def _handle_telegram_message(self, chat_id, text):
        """X·ª≠ l√Ω tin nh·∫Øn Telegram"""
        user_state = self.user_states.get(chat_id, {})
        current_step = user_state.get('step')
        
        if text == "üöÄ Kh·ªüi ch·∫°y h·ªá th·ªëng":
            self.user_states[chat_id] = {'step': 'waiting_bot_count'}
            
            balance = get_balance(self.api_key, self.api_secret)
            balance_info = f"\nüí∞ S·ªë d∆∞ hi·ªán c√≥: <b>{balance:.2f} USDT</b>" if balance else ""
            
            send_telegram(
                "üöÄ <b>KH·ªûI CH·∫†Y H·ªÜ TH·ªêNG HO√ÄN H·∫¢O</b>\n\n"
                f"{balance_info}\n\n"
                "Ch·ªçn s·ªë l∆∞·ª£ng bot ƒë·ªôc l·∫≠p:",
                chat_id,
                create_bot_count_keyboard(),
                self.telegram_bot_token, self.telegram_chat_id
            )
        
        elif current_step == 'waiting_bot_count':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy", chat_id, create_main_menu(),
                            self.telegram_bot_token, self.telegram_chat_id)
            else:
                try:
                    bot_count = int(text)
                    if bot_count <= 0 or bot_count > 8:
                        send_telegram("‚ö†Ô∏è S·ªë bot ph·∫£i t·ª´ 1-8. Ch·ªçn l·∫°i:",
                                    chat_id, create_bot_count_keyboard(),
                                    self.telegram_bot_token, self.telegram_chat_id)
                        return

                    user_state['bot_count'] = bot_count
                    user_state['step'] = 'waiting_leverage'
                    
                    send_telegram(
                        f"ü§ñ S·ªë bot: {bot_count}\n\n"
                        f"Ch·ªçn ƒë√≤n b·∫©y:",
                        chat_id,
                        create_leverage_keyboard(),
                        self.telegram_bot_token, self.telegram_chat_id
                    )
                except ValueError:
                    send_telegram("‚ö†Ô∏è Vui l√≤ng ch·ªçn s·ªë h·ª£p l·ªá:",
                                chat_id, create_bot_count_keyboard(),
                                self.telegram_bot_token, self.telegram_chat_id)

        elif current_step == 'waiting_leverage':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy", chat_id, create_main_menu(),
                            self.telegram_bot_token, self.telegram_chat_id)
            else:
                try:
                    lev_text = text[:-1] if text.endswith('x') else text
                    leverage = int(lev_text)
                    
                    if leverage <= 0 or leverage > 25:
                        send_telegram("‚ö†Ô∏è ƒê√≤n b·∫©y ph·∫£i t·ª´ 1-25. Ch·ªçn l·∫°i:",
                                    chat_id, create_leverage_keyboard(),
                                    self.telegram_bot_token, self.telegram_chat_id)
                        return

                    user_state['leverage'] = leverage
                    user_state['step'] = 'waiting_percent'
                    
                    send_telegram(
                        f"üí∞ ƒê√≤n b·∫©y: {leverage}x\n\n"
                        f"Ch·ªçn % s·ªë d∆∞ m·ªói l·ªánh:",
                        chat_id,
                        create_percent_keyboard(),
                        self.telegram_bot_token, self.telegram_chat_id
                    )
                except ValueError:
                    send_telegram("‚ö†Ô∏è Vui l√≤ng ch·ªçn ƒë√≤n b·∫©y h·ª£p l·ªá:",
                                chat_id, create_leverage_keyboard(),
                                self.telegram_bot_token, self.telegram_chat_id)

        elif current_step == 'waiting_percent':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy", chat_id, create_main_menu(),
                            self.telegram_bot_token, self.telegram_chat_id)
            else:
                try:
                    percent = float(text)
                    if percent <= 0 or percent > 20:
                        send_telegram("‚ö†Ô∏è % s·ªë d∆∞ ph·∫£i t·ª´ 0.1-20. Ch·ªçn l·∫°i:",
                                    chat_id, create_percent_keyboard(),
                                    self.telegram_bot_token, self.telegram_chat_id)
                        return

                    user_state['percent'] = percent
                    user_state['step'] = 'waiting_tp'
                    
                    balance = get_balance(self.api_key, self.api_secret)
                    amount_info = f"\nüíµ ~{balance * (percent/100):.2f} USDT/l·ªánh" if balance else ""
                    
                    send_telegram(
                        f"üìä % S·ªë d∆∞: {percent}%{amount_info}\n\n"
                        f"Ch·ªçn Take Profit (%):",
                        chat_id,
                        create_tp_keyboard(),
                        self.telegram_bot_token, self.telegram_chat_id
                    )
                except ValueError:
                    send_telegram("‚ö†Ô∏è Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá:",
                                chat_id, create_percent_keyboard(),
                                self.telegram_bot_token, self.telegram_chat_id)

        elif current_step == 'waiting_tp':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy", chat_id, create_main_menu(),
                            self.telegram_bot_token, self.telegram_chat_id)
            else:
                try:
                    tp = float(text)
                    if tp <= 0:
                        send_telegram("‚ö†Ô∏è Take Profit ph·∫£i > 0. Ch·ªçn l·∫°i:",
                                    chat_id, create_tp_keyboard(),
                                    self.telegram_bot_token, self.telegram_chat_id)
                        return

                    user_state['tp'] = tp
                    user_state['step'] = 'waiting_sl'
                    
                    send_telegram(
                        f"üéØ Take Profit: {tp}%\n\n"
                        f"Ch·ªçn Stop Loss (%):\n"
                        f"<i>Ch·ªçn 'T·∫ÆT SL' ƒë·ªÉ kh√¥ng d·ª´ng l·ªó</i>",
                        chat_id,
                        create_sl_keyboard(),
                        self.telegram_bot_token, self.telegram_chat_id
                    )
                except ValueError:
                    send_telegram("‚ö†Ô∏è Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá:",
                                chat_id, create_tp_keyboard(),
                                self.telegram_bot_token, self.telegram_chat_id)

        elif current_step == 'waiting_sl':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy", chat_id, create_main_menu(),
                            self.telegram_bot_token, self.telegram_chat_id)
            else:
                try:
                    if text == 'T·∫ÆT SL':
                        user_state['sl'] = "T·∫ÆT SL"
                    else:
                        sl = float(text)
                        if sl < 0:
                            send_telegram("‚ö†Ô∏è Stop Loss ph·∫£i ‚â• 0. Ch·ªçn l·∫°i:",
                                        chat_id, create_sl_keyboard(),
                                        self.telegram_bot_token, self.telegram_chat_id)
                            return
                        user_state['sl'] = sl
                    
                    user_state['step'] = 'waiting_max_coins'
                    
                    sl_display = "T·∫ÆT" if user_state['sl'] == "T·∫ÆT SL" else f"{user_state['sl']}%"
                    
                    send_telegram(
                        f"üõ°Ô∏è Stop Loss: {sl_display}\n\n"
                        f"Ch·ªçn s·ªë l∆∞·ª£ng coin t·ªëi ƒëa:",
                        chat_id,
                        create_coin_per_bot_keyboard(),
                        self.telegram_bot_token, self.telegram_chat_id
                    )
                except ValueError:
                    send_telegram("‚ö†Ô∏è Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá ho·∫∑c ch·ªçn 'T·∫ÆT SL':",
                                chat_id, create_sl_keyboard(),
                                self.telegram_bot_token, self.telegram_chat_id)

        elif current_step == 'waiting_max_coins':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy", chat_id, create_main_menu(),
                            self.telegram_bot_token, self.telegram_chat_id)
            else:
                try:
                    max_coins = int(text)
                    if max_coins <= 0 or max_coins > 10:
                        send_telegram("‚ö†Ô∏è S·ªë coin ph·∫£i t·ª´ 1-10. Ch·ªçn l·∫°i:",
                                    chat_id, create_coin_per_bot_keyboard(),
                                    self.telegram_bot_token, self.telegram_chat_id)
                        return

                    # Kh·ªüi ch·∫°y h·ªá th·ªëng
                    bot_count = user_state.get('bot_count')
                    leverage = user_state.get('leverage')
                    percent = user_state.get('percent')
                    tp = user_state.get('tp')
                    sl = user_state.get('sl')
                    
                    success = self.start_perfect_system(
                        bot_count=bot_count,
                        leverage=leverage,
                        percent=percent,
                        tp=tp,
                        sl=sl,
                        max_coins=max_coins
                    )
                    
                    if success:
                        sl_display = "T·∫ÆT" if sl == "T·∫ÆT SL" else f"{sl}%"
                        
                        success_msg = (
                            f"‚úÖ <b>H·ªÜ TH·ªêNG HO√ÄN H·∫¢O ƒê√É KH·ªûI CH·∫†Y TH√ÄNH C√îNG</b>\n\n"
                            f"ü§ñ S·ªë bot: {bot_count}\n"
                            f"üí∞ ƒê√≤n b·∫©y: {leverage}x\n"
                            f"üìä % S·ªë d∆∞: {percent}%\n"
                            f"üéØ TP: {tp}%\n"
                            f"üõ°Ô∏è SL: {sl_display}\n"
                            f"üî¢ Coin t·ªëi ƒëa: {max_coins}\n\n"
                            f"üéØ <b>CHI·∫æN L∆Ø·ª¢C ƒêANG HO·∫†T ƒê·ªòNG</b>\n"
                            f"‚Ä¢ 5 ch·ªâ b√°o th√¥ng minh\n"
                            f"‚Ä¢ C√¢n b·∫±ng v·ªã th·∫ø t·ª± ƒë·ªông\n"
                            f"‚Ä¢ Qu·∫£n l√Ω coin th√¥ng minh\n"
                            f"‚Ä¢ T√¨m ki·∫øm coin t·ªëi ∆∞u"
                        )
                        
                        send_telegram(success_msg, chat_id, create_main_menu(),
                                    self.telegram_bot_token, self.telegram_chat_id)
                    else:
                        send_telegram("‚ùå L·ªói kh·ªüi ch·∫°y h·ªá th·ªëng", chat_id, create_main_menu(),
                                    self.telegram_bot_token, self.telegram_chat_id)
                    
                    self.user_states[chat_id] = {}
                    
                except ValueError:
                    send_telegram("‚ö†Ô∏è Vui l√≤ng ch·ªçn s·ªë h·ª£p l·ªá:",
                                chat_id, create_coin_per_bot_keyboard(),
                                self.telegram_bot_token, self.telegram_chat_id)

        elif text == "üìä Danh s√°ch Bot":
            if not self.bots:
                send_telegram("ü§ñ Kh√¥ng c√≥ bot n√†o ƒëang ch·∫°y", chat_id,
                            bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
            else:
                message = "ü§ñ <b>DANH S√ÅCH BOT HO√ÄN H·∫¢O</b>\n\n"
                
                for i, (bot_id, bot) in enumerate(self.bots.items()):
                    symbol_info = bot.symbol if bot.symbol else "ƒêang t√¨m coin..."
                    status = "üü¢ ƒêang trade" if bot.position_open else "üîç ƒêang t√¨m"
                    sl_display = "T·∫ÆT" if bot.sl is None else f"{bot.sl}%"
                    
                    message += (
                        f"üîπ Bot {i+1}: {bot_id}\n"
                        f"   üìä {symbol_info} | {status}\n"
                        f"   üí∞ ƒêB: {bot.lev}x | V·ªën: {bot.percent}%\n"
                        f"   üéØ TP/SL: {bot.tp}%/{sl_display}\n\n"
                    )
                
                send_telegram(message, chat_id,
                            bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
        
        elif text == "üìä Th·ªëng k√™":
            summary = self.get_system_summary()
            send_telegram(summary, chat_id,
                         bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
        
        elif text == "‚õî D·ª´ng Bot":
            if not self.bots:
                send_telegram("ü§ñ Kh√¥ng c√≥ bot n√†o ƒëang ch·∫°y", chat_id,
                            bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
            else:
                self.stop_all()
                send_telegram("‚õî ƒê√£ d·ª´ng to√†n b·ªô h·ªá th·ªëng", chat_id, create_main_menu(),
                            self.telegram_bot_token, self.telegram_chat_id)
        
        elif text == "üí∞ S·ªë d∆∞":
            try:
                balance = get_balance(self.api_key, self.api_secret)
                if balance is None:
                    send_telegram("‚ùå L·ªói k·∫øt n·ªëi Binance", chat_id,
                                bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
                else:
                    send_telegram(f"üí∞ <b>S·ªê D∆Ø KH·∫¢ D·ª§NG</b>: {balance:.2f} USDT", chat_id,
                                bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
            except Exception as e:
                send_telegram(f"‚ö†Ô∏è L·ªói l·∫•y s·ªë d∆∞: {str(e)}", chat_id,
                            bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
        
        elif text == "üìà V·ªã th·∫ø":
            try:
                positions = get_positions(api_key=self.api_key, api_secret=self.api_secret)
                open_positions = [p for p in positions if float(p.get('positionAmt', 0)) != 0]
                
                if not open_positions:
                    send_telegram("üì≠ Kh√¥ng c√≥ v·ªã th·∫ø n√†o ƒëang m·ªü", chat_id,
                                bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
                    return
                
                message = "üìà <b>V·ªä TH·∫æ ƒêANG M·ªû TR√äN BINANCE</b>\n\n"
                for pos in open_positions[:10]:  # Gi·ªõi h·∫°n hi·ªÉn th·ªã
                    symbol = pos.get('symbol', 'UNKNOWN')
                    entry = float(pos.get('entryPrice', 0))
                    side = "LONG" if float(pos.get('positionAmt', 0)) > 0 else "SHORT"
                    pnl = float(pos.get('unRealizedProfit', 0))
                    leverage = float(pos.get('leverage', 1))
                    amount = abs(float(pos.get('positionAmt', 0)))
                    
                    message += (
                        f"üîπ {symbol} | {side}\n"
                        f"   üìä ƒê√≤n b·∫©y: {leverage}x\n"
                        f"   üè∑Ô∏è Gi√° v√†o: {entry:.4f}\n"
                        f"   ‚öñÔ∏è Kh·ªëi l∆∞·ª£ng: {amount:.4f}\n"
                        f"   üí∞ PnL: {pnl:.2f} USDT\n\n"
                    )
                
                if len(open_positions) > 10:
                    message += f"... v√† {len(open_positions) - 10} v·ªã th·∫ø kh√°c"
                
                send_telegram(message, chat_id,
                            bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
            except Exception as e:
                send_telegram(f"‚ö†Ô∏è L·ªói l·∫•y v·ªã th·∫ø: {str(e)}", chat_id,
                            bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
        
        elif text == "üéØ Chi·∫øn l∆∞·ª£c":
            strategy_info = (
                "üéØ <b>CHI·∫æN L∆Ø·ª¢C H·ªÜ TH·ªêNG HO√ÄN H·∫¢O</b>\n\n"
                
                "ü§ñ <b>H·ªÜ TH·ªêNG 5 CH·ªà B√ÅO T√çCH H·ª¢P</b>\n"
                "‚Ä¢ üìà <b>EMA ƒêa khung</b> (9,21,50) - Xu h∆∞·ªõng ch√≠nh\n"
                "‚Ä¢ üîÑ <b>RSI + Volume</b> - Qu√° mua/qu√° b√°n c√≥ x√°c nh·∫≠n\n"
                "‚Ä¢ üè∞ <b>Market Structure</b> - H·ªó tr·ª£/kh√°ng c·ª± ƒë·ªông\n"
                "‚Ä¢ üìä <b>MACD Signal</b> - ƒê·ªông l∆∞·ª£ng xu h∆∞·ªõng\n"
                "‚Ä¢ ‚ö° <b>Price Action</b> - H√†nh ƒë·ªông gi√° th·ª±c t·∫ø\n\n"
                
                "‚öñÔ∏è <b>C√ÇN B·∫∞NG V·ªä TH·∫æ TH√îNG MINH</b>\n"
                "‚Ä¢ Ph√¢n t√≠ch to√†n b·ªô portfolio Binance\n"
                "‚Ä¢ ƒê·ªÅ xu·∫•t h∆∞·ªõng d·ª±a tr√™n t·ª∑ l·ªá LONG/SHORT\n"
                "‚Ä¢ ∆Øu ti√™n c√¢n b·∫±ng theo gi√° tr·ªã h∆°n s·ªë l∆∞·ª£ng\n"
                "‚Ä¢ T·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh chi·∫øn l∆∞·ª£c\n\n"
                
                "üî¢ <b>QU·∫¢N L√ù COIN TH√îNG MINH</b>\n"
                "‚Ä¢ Gi·ªõi h·∫°n s·ªë coin t·ªëi ƒëa ƒë·ªÉ ƒëa d·∫°ng h√≥a\n"
                "‚Ä¢ T·ª± ƒë·ªông chuy·ªÉn coin khi t√≠n hi·ªáu kh√¥ng ph√π h·ª£p\n"
                "‚Ä¢ Chi·∫øm slot ngay khi t√¨m ƒë∆∞·ª£c coin t·ªët\n"
                "‚Ä¢ ƒê√°nh gi√° coin theo ƒëi·ªÉm s·ªë ƒëa ti√™u ch√≠\n\n"
                
                "üöÄ <b>∆ØU ƒêI·ªÇM V∆Ø·ª¢T TR·ªòI</b>\n"
                "‚Ä¢ ƒê·ªô ch√≠nh x√°c cao v·ªõi 5 ch·ªâ b√°o ƒë·ªôc l·∫≠p\n"
                "‚Ä¢ Qu·∫£n l√Ω r·ªßi ro ƒëa t·∫ßng th√¥ng minh\n"
                "‚Ä¢ Th√≠ch ·ª©ng nhanh v·ªõi th·ªã tr∆∞·ªùng\n"
                "‚Ä¢ T·ªëi ∆∞u h√≥a hi·ªáu su·∫•t portfolio"
            )
            send_telegram(strategy_info, chat_id,
                        bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
        
        elif text == "‚öôÔ∏è C·∫•u h√¨nh":
            balance = get_balance(self.api_key, self.api_secret)
            api_status = "‚úÖ ƒê√£ k·∫øt n·ªëi" if balance is not None else "‚ùå L·ªói k·∫øt n·ªëi"
            
            config_info = (
                "‚öôÔ∏è <b>C·∫§U H√åNH H·ªÜ TH·ªêNG HO√ÄN H·∫¢O</b>\n\n"
                f"üîë Binance API: {api_status}\n"
                f"ü§ñ S·ªë bot ƒëang ch·∫°y: {len(self.bots)}\n"
                f"üî¢ Coin t·ªëi ƒëa: {self.coin_manager.max_coins}\n"
                f"üîó ƒêang qu·∫£n l√Ω: {len(self.coin_manager.get_managed_coins())} coin\n"
                f"üåê WebSocket: {len(self.ws_manager.connections)} k·∫øt n·ªëi\n"
                f"‚öñÔ∏è Position Balancer: ƒê√£ s·∫µn s√†ng\n\n"
                f"üéØ <b>H·ªÜ TH·ªêNG ƒêANG HO·∫†T ƒê·ªòNG ·ªîN ƒê·ªäNH</b>"
            )
            send_telegram(config_info, chat_id,
                        bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
        
        elif text:
            self.send_main_menu(chat_id)

# ========== KH·ªûI T·∫†O H·ªÜ TH·ªêNG TO√ÄN C·∫¶U ==========
perfect_system = None

def initialize_perfect_system(api_key, api_secret, telegram_bot_token, telegram_chat_id):
    """Kh·ªüi t·∫°o h·ªá th·ªëng ho√†n h·∫£o to√†n c·ª•c"""
    global perfect_system
    perfect_system = PerfectBotManager(api_key, api_secret, telegram_bot_token, telegram_chat_id)
    return perfect_system
