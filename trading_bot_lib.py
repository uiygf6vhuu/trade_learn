# trading_bot_lib.py - H·ªÜ TH·ªêNG HO√ÄN CH·ªàNH V·ªöI T√çNH NƒÇNG T·∫ÆT SL V√Ä CHUY·ªÇN COIN LINH HO·∫†T
import json
import hmac
import hashlib
import time
import threading
import urllib.request
import urllib.parse
import numpy as np
import websocket
import logging
import requests
import os
import math
import traceback
import random
from datetime import datetime
from concurrent.futures import ThreadPoolExecutor

# ========== C·∫§U H√åNH LOGGING ƒê∆†N GI·∫¢N ==========
def setup_logging():
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(message)s',
        handlers=[
            logging.StreamHandler(),
            logging.FileHandler('bot_trading.log')
        ]
    )
    return logging.getLogger()

logger = setup_logging()

# ========== H√ÄM TELEGRAM ==========
def send_telegram(message, chat_id=None, reply_markup=None, bot_token=None, default_chat_id=None):
    if not bot_token:
        return
    
    chat_id = chat_id or default_chat_id
    if not chat_id:
        return
    
    url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": message,
        "parse_mode": "HTML"
    }
    
    if reply_markup:
        payload["reply_markup"] = json.dumps(reply_markup)
    
    try:
        response = requests.post(url, json=payload, timeout=15)
    except Exception:
        pass

# ========== MENU TELEGRAM ƒê·∫¶Y ƒê·ª¶ ==========
def create_main_menu():
    return {
        "keyboard": [
            [{"text": "üìä Danh s√°ch Bot"}, {"text": "üìä Th·ªëng k√™"}],
            [{"text": "‚ûï Th√™m Bot"}, {"text": "‚õî D·ª´ng Bot"}],
            [{"text": "üí∞ S·ªë d∆∞"}, {"text": "üìà V·ªã th·∫ø"}],
            [{"text": "‚öôÔ∏è C·∫•u h√¨nh"}, {"text": "üéØ Chi·∫øn l∆∞·ª£c"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": False
    }

def create_cancel_keyboard():
    return {
        "keyboard": [[{"text": "‚ùå H·ªßy b·ªè"}]],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_strategy_keyboard():
    return {
        "keyboard": [
            [{"text": "‚è∞ Multi-Timeframe"}],
            [{"text": "‚ùå H·ªßy b·ªè"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_bot_mode_keyboard():
    return {
        "keyboard": [
            [{"text": "ü§ñ Bot Tƒ©nh - Coin c·ª• th·ªÉ"}, {"text": "üîÑ Bot ƒê·ªông - T·ª± t√¨m coin"}],
            [{"text": "‚ùå H·ªßy b·ªè"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_exit_strategy_keyboard():
    return {
        "keyboard": [
            [{"text": "üéØ Ch·ªâ TP/SL c·ªë ƒë·ªãnh"}],
            [{"text": "‚ùå H·ªßy b·ªè"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_symbols_keyboard(strategy=None):
    try:
        symbols = get_all_usdt_pairs(limit=12)
        if not symbols:
            symbols = ["BTCUSDT", "ETHUSDT", "BNBUSDT", "ADAUSDT", "DOGEUSDT", "XRPUSDT", "DOTUSDT", "LINKUSDT"]
    except:
        symbols = ["BTCUSDT", "ETHUSDT", "BNBUSDT", "ADAUSDT", "DOGEUSDT", "XRPUSDT", "DOTUSDT", "LINKUSDT"]
    
    keyboard = []
    row = []
    for symbol in symbols:
        row.append({"text": symbol})
        if len(row) == 3:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    keyboard.append([{"text": "‚ùå H·ªßy b·ªè"}])
    
    return {
        "keyboard": keyboard,
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_leverage_keyboard(strategy=None):
    leverages = ["3", "5", "10", "15", "20", "25", "50", "75", "100"]
    
    keyboard = []
    row = []
    for lev in leverages:
        row.append({"text": f"{lev}x"})
        if len(row) == 3:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    keyboard.append([{"text": "‚ùå H·ªßy b·ªè"}])
    
    return {
        "keyboard": keyboard,
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_percent_keyboard():
    return {
        "keyboard": [
            [{"text": "1"}, {"text": "3"}, {"text": "5"}, {"text": "10"}],
            [{"text": "15"}, {"text": "20"}, {"text": "25"}, {"text": "50"}],
            [{"text": "‚ùå H·ªßy b·ªè"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_tp_keyboard():
    return {
        "keyboard": [
            [{"text": "50"}, {"text": "100"}, {"text": "200"}],
            [{"text": "300"}, {"text": "500"}, {"text": "1000"}],
            [{"text": "‚ùå H·ªßy b·ªè"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_sl_keyboard():
    return {
        "keyboard": [
            [{"text": "T·∫ÆT SL"}, {"text": "50"}, {"text": "100"}],
            [{"text": "150"}, {"text": "200"}, {"text": "500"}],
            [{"text": "‚ùå H·ªßy b·ªè"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_bot_count_keyboard():
    return {
        "keyboard": [
            [{"text": "1"}, {"text": "2"}, {"text": "3"}],
            [{"text": "5"}, {"text": "10"}],
            [{"text": "‚ùå H·ªßy b·ªè"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_coin_count_keyboard():
    return {
        "keyboard": [
            [{"text": "3"}, {"text": "5"}, {"text": "8"}],
            [{"text": "10"}, {"text": "15"}],
            [{"text": "‚ùå H·ªßy b·ªè"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

# ========== POSITION BALANCER ==========
class PositionBalancer:
    """C√ÇN B·∫∞NG V·ªä TH·∫æ T·ª∞ ƒê·ªòNG D·ª∞A TR√äN T·ª∂ L·ªÜ BUY/SELL"""
    
    def __init__(self, bot_manager):
        self.bot_manager = bot_manager
        self.buy_sell_history = []
        self.max_history = 50
        self.imbalance_threshold = 2
        
    def get_current_ratio(self):
        """L·∫•y t·ª∑ l·ªá BUY/SELL hi·ªán t·∫°i"""
        try:
            buy_count = 0
            sell_count = 0
            
            for bot_id, bot in self.bot_manager.bots.items():
                if bot.position_open:
                    if bot.side == "BUY":
                        buy_count += 1
                    elif bot.side == "SELL":
                        sell_count += 1
            
            total = buy_count + sell_count
            if total == 0:
                return 0.5, 0.5
                
            buy_ratio = buy_count / total
            sell_ratio = sell_count / total
            
            self.buy_sell_history.append((buy_count, sell_count))
            if len(self.buy_sell_history) > self.max_history:
                self.buy_sell_history.pop(0)
                
            return buy_ratio, sell_ratio
            
        except Exception as e:
            return 0.5, 0.5
    
    def get_recommended_direction(self):
        """ƒê·ªÅ xu·∫•t h∆∞·ªõng giao d·ªãch d·ª±a tr√™n c√¢n b·∫±ng v·ªã th·∫ø"""
        try:
            buy_ratio, sell_ratio = self.get_current_ratio()
            
            if len(self.buy_sell_history) >= 10:
                recent_buys = sum([item[0] for item in self.buy_sell_history[-5:]])
                recent_sells = sum([item[1] for item in self.buy_sell_history[-5:]])
                
                if recent_buys - recent_sells >= self.imbalance_threshold:
                    recommendation = "SELL"
                elif recent_sells - recent_buys >= self.imbalance_threshold:
                    recommendation = "BUY" 
                else:
                    recommendation = "NEUTRAL"
            else:
                recommendation = "NEUTRAL"
            
            return recommendation
            
        except Exception as e:
            return "NEUTRAL"

# ========== MULTI TIMEFRAME ANALYZER HO√ÄN CH·ªàNH ==========
class MultiTimeframeAnalyzer:
    """PH√ÇN T√çCH ƒêA KHUNG TH·ªúI GIAN - ƒê·∫¶Y ƒê·ª¶ CH·ª®C NƒÇNG"""
    
    def __init__(self):
        self.timeframes = ['1m', '5m', '15m', '30m']
        self.lookback = 200
        
    def analyze_symbol(self, symbol):
        """Ph√¢n t√≠ch symbol tr√™n 4 khung th·ªùi gian"""
        try:
            timeframe_signals = {}
            
            for tf in self.timeframes:
                signal, stats = self.analyze_timeframe(symbol, tf)
                timeframe_signals[tf] = {
                    'signal': signal,
                    'stats': stats,
                    'bullish_ratio': stats['bullish_ratio'] if stats else 0.5
                }
            
            # T·ªïng h·ª£p t√≠n hi·ªáu
            final_signal = self.aggregate_signals(timeframe_signals)
            return final_signal, timeframe_signals
            
        except Exception as e:
            return "NEUTRAL", {}
    
    def analyze_timeframe(self, symbol, timeframe):
        """Ph√¢n t√≠ch 1 khung th·ªùi gian chi ti·∫øt"""
        try:
            klines = self.get_klines(symbol, timeframe, self.lookback)
            if not klines or len(klines) < 50:
                return "NEUTRAL", {}
            
            bullish_count = 0
            bearish_count = 0
            price_changes = []
            
            for i in range(1, min(len(klines), self.lookback)):
                open_price = float(klines[i][1])
                close_price = float(klines[i][4])
                
                if close_price > open_price:
                    bullish_count += 1
                elif close_price < open_price:
                    bearish_count += 1
                
                price_change = ((close_price - open_price) / open_price) * 100
                price_changes.append(price_change)
            
            total_candles = bullish_count + bearish_count
            if total_candles == 0:
                return "NEUTRAL", {}
            
            bullish_ratio = bullish_count / total_candles
            bearish_ratio = bearish_count / total_candles
            
            signal = "NEUTRAL"
            if bullish_ratio > 0.55:
                signal = "SELL"
            elif bearish_ratio > 0.55:
                signal = "BUY"
            
            stats = {
                'bullish_count': bullish_count,
                'bearish_count': bearish_count,
                'total_candles': total_candles,
                'bullish_ratio': bullish_ratio,
                'bearish_ratio': bearish_ratio,
                'avg_change': np.mean(price_changes) if price_changes else 0
            }
            
            return signal, stats
            
        except Exception as e:
            return "NEUTRAL", {}
    
    def aggregate_signals(self, timeframe_signals):
        """T·ªïng h·ª£p t√≠n hi·ªáu t·ª´ c√°c khung th·ªùi gian"""
        signals = []
        
        for tf, data in timeframe_signals.items():
            signals.append(data['signal'])
        
        buy_signals = signals.count("BUY")
        sell_signals = signals.count("SELL")
        
        if buy_signals >= 3:
            return "BUY"
        elif sell_signals >= 3:
            return "SELL"
        elif buy_signals >= 2 and (buy_signals + sell_signals) == 2:
            return "BUY"
        elif sell_signals >= 2 and (buy_signals + sell_signals) == 2:
            return "SELL"
        else:
            return "NEUTRAL"
    
    def get_klines(self, symbol, interval, limit):
        """L·∫•y d·ªØ li·ªáu n·∫øn t·ª´ Binance"""
        try:
            url = "https://fapi.binance.com/fapi/v1/klines"
            params = {
                'symbol': symbol.upper(),
                'interval': interval,
                'limit': limit
            }
            return binance_api_request(url, params=params)
        except Exception as e:
            return None

# ========== COIN MANAGER M·ªöI ==========
class CoinManager:
    """QU·∫¢N L√ù DANH S√ÅCH COIN ƒêANG GIAO D·ªäCH"""
    
    _instance = None
    _lock = threading.Lock()
    
    def __new__(cls):
        with cls._lock:
            if cls._instance is None:
                cls._instance = super(CoinManager, cls).__new__(cls)
                cls._instance.trading_coins = set()  # DANH S√ÅCH COIN ƒêANG GIAO D·ªäCH
                cls._instance.max_coins = 0  # S·ªê L∆Ø·ª¢NG COIN T·ªêI ƒêA
        return cls._instance
    
    def set_max_coins(self, max_coins):
        """Thi·∫øt l·∫≠p s·ªë l∆∞·ª£ng coin t·ªëi ƒëa"""
        with self._lock:
            self.max_coins = max_coins
    
    def can_add_coin(self):
        """Ki·ªÉm tra c√≥ th·ªÉ th√™m coin m·ªõi kh√¥ng"""
        with self._lock:
            return len(self.trading_coins) < self.max_coins
    
    def add_coin(self, symbol):
        """Th√™m coin v√†o danh s√°ch ƒëang giao d·ªãch"""
        with self._lock:
            if len(self.trading_coins) < self.max_coins:
                self.trading_coins.add(symbol)
                return True
            return False
    
    def remove_coin(self, symbol):
        """X√≥a coin kh·ªèi danh s√°ch ƒëang giao d·ªãch"""
        with self._lock:
            if symbol in self.trading_coins:
                self.trading_coins.remove(symbol)
                return True
            return False
    
    def get_trading_coins(self):
        """L·∫•y danh s√°ch coin ƒëang giao d·ªãch"""
        with self._lock:
            return self.trading_coins.copy()
    
    def get_available_slots(self):
        """L·∫•y s·ªë slot c√≤n tr·ªëng"""
        with self._lock:
            return max(0, self.max_coins - len(self.trading_coins))

# ========== SMART COIN FINDER N√ÇNG C·∫§P ==========
class SmartCoinFinder:
    """T√åM COIN TH√îNG MINH V·ªöI T√çNH ƒêI·ªÇM CH·∫§T L∆Ø·ª¢NG"""
    
    def __init__(self, api_key, api_secret, required_leverage):
        self.api_key = api_key
        self.api_secret = api_secret
        self.required_leverage = required_leverage
        self.analyzer = MultiTimeframeAnalyzer()
        self.leverage_cache = {}
        self.coin_manager = CoinManager()  # üéØ TH√äM D√íNG N√ÄY ƒê·ªÇ FIX L·ªñI
        
    def check_leverage_support(self, symbol):
        """KI·ªÇM TRA COIN C√ì H·ªñ TR·ª¢ ƒê√íN B·∫®Y Y√äU C·∫¶U KH√îNG"""
        try:
            if symbol in self.leverage_cache:
                return self.leverage_cache[symbol]
                
            max_leverage = self.get_max_leverage(symbol)
            if max_leverage and max_leverage >= self.required_leverage:
                self.leverage_cache[symbol] = True
                return True
            else:
                self.leverage_cache[symbol] = False
                return False
                
        except Exception as e:
            return False
    
    def get_max_leverage(self, symbol):
        """L·∫§Y TH√îNG TIN ƒê√íN B·∫®Y T·ªêI ƒêA C·ª¶A COIN"""
        try:
            ts = int(time.time() * 1000)
            params = {"timestamp": ts}
            query = urllib.parse.urlencode(params)
            sig = sign(query, self.api_secret)
            url = f"https://fapi.binance.com/fapi/v1/leverageBracket?{query}&signature={sig}"
            headers = {'X-MBX-APIKEY': self.api_key}
            
            data = binance_api_request(url, headers=headers)
            if not data:
                return None
                
            for bracket in data:
                if bracket['symbol'] == symbol:
                    max_leverage = bracket['brackets'][0]['initialLeverage']
                    return max_leverage
                    
            return None
            
        except Exception as e:
            return None

    def find_best_coin(self, target_direction, excluded_symbols=None):
        """T√åM COIN T·ªêT NH·∫§T V·ªöI KI·ªÇM TRA ƒê√íN B·∫®Y V√Ä SLOT"""
        try:
            if excluded_symbols is None:
                excluded_symbols = set()
            
            # L·∫•y danh s√°ch coin USDT
            all_symbols = get_all_usdt_pairs(limit=300)
            if not all_symbols:
                return None
            
            # X√°o tr·ªôn v√† t√¨m coin t·ªët nh·∫•t
            random.shuffle(all_symbols)
            best_coin = None
            best_score = 0
            
            for symbol in all_symbols:
                try:
                    # Skip c√°c symbol b·ªã exclude
                    if symbol in ['BTCUSDT', 'ETHUSDT', 'BNBUSDT'] or symbol in excluded_symbols:
                        continue
                    
                    # Ki·ªÉm tra ƒë√≤n b·∫©y
                    if not self.check_leverage_support(symbol):
                        continue
                    
                    # üéØ KI·ªÇM TRA C√íN SLOT TR·ªêNG KH√îNG - TH√äM ƒêI·ªÄU KI·ªÜN N√ÄY
                    if not self.coin_manager.can_add_coin():
                        return None  # Kh√¥ng c√≤n slot th√¨ d·ª´ng t√¨m
                    
                    # Ph√¢n t√≠ch coin
                    result = self.analyze_symbol_for_finding(symbol, target_direction)
                    if result and result.get('qualified', False):
                        score = result['score']
                        if score > best_score:
                            best_score = score
                            best_coin = result
                            
                except Exception:
                    continue
            
            return best_coin
            
        except Exception:
            return None
    
    def analyze_symbol_for_finding(self, symbol, target_direction):
        """Ph√¢n t√≠ch chi ti·∫øt m·ªôt symbol"""
        try:
            # Ph√¢n t√≠ch ƒëa khung th·ªùi gian
            signal, timeframe_data = self.analyzer.analyze_symbol(symbol)
            
            if signal != target_direction:
                return None
            
            # T√≠nh ƒëi·ªÉm ch·∫•t l∆∞·ª£ng
            score = self.calculate_quality_score(timeframe_data, target_direction)
            
            if score >= 0.3:
                return {
                    'symbol': symbol,
                    'direction': target_direction,
                    'score': score,
                    'timeframe_data': timeframe_data,
                    'qualified': True
                }
            
            return None
            
        except Exception:
            return None
        
    def calculate_quality_score(self, timeframe_data, target_direction):
        """T√≠nh ƒëi·ªÉm ch·∫•t l∆∞·ª£ng chi ti·∫øt"""
        try:
            total_score = 0
            max_score = 0
            
            for tf, data in timeframe_data.items():
                stats = data.get('stats', {})
                if not stats:
                    continue
                    
                bullish_ratio = stats.get('bullish_ratio', 0.5)
                total_candles = stats.get('total_candles', 0)
                avg_change = abs(stats.get('avg_change', 0))
                
                # ƒêi·ªÉm cho ƒë·ªô r√µ r√†ng c·ªßa t√≠n hi·ªáu
                if target_direction == "SELL":
                    clarity_score = max(0, (bullish_ratio - 0.52)) * 3
                else:  # BUY
                    clarity_score = max(0, ((1 - bullish_ratio) - 0.52)) * 3
                
                # ƒêi·ªÉm cho s·ªë l∆∞·ª£ng n·∫øn (ƒë·ªô tin c·∫≠y)
                volume_score = min(total_candles / 100, 1.0)
                
                # ƒêi·ªÉm cho bi·∫øn ƒë·ªông gi√°
                volatility_score = min(avg_change / 0.3, 1.0)
                
                # T·ªïng ƒëi·ªÉm cho khung th·ªùi gian n√†y
                tf_score = (clarity_score * 0.6 + volume_score * 0.2 + volatility_score * 0.2)
                total_score += tf_score
                max_score += 1.0
            
            final_score = total_score / max_score if max_score > 0 else 0
            return final_score
            
        except Exception:
            return 0

# ========== API BINANCE (GI·ªÆ NGUY√äN) ==========
def sign(query, api_secret):
    try:
        return hmac.new(api_secret.encode(), query.encode(), hashlib.sha256).hexdigest()
    except Exception:
        return ""

def binance_api_request(url, method='GET', params=None, headers=None):
    max_retries = 3
    for attempt in range(max_retries):
        try:
            if method.upper() == 'GET':
                if params:
                    query = urllib.parse.urlencode(params)
                    url = f"{url}?{query}"
                req = urllib.request.Request(url, headers=headers or {})
            else:
                data = urllib.parse.urlencode(params).encode() if params else None
                req = urllib.request.Request(url, data=data, headers=headers or {}, method=method)
            
            with urllib.request.urlopen(req, timeout=15) as response:
                if response.status == 200:
                    return json.loads(response.read().decode())
                else:
                    if response.status == 429:
                        time.sleep(2 ** attempt)
                    elif response.status >= 500:
                        time.sleep(1)
                    continue
        except Exception:
            time.sleep(1)
            continue
    
    return None

def get_all_usdt_pairs(limit=600):
    try:
        url = "https://fapi.binance.com/fapi/v1/exchangeInfo"
        data = binance_api_request(url)
        if not data:
            return []
        
        usdt_pairs = []
        for symbol_info in data.get('symbols', []):
            symbol = symbol_info.get('symbol', '')
            if symbol.endswith('USDT') and symbol_info.get('status') == 'TRADING':
                usdt_pairs.append(symbol)
        
        return usdt_pairs[:limit] if limit else usdt_pairs
        
    except Exception:
        return []

def get_step_size(symbol, api_key, api_secret):
    try:
        url = "https://fapi.binance.com/fapi/v1/exchangeInfo"
        data = binance_api_request(url)
        if not data:
            return 0.001
        for s in data['symbols']:
            if s['symbol'] == symbol.upper():
                for f in s['filters']:
                    if f['filterType'] == 'LOT_SIZE':
                        return float(f['stepSize'])
    except Exception:
        return 0.001

def set_leverage(symbol, lev, api_key, api_secret):
    try:
        ts = int(time.time() * 1000)
        params = {
            "symbol": symbol.upper(),
            "leverage": lev,
            "timestamp": ts
        }
        query = urllib.parse.urlencode(params)
        sig = sign(query, api_secret)
        url = f"https://fapi.binance.com/fapi/v1/leverage?{query}&signature={sig}"
        headers = {'X-MBX-APIKEY': api_key}
        
        response = binance_api_request(url, method='POST', headers=headers)
        return response is not None
    except Exception:
        return False

def get_balance(api_key, api_secret):
    try:
        ts = int(time.time() * 1000)
        params = {"timestamp": ts}
        query = urllib.parse.urlencode(params)
        sig = sign(query, api_secret)
        url = f"https://fapi.binance.com/fapi/v2/account?{query}&signature={sig}"
        headers = {'X-MBX-APIKEY': api_key}
        
        data = binance_api_request(url, headers=headers)
        if not data:
            return None
        for asset in data['assets']:
            if asset['asset'] == 'USDT':
                return float(asset['availableBalance'])
        return 0
    except Exception:
        return None

def place_order(symbol, side, qty, api_key, api_secret):
    try:
        ts = int(time.time() * 1000)
        params = {
            "symbol": symbol.upper(),
            "side": side,
            "type": "MARKET",
            "quantity": qty,
            "timestamp": ts
        }
        query = urllib.parse.urlencode(params)
        sig = sign(query, api_secret)
        url = f"https://fapi.binance.com/fapi/v1/order?{query}&signature={sig}"
        headers = {'X-MBX-APIKEY': api_key}
        
        return binance_api_request(url, method='POST', headers=headers)
    except Exception:
        return None

def cancel_all_orders(symbol, api_key, api_secret):
    try:
        ts = int(time.time() * 1000)
        params = {"symbol": symbol.upper(), "timestamp": ts}
        query = urllib.parse.urlencode(params)
        sig = sign(query, api_secret)
        url = f"https://fapi.binance.com/fapi/v1/allOpenOrders?{query}&signature={sig}"
        headers = {'X-MBX-APIKEY': api_key}
        
        binance_api_request(url, method='DELETE', headers=headers)
        return True
    except Exception:
        return False

def get_current_price(symbol):
    try:
        url = f"https://fapi.binance.com/fapi/v1/ticker/price?symbol={symbol.upper()}"
        data = binance_api_request(url)
        if data and 'price' in data:
            return float(data['price'])
    except Exception:
        return 0

def get_positions(symbol=None, api_key=None, api_secret=None):
    try:
        ts = int(time.time() * 1000)
        params = {"timestamp": ts}
        if symbol:
            params["symbol"] = symbol.upper()
        query = urllib.parse.urlencode(params)
        sig = sign(query, api_secret)
        url = f"https://fapi.binance.com/fapi/v2/positionRisk?{query}&signature={sig}"
        headers = {'X-MBX-APIKEY': api_key}
        
        positions = binance_api_request(url, headers=headers)
        if not positions:
            return []
        if symbol:
            for pos in positions:
                if pos['symbol'] == symbol.upper():
                    return [pos]
        return positions
    except Exception:
        return []

def get_24h_change(symbol):
    try:
        url = f"https://fapi.binance.com/fapi/v1/ticker/24hr?symbol={symbol.upper()}"
        data = binance_api_request(url)
        if data and 'priceChangePercent' in data:
            change = data['priceChangePercent']
            return float(change) if change is not None else 0.0
        return 0.0
    except Exception:
        return 0.0

# ========== WEBSOCKET MANAGER ==========
class WebSocketManager:
    def __init__(self):
        self.connections = {}
        self.executor = ThreadPoolExecutor(max_workers=10)
        self._lock = threading.Lock()
        self._stop_event = threading.Event()
        
    def add_symbol(self, symbol, callback):
        symbol = symbol.upper()
        with self._lock:
            if symbol not in self.connections:
                self._create_connection(symbol, callback)
                
    def _create_connection(self, symbol, callback):
        if self._stop_event.is_set():
            return
        stream = f"{symbol.lower()}@trade"
        url = f"wss://fstream.binance.com/ws/{stream}"
        
        def on_message(ws, message):
            try:
                data = json.loads(message)
                if 'p' in data:
                    price = float(data['p'])
                    self.executor.submit(callback, price)
            except Exception:
                pass
                
        def on_error(ws, error):
            if not self._stop_event.is_set():
                time.sleep(5)
                self._reconnect(symbol, callback)
            
        def on_close(ws, close_status_code, close_msg):
            if not self._stop_event.is_set() and symbol in self.connections:
                time.sleep(5)
                self._reconnect(symbol, callback)
                
        ws = websocket.WebSocketApp(
            url,
            on_message=on_message,
            on_error=on_error,
            on_close=on_close
        )
        
        thread = threading.Thread(target=ws.run_forever, daemon=True)
        thread.start()
        
        self.connections[symbol] = {
            'ws': ws,
            'thread': thread,
            'callback': callback
        }
        
    def _reconnect(self, symbol, callback):
        self.remove_symbol(symbol)
        self._create_connection(symbol, callback)
        
    def remove_symbol(self, symbol):
        symbol = symbol.upper()
        with self._lock:
            if symbol in self.connections:
                try:
                    self.connections[symbol]['ws'].close()
                except Exception:
                    pass
                del self.connections[symbol]
                
    def stop(self):
        self._stop_event.set()
        for symbol in list(self.connections.keys()):
            self.remove_symbol(symbol)

# ========== BASE BOT N√ÇNG C·∫§P ==========
class BaseBot:
    def __init__(self, symbol, lev, percent, tp, sl, ws_manager, api_key, api_secret, 
                 telegram_bot_token, telegram_chat_id, strategy_name, config_key=None, bot_id=None):
        
        self.symbol = symbol.upper() if symbol else None
        self.lev = lev
        self.percent = percent
        self.tp = tp
        # üéØ QUAN TR·ªåNG: X·ª≠ l√Ω SL = 0 th√†nh t·∫Øt SL
        self.sl = None if sl == 0 else sl
        self.ws_manager = ws_manager
        self.api_key = api_key
        self.api_secret = api_secret
        self.telegram_bot_token = telegram_bot_token
        self.telegram_chat_id = telegram_chat_id
        self.strategy_name = strategy_name
        self.config_key = config_key
        self.bot_id = bot_id or f"{strategy_name}_{int(time.time())}_{random.randint(1000, 9999)}"
        
        # Tr·∫°ng th√°i bot
        self.status = "searching"
        self.side = ""
        self.qty = 0
        self.entry = 0
        self.position_open = False
        self._stop = False
        
        # Bi·∫øn th·ªùi gian
        self.last_trade_time = 0
        self.last_close_time = 0
        self.last_position_check = 0
        
        self.cooldown_period = 300
        self.position_check_interval = 30
        
        # B·∫£o v·ªá ch·ªëng l·∫∑p ƒë√≥ng l·ªánh
        self._close_attempted = False
        self._last_close_attempt = 0
        
        # Qu·∫£n l√Ω coin
        self.coin_manager = CoinManager()
        self.coin_finder = SmartCoinFinder(api_key, api_secret, lev)
        
        # T√¨m coin
        self.current_target_direction = None
        self.last_find_time = 0
        self.find_interval = 5
        
        # üéØ TH√äM BI·∫æN QUAN TR·ªåNG: Chi·∫øm slot ngay khi t√¨m ƒë∆∞·ª£c coin
        self.coin_occupied = False
        
        self.check_position_status()
        if self.symbol:
            self.ws_manager.add_symbol(self.symbol, self._handle_price_update)
        
        self.thread = threading.Thread(target=self._run, daemon=True)
        self.thread.start()
        
        # üéØ HI·ªÇN TH·ªä SL L√Ä "T·∫ÆT" KHI SL = 0
        sl_display = "T·∫ÆT" if self.sl is None else f"{self.sl}%"
        self.log(f"üü¢ Bot {strategy_name} kh·ªüi ƒë·ªông | ƒêB: {lev}x | V·ªën: {percent}% | TP: {tp}% | SL: {sl_display}")

    def log(self, message):
        """CH·ªà LOG KHI ƒê√ìNG/M·ªû V·ªä TH·∫æ"""
        logger.info(message)
        if self.telegram_bot_token and self.telegram_chat_id:
            send_telegram(message, 
                         bot_token=self.telegram_bot_token, 
                         default_chat_id=self.telegram_chat_id)

    def _handle_price_update(self, price):
        if self._stop or not price or price <= 0:
            return
        try:
            pass  # Kh√¥ng x·ª≠ l√Ω g√¨, ch·ªâ ƒë·ªÉ tr√°nh l·ªói
        except Exception:
            pass

    def get_signal(self):
        raise NotImplementedError("Ph∆∞∆°ng th·ª©c get_signal c·∫ßn ƒë∆∞·ª£c tri·ªÉn khai")

    def get_target_direction(self):
        """X√ÅC ƒê·ªäNH H∆Ø·ªöNG GIAO D·ªäCH"""
        try:
            all_positions = get_positions(api_key=self.api_key, api_secret=self.api_secret)
            
            buy_count = 0
            sell_count = 0
            
            for pos in all_positions:
                position_amt = float(pos.get('positionAmt', 0))
                if position_amt != 0:
                    if position_amt > 0:
                        buy_count += 1
                    else:
                        sell_count += 1
            
            total = buy_count + sell_count
            if total == 0:
                return "BUY" if random.random() > 0.5 else "SELL"
            
            if buy_count > sell_count:
                return "SELL"
            elif sell_count > buy_count:
                return "BUY"
            else:
                return "BUY" if random.random() > 0.5 else "SELL"
                
        except Exception:
            return "BUY" if random.random() > 0.5 else "SELL"

    def find_and_set_coin(self):
        """T√åM V√Ä SET COIN M·ªöI - CHI·∫æM SLOT NGAY KHI T√åM ƒê∆Ø·ª¢C"""
        current_time = time.time()
        if current_time - self.last_find_time < self.find_interval:
            return False
        
        self.last_find_time = current_time
        
        # üéØ KI·ªÇM TRA C√íN SLOT TR·ªêNG KH√îNG
        if not self.coin_manager.can_add_coin():
            return False
        
        # X√°c ƒë·ªãnh h∆∞·ªõng giao d·ªãch
        self.current_target_direction = self.get_target_direction()
        
        # L·∫•y danh s√°ch coin ƒëang giao d·ªãch ƒë·ªÉ tr√°nh tr√πng
        trading_coins = self.coin_manager.get_trading_coins()
        
        # T√¨m coin t·ªët nh·∫•t
        coin_data = self.coin_finder.find_best_coin(self.current_target_direction, trading_coins)
        
        if coin_data and coin_data.get('qualified', False):
            new_symbol = coin_data['symbol']
            
            # üéØ CHI·∫æM SLOT NGAY KHI T√åM ƒê∆Ø·ª¢C COIN PH√ô H·ª¢P
            if self.coin_manager.add_coin(new_symbol):
                # C·∫≠p nh·∫≠t symbol v√† thi·∫øt l·∫≠p WebSocket
                if self.symbol:
                    self.ws_manager.remove_symbol(self.symbol)
                    # üéØ QUAN TR·ªåNG: Gi·∫£i ph√≥ng slot c·ªßa coin c≈©
                    self.coin_manager.remove_coin(self.symbol)
                
                self.symbol = new_symbol
                self.ws_manager.add_symbol(self.symbol, self._handle_price_update)
                self.coin_occupied = True
                
                # Log th√¥ng tin
                self.log(f"üîÄ ƒê√£ chuy·ªÉn sang coin m·ªõi: {new_symbol} | H∆∞·ªõng: {self.current_target_direction}")
                return True
            else:
                # Kh√¥ng th·ªÉ chi·∫øm slot (c√≥ th·ªÉ b·ªã tranh ch·∫•p)
                return False
        
        return False

    def force_switch_coin(self, reason=""):
        """CHUY·ªÇN COIN CH·ª¶ ƒê·ªòNG KHI KH√îNG PH√ô H·ª¢P"""
        if self.symbol and self.coin_occupied:
            self.log(f"üîÄ Chuy·ªÉn coin: {self.symbol} ‚Üí {reason}")
            
            # Gi·∫£i ph√≥ng slot hi·ªán t·∫°i
            self.coin_manager.remove_coin(self.symbol)
            self.ws_manager.remove_symbol(self.symbol)
            self.coin_occupied = False
            
            # Reset tr·∫°ng th√°i
            self.symbol = None
            self.status = "searching"
            self.position_open = False
            
            # T√¨m coin m·ªõi ngay l·∫≠p t·ª©c
            return self.find_and_set_coin()
        return False

    def check_position_status(self):
        if not self.symbol:
            return
            
        try:
            positions = get_positions(self.symbol, self.api_key, self.api_secret)
            if not positions:
                self._reset_position()
                return
            
            position_found = False
            for pos in positions:
                if pos['symbol'] == self.symbol:
                    position_amt = float(pos.get('positionAmt', 0))
                    if abs(position_amt) > 0:
                        position_found = True
                        self.position_open = True
                        self.status = "open"
                        self.side = "BUY" if position_amt > 0 else "SELL"
                        self.qty = position_amt
                        self.entry = float(pos.get('entryPrice', 0))
                        break
                    else:
                        position_found = True
                        self._reset_position()
                        break
            
            if not position_found:
                self._reset_position()
                
        except Exception:
            pass

    def _reset_position(self):
        """RESET TR·∫†NG TH√ÅI - CH·ªà X√ìA COIN KHI ƒê√ìNG V·ªä TH·∫æ"""
        # üéØ CH·ªà x√≥a coin khi ƒëang c√≥ position_open v√† ƒë√≥ng v·ªã th·∫ø
        if self.position_open and self.symbol and self.coin_occupied:
            self.coin_manager.remove_coin(self.symbol)
            self.ws_manager.remove_symbol(self.symbol)
            self.coin_occupied = False
            
        self.position_open = False
        self.status = "searching"
        self.side = ""
        self.qty = 0
        self.entry = 0
        self._close_attempted = False
        self._last_close_attempt = 0

    def _run(self):
        while not self._stop:
            try:
                current_time = time.time()
                
                if current_time - self.last_position_check > self.position_check_interval:
                    self.check_position_status()
                    self.last_position_check = current_time
                
                if not self.position_open:
                    # üéØ LU√îN T√åM COIN M·ªöI N·∫æU CH∆ØA C√ì V·ªä TH·∫æ
                    # Ngay c·∫£ khi ƒë√£ c√≥ symbol, v·∫´n ki·ªÉm tra xem c√≥ coin t·ªët h∆°n kh√¥ng
                    if self.symbol and self.coin_occupied:
                        # Ki·ªÉm tra t√≠n hi·ªáu hi·ªán t·∫°i
                        current_signal = self.get_signal()
                        
                        # N·∫øu coin hi·ªán t·∫°i kh√¥ng c√≤n ph√π h·ª£p, t√¨m coin kh√°c ngay
                        if current_signal == "NEUTRAL" or (current_signal and current_signal != self.current_target_direction):
                            self.status = "searching"
                            if self.force_switch_coin(f"T√≠n hi·ªáu kh√¥ng ph√π h·ª£p: {current_signal}"):
                                continue  # ƒê√£ chuy·ªÉn coin, ti·∫øp t·ª•c v√≤ng l·∫∑p
                    
                    # N·∫øu ch∆∞a c√≥ symbol ho·∫∑c ƒëang t√¨m ki·∫øm
                    if not self.symbol or self.status == "searching" or not self.coin_occupied:
                        if self.find_and_set_coin():
                            time.sleep(2)
                            continue
                    
                    # PH√ÇN T√çCH T√çN HI·ªÜU V√Ä M·ªû V·ªä TH·∫æ
                    signal = self.get_signal()
                    
                    if signal and signal != "NEUTRAL":
                        if (current_time - self.last_trade_time > 20 and
                            current_time - self.last_close_time > self.cooldown_period):
                            if self.open_position(signal):
                                self.last_trade_time = current_time
                            else:
                                # üéØ N·∫øu kh√¥ng m·ªü ƒë∆∞·ª£c v·ªã th·∫ø, chuy·ªÉn sang coin kh√°c
                                self.status = "searching"
                                if self.symbol and self.coin_occupied:
                                    self.coin_manager.remove_coin(self.symbol)  # Gi·∫£i ph√≥ng slot
                                    self.coin_occupied = False
                                self.symbol = None
                                time.sleep(2)
                        else:
                            time.sleep(2)
                    else:
                        # üéØ T√≠n hi·ªáu trung l·∫≠p, chuy·ªÉn sang coin kh√°c
                        if signal == "NEUTRAL":
                            self.status = "searching"
                            if self.symbol and self.coin_occupied:
                                self.force_switch_coin("T√≠n hi·ªáu trung l·∫≠p")
                        time.sleep(2)
                
                # KI·ªÇM TRA TP/SL
                if self.position_open and not self._close_attempted:
                    self.check_tp_sl()
                    
                time.sleep(1)
                
            except Exception:
                time.sleep(1)

    def stop(self):
        self._stop = True
        if self.symbol and self.coin_occupied:
            self.ws_manager.remove_symbol(self.symbol)
            self.coin_manager.remove_coin(self.symbol)
        self.log(f"üî¥ Bot d·ª´ng")

    def open_position(self, side):
        try:
            self.check_position_status()
            if self.position_open:
                return False
    
            if not set_leverage(self.symbol, self.lev, self.api_key, self.api_secret):
                return False
    
            balance = get_balance(self.api_key, self.api_secret)
            if balance is None or balance <= 0:
                return False
    
            current_price = get_current_price(self.symbol)
            if current_price <= 0:
                return False
    
            step_size = get_step_size(self.symbol, self.api_key, self.api_secret)
            usd_amount = balance * (self.percent / 100)
            qty = (usd_amount * self.lev) / current_price
            
            if step_size > 0:
                qty = math.floor(qty / step_size) * step_size
                qty = round(qty, 8)
    
            if qty < step_size:
                return False
    
            result = place_order(self.symbol, side, qty, self.api_key, self.api_secret)
            if result and 'orderId' in result:
                executed_qty = float(result.get('executedQty', 0))
                avg_price = float(result.get('avgPrice', current_price))
                
                if executed_qty >= 0:
                    self.entry = avg_price
                    self.side = side
                    self.qty = executed_qty if side == "BUY" else -executed_qty
                    self.position_open = True
                    self.status = "open"
                    
                    # üéØ HI·ªÇN TH·ªä SL L√Ä "T·∫ÆT" KHI SL = 0
                    sl_display = "T·∫ÆT" if self.sl is None else f"{self.sl}%"
                    
                    message = (
                        f"‚úÖ <b>M·ªû V·ªä TH·∫æ {self.symbol}</b>\n"
                        f"ü§ñ Chi·∫øn l∆∞·ª£c: {self.strategy_name}\n"
                        f"üìå H∆∞·ªõng: {side}\n"
                        f"üè∑Ô∏è Gi√° v√†o: {self.entry:.4f}\n"
                        f"üìä Kh·ªëi l∆∞·ª£ng: {executed_qty:.4f}\n"
                        f"üí∞ ƒê√≤n b·∫©y: {self.lev}x\n"
                        f"üéØ TP: {self.tp}% | üõ°Ô∏è SL: {sl_display}"
                    )
                    self.log(message)
                    return True
                else:
                    return False
            else:
                return False
                    
        except Exception:
            return False

    def close_position(self, reason=""):
        try:
            self.check_position_status()
            
            if not self.position_open or abs(self.qty) <= 0:
                self._reset_position()
                return False

            current_time = time.time()
            if self._close_attempted and current_time - self._last_close_attempt < 30:
                return False
            
            self._close_attempted = True
            self._last_close_attempt = current_time

            close_side = "SELL" if self.side == "BUY" else "BUY"
            close_qty = abs(self.qty)
            
            cancel_all_orders(self.symbol, self.api_key, self.api_secret)
            time.sleep(0.5)
            
            result = place_order(self.symbol, close_side, close_qty, self.api_key, self.api_secret)
            if result and 'orderId' in result:
                current_price = get_current_price(self.symbol)
                pnl = 0
                if self.entry > 0:
                    if self.side == "BUY":
                        pnl = (current_price - self.entry) * abs(self.qty)
                    else:
                        pnl = (self.entry - current_price) * abs(self.qty)
                
                message = (
                    f"‚õî <b>ƒê√ìNG V·ªä TH·∫æ {self.symbol}</b>\n"
                    f"ü§ñ Chi·∫øn l∆∞·ª£c: {self.strategy_name}\n"
                    f"üìå L√Ω do: {reason}\n"
                    f"üè∑Ô∏è Gi√° ra: {current_price:.4f}\n"
                    f"üìä Kh·ªëi l∆∞·ª£ng: {close_qty:.4f}\n"
                    f"üí∞ PnL: {pnl:.2f} USDT"
                )
                self.log(message)
                
                # üéØ X√ìA COIN V√Ä RESET
                self._reset_position()
                self.last_close_time = time.time()
                
                time.sleep(2)
                self.check_position_status()
                
                return True
            else:
                self._close_attempted = False
                return False
                
        except Exception:
            self._close_attempted = False
            return False

    def check_tp_sl(self):
        if not self.position_open or self.entry <= 0 or self._close_attempted:
            return

        current_price = get_current_price(self.symbol)
        if current_price <= 0:
            return

        if self.side == "BUY":
            profit = (current_price - self.entry) * abs(self.qty)
        else:
            profit = (self.entry - current_price) * abs(self.qty)
            
        invested = self.entry * abs(self.qty) / self.lev
        if invested <= 0:
            return
            
        roi = (profit / invested) * 100

        # üéØ CH·ªà KI·ªÇM TRA TP KHI C√ì GI√Å TR·ªä
        if self.tp is not None and roi >= self.tp:
            self.close_position(f"‚úÖ ƒê·∫°t TP {self.tp}% (ROI: {roi:.2f}%)")
        # üéØ CH·ªà KI·ªÇM TRA SL KHI SL KH√ÅC None (T·ª®C SL ƒê∆Ø·ª¢C B·∫¨T)
        elif self.sl is not None and roi <= -self.sl:
            self.close_position(f"‚ùå ƒê·∫°t SL {self.sl}% (ROI: {roi:.2f}%)")

# ========== BOT MULTI-TIMEFRAME ƒê·ªòNG ==========
class DynamicMultiTimeframeBot(BaseBot):
    """Bot ƒë·ªông s·ª≠ d·ª•ng t√≠n hi·ªáu ƒëa khung th·ªùi gian"""
    
    def __init__(self, symbol, lev, percent, tp, sl, ws_manager, api_key, api_secret, 
                 telegram_bot_token, telegram_chat_id, config_key=None, bot_id=None):
        
        super().__init__(symbol, lev, percent, tp, sl, ws_manager, api_key, api_secret,
                        telegram_bot_token, telegram_chat_id, "Dynamic Multi-Timeframe", 
                        config_key, bot_id)
        
        self.analyzer = MultiTimeframeAnalyzer()
        self.last_analysis_time = 0
        self.analysis_interval = 300
        
    def get_signal(self):
        """L·∫•y t√≠n hi·ªáu t·ª´ ph√¢n t√≠ch ƒëa khung th·ªùi gian"""
        if not self.symbol:
            return None
            
        try:
            current_time = time.time()
            if current_time - self.last_analysis_time < self.analysis_interval:
                return None
            
            self.last_analysis_time = current_time
            
            # Ph√¢n t√≠ch symbol
            signal, timeframe_data = self.analyzer.analyze_symbol(self.symbol)
            
            return signal
            
        except Exception:
            return None

# ========== BOT MANAGER HO√ÄN CH·ªàNH ==========
class BotManager:
    def __init__(self, api_key=None, api_secret=None, telegram_bot_token=None, telegram_chat_id=None):
        self.ws_manager = WebSocketManager()
        self.bots = {}  # üéØ CH·ªà 1 BOT DUY NH·∫§T
        self.running = True
        self.start_time = time.time()
        self.user_states = {}
        
        self.api_key = api_key
        self.api_secret = api_secret
        self.telegram_bot_token = telegram_bot_token
        self.telegram_chat_id = telegram_chat_id
        
        # üéØ QU·∫¢N L√ù COIN GI·ªöI H·∫†N
        self.coin_manager = CoinManager()
        self.position_balancer = PositionBalancer(self)
        
        if api_key and api_secret:
            self._verify_api_connection()
            self.log("üü¢ H·ªÜ TH·ªêNG BOT ƒê∆†N ƒê√É KH·ªûI ƒê·ªòNG - 1 BOT DUY NH·∫§T")
            
            self.telegram_thread = threading.Thread(target=self._telegram_listener, daemon=True)
            self.telegram_thread.start()
            
            if self.telegram_chat_id:
                self.send_main_menu(self.telegram_chat_id)
        else:
            self.log("‚ö° BotManager kh·ªüi ƒë·ªông ·ªü ch·∫ø ƒë·ªô kh√¥ng config")

    def _verify_api_connection(self):
        """KI·ªÇM TRA K·∫æT N·ªêI API BINANCE"""
        balance = get_balance(self.api_key, self.api_secret)
        if balance is None:
            self.log("‚ùå L·ªñI: Kh√¥ng th·ªÉ k·∫øt n·ªëi Binance API.")
        else:
            self.log(f"‚úÖ K·∫øt n·ªëi Binance th√†nh c√¥ng! S·ªë d∆∞: {balance:.2f} USDT")

    def log(self, message):
        """GHI LOG H·ªÜ TH·ªêNG"""
        logger.info(f"[SYSTEM] {message}")
        if self.telegram_bot_token and self.telegram_chat_id:
            send_telegram(f"<b>SYSTEM</b>: {message}", 
                         bot_token=self.telegram_bot_token, 
                         default_chat_id=self.telegram_chat_id)

    def send_main_menu(self, chat_id):
        """G·ª¨I MENU CH√çNH TELEGRAM"""
        welcome = (
            "ü§ñ <b>BOT GIAO D·ªäCH FUTURES ƒê∆†N</b>\n\n"
            "üî¢ <b>H·ªÜ TH·ªêNG 1 BOT DUY NH·∫§T</b>\n"
            "‚Ä¢ ü§ñ Ch·ªâ 1 bot qu√©t to√†n b·ªô Binance\n"
            "‚Ä¢ üî¢ Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng coin t·ªëi ƒëa\n"  
            "‚Ä¢ üîÑ T·ª± ƒë·ªông thay th·∫ø coin khi ƒë√≥ng l·ªánh\n"
            "‚Ä¢ ‚öñÔ∏è C√¢n b·∫±ng v·ªã th·∫ø t·ª± ƒë·ªông\n"
            "‚Ä¢ üéØ <b>CHUY·ªÇN COIN LINH HO·∫†T</b> - Nh·∫£y coin ngay khi kh√¥ng ph√π h·ª£p\n"
            "‚Ä¢ üö´ <b>T·∫ÆT SL</b> - Kh√¥ng d·ª´ng l·ªó khi SL = 0"
        )
        send_telegram(welcome, chat_id, create_main_menu(),
                     bot_token=self.telegram_bot_token, 
                     default_chat_id=self.telegram_chat_id)

    def set_max_coins(self, max_coins):
        """THI·∫æT L·∫¨P S·ªê L∆Ø·ª¢NG COIN T·ªêI ƒêA"""
        self.coin_manager.set_max_coins(max_coins)
        self.log(f"üî¢ ƒê√£ thi·∫øt l·∫≠p s·ªë coin t·ªëi ƒëa: {max_coins}")

    def add_bot(self, lev, percent, tp, sl, max_coins):
        """T·∫†O 1 BOT DUY NH·∫§T V·ªöI GI·ªöI H·∫†N COIN"""
        # üéØ QUAN TR·ªåNG: X·ª≠ l√Ω SL = 0 th√†nh t·∫Øt SL
        if sl == 0:
            sl = None
            
        if not self.api_key or not self.api_secret:
            self.log("‚ùå Ch∆∞a thi·∫øt l·∫≠p API Key trong BotManager")
            return False
        
        # Ki·ªÉm tra k·∫øt n·ªëi Binance
        test_balance = get_balance(self.api_key, self.api_secret)
        if test_balance is None:
            self.log("‚ùå L·ªöI: Kh√¥ng th·ªÉ k·∫øt n·ªëi Binance")
            return False
        
        # üéØ CH·ªà CHO PH√âP 1 BOT
        if self.bots:
            self.log("‚ö†Ô∏è H·ªá th·ªëng ch·ªâ h·ªó tr·ª£ 1 bot duy nh·∫•t")
            return False
        
        # Thi·∫øt l·∫≠p s·ªë l∆∞·ª£ng coin t·ªëi ƒëa
        self.coin_manager.set_max_coins(max_coins)
        
        try:
            # üéØ T·∫†O BOT ƒê·ªòNG DUY NH·∫§T
            bot_id = f"MAIN_BOT_{int(time.time())}"
            
            bot = DynamicMultiTimeframeBot(
                symbol=None,  # Bot ƒë·ªông - t·ª± t√¨m coin
                lev=lev, 
                percent=percent, 
                tp=tp, 
                sl=sl,  # üéØ SL c√≥ th·ªÉ l√† None n·∫øu t·∫Øt
                ws_manager=self.ws_manager,
                api_key=self.api_key, 
                api_secret=self.api_secret, 
                telegram_bot_token=self.telegram_bot_token,
                telegram_chat_id=self.telegram_chat_id, 
                bot_id=bot_id
            )
            
            self.bots[bot_id] = bot
            
            # üéØ HI·ªÇN TH·ªä SL L√Ä "T·∫ÆT" KHI SL = 0
            sl_display = "T·∫ÆT" if sl is None else f"{sl}%"
            
            success_msg = (
                f"‚úÖ <b>BOT DUY NH·∫§T ƒê√É ƒê∆Ø·ª¢C T·∫†O</b>\n\n"
                f"üí∞ ƒê√≤n b·∫©y: {lev}x\n"
                f"üìä % S·ªë d∆∞: {percent}%\n"
                f"üéØ TP: {tp}%\n"
                f"üõ°Ô∏è SL: {sl_display}\n"
                f"üî¢ Coin t·ªëi ƒëa: {max_coins}\n\n"
                f"üîÑ <b>Bot s·∫Ω:</b>\n"
                f"‚Ä¢ Qu√©t TO√ÄN B·ªò Binance\n"
                f"‚Ä¢ T√¨m coin t·ªët nh·∫•t v·ªõi ƒë√≤n b·∫©y {lev}x\n" 
                f"‚Ä¢ CHI·∫æM SLOT ngay khi t√¨m ƒë∆∞·ª£c coin ph√π h·ª£p\n"
                f"‚Ä¢ T·ª∞ ƒê·ªòNG chuy·ªÉn coin khi t√≠n hi·ªáu kh√¥ng ph√π h·ª£p\n"
                f"‚Ä¢ D·ª™NG t√¨m khi ƒë·ªß {max_coins} coin\n"
                f"‚Ä¢ T·ª± thay th·∫ø coin khi ƒë√≥ng l·ªánh\n"
                f"‚Ä¢ B·ªè qua coin l·ªói, t√¨m coin kh√°c"
            )
            
            self.log(success_msg)
            return True
            
        except Exception as e:
            self.log(f"‚ùå L·ªói t·∫°o bot: {str(e)}")
            return False

    def stop_bot(self, bot_id):
        """D·ª™NG BOT C·ª§ TH·ªÇ"""
        bot = self.bots.get(bot_id)
        if bot:
            bot.stop()
            del self.bots[bot_id]
            self.log(f"‚õî ƒê√£ d·ª´ng bot {bot_id}")
            return True
        return False

    def stop_all(self):
        """D·ª™NG T·∫§T C·∫¢ BOT V√Ä H·ªÜ TH·ªêNG"""
        self.log("‚õî ƒêang d·ª´ng t·∫•t c·∫£ bot...")
        for bot_id in list(self.bots.keys()):
            self.stop_bot(bot_id)
        self.ws_manager.stop()
        self.running = False
        self.log("üî¥ H·ªá th·ªëng ƒë√£ d·ª´ng")

    def get_status_summary(self):
        """L·∫§Y TH·ªêNG K√ä T·ªîNG QUAN H·ªÜ TH·ªêNG"""
        try:
            # L·∫•y t·∫•t c·∫£ v·ªã th·∫ø t·ª´ Binance
            all_positions = get_positions(api_key=self.api_key, api_secret=self.api_secret)
            binance_buy_count = 0
            binance_sell_count = 0
            binance_positions = []
            
            for pos in all_positions:
                position_amt = float(pos.get('positionAmt', 0))
                if position_amt != 0:
                    symbol = pos.get('symbol', 'UNKNOWN')
                    if position_amt > 0:
                        binance_buy_count += 1
                        binance_positions.append(f"{symbol}(LONG)")
                    else:
                        binance_sell_count += 1
                        binance_positions.append(f"{symbol}(SHORT)")
            
            # Th·ªëng k√™ coin
            trading_coins = self.coin_manager.get_trading_coins()
            available_slots = self.coin_manager.get_available_slots()
            
            if not self.bots:
                return "ü§ñ <b>CH∆ØA C√ì BOT N√ÄO</b>\n\nNh·∫•n '‚ûï Th√™m Bot' ƒë·ªÉ b·∫Øt ƒë·∫ßu"
            
            bot = list(self.bots.values())[0]  # üéØ CH·ªà 1 BOT
            current_coin = bot.symbol if bot.symbol else "ƒêang t√¨m..."
            status = "üü¢ ƒêang trade" if bot.position_open else "üîç ƒêang t√¨m coin"
            
            # üéØ HI·ªÇN TH·ªä SL L√Ä "T·∫ÆT" KHI SL = 0
            sl_display = "T·∫ÆT" if bot.sl is None else f"{bot.sl}%"
            
            total_binance = binance_buy_count + binance_sell_count
            
            summary = (
                f"ü§ñ <b>BOT DUY NH·∫§T</b> | {status}\n\n"
                f"üí∞ ƒê√≤n b·∫©y: {bot.lev}x\n"
                f"üìä % S·ªë d∆∞: {bot.percent}%\n"
                f"üéØ TP: {bot.tp}% | üõ°Ô∏è SL: {sl_display}\n"
                f"üî¢ Coin hi·ªán t·∫°i: {current_coin}\n"
                f"üéØ H∆∞·ªõng mong mu·ªën: {bot.current_target_direction or 'Ch∆∞a x√°c ƒë·ªãnh'}\n\n"
                f"üìà <b>COIN GI·ªöI H·∫†N: {self.coin_manager.max_coins}</b>\n"
                f"üü¢ ƒêang theo d√µi: {len(trading_coins)} coin\n"
                f"üü° C√≤n tr·ªëng: {available_slots} slot\n"
                f"üîí ƒê√£ chi·∫øm slot: {'C√≥' if bot.coin_occupied else 'Kh√¥ng'}\n"
            )
            
            if trading_coins:
                summary += f"\nüîó <b>Danh s√°ch coin:</b>\n"
                for coin in trading_coins:
                    summary += f"‚Ä¢ {coin}\n"
            
            if total_binance > 0:
                binance_buy_ratio = binance_buy_count / total_binance
                binance_sell_ratio = binance_sell_count / total_binance
                
                summary += (
                    f"\nüí∞ <b>V·ªä TH·∫æ BINANCE: {total_binance}</b>\n"
                    f"üü¢ LONG: {binance_buy_count} ({binance_buy_ratio:.1%})\n"
                    f"üî¥ SHORT: {binance_sell_count} ({binance_sell_ratio:.1%})\n"
                )
                
                if binance_positions:
                    if len(binance_positions) > 6:
                        summary += f"üìã {', '.join(binance_positions[:6])} + {len(binance_positions) - 6} more..."
                    else:
                        summary += f"üìã {', '.join(binance_positions)}"
            
            # ƒê·ªÅ xu·∫•t c√¢n b·∫±ng
            if total_binance > 0:
                if binance_buy_ratio > 0.6:
                    summary += f"\n\n‚öñÔ∏è <b>ƒê·ªÄ XU·∫§T:</b> Nhi·ªÅu LONG ‚Üí ∆ØU TI√äN T√åM SHORT"
                elif binance_sell_ratio > 0.6:
                    summary += f"\n\n‚öñÔ∏è <b>ƒê·ªÄ XU·∫§T:</b> Nhi·ªÅu SHORT ‚Üí ∆ØU TI√äN T√åM LONG"
                else:
                    summary += f"\n\n‚öñÔ∏è <b>TR·∫†NG TH√ÅI:</b> C√¢n b·∫±ng t·ªët"
                    
            return summary
                    
        except Exception as e:
            return f"‚ùå L·ªói th·ªëng k√™: {str(e)}"

    def _telegram_listener(self):
        """L·∫ÆNG NGHE TIN NH·∫ÆN TELEGRAM"""
        last_update_id = 0
        
        while self.running and self.telegram_bot_token:
            try:
                url = f"https://api.telegram.org/bot{self.telegram_bot_token}/getUpdates?offset={last_update_id+1}&timeout=30"
                response = requests.get(url, timeout=35)
                
                if response.status_code == 200:
                    data = response.json()
                    if data.get('ok'):
                        for update in data['result']:
                            update_id = update['update_id']
                            message = update.get('message', {})
                            chat_id = str(message.get('chat', {}).get('id'))
                            text = message.get('text', '').strip()
                            
                            if chat_id != self.telegram_chat_id:
                                continue
                            
                            if update_id > last_update_id:
                                last_update_id = update_id
                            
                            self._handle_telegram_message(chat_id, text)
                elif response.status_code == 409:
                    logger.error("L·ªói xung ƒë·ªôt Telegram")
                    time.sleep(60)
                else:
                    time.sleep(10)
                
            except Exception as e:
                logger.error(f"L·ªói Telegram listener: {str(e)}")
                time.sleep(10)

    def _handle_telegram_message(self, chat_id, text):
        """X·ª¨ L√ù TIN NH·∫ÆN TELEGRAM"""
        user_state = self.user_states.get(chat_id, {})
        current_step = user_state.get('step')
        
        # X·ª≠ l√Ω c√°c b∆∞·ªõc t·∫°o bot
        if current_step == 'waiting_max_coins':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy th√™m bot", chat_id, create_main_menu(),
                            self.telegram_bot_token, self.telegram_chat_id)
            else:
                try:
                    max_coins = int(text)
                    if max_coins <= 0 or max_coins > 20:
                        send_telegram("‚ö†Ô∏è S·ªë coin ph·∫£i t·ª´ 1 ƒë·∫øn 20. Ch·ªçn l·∫°i:",
                                    chat_id, create_coin_count_keyboard(),
                                    self.telegram_bot_token, self.telegram_chat_id)
                        return

                    user_state['max_coins'] = max_coins
                    user_state['step'] = 'waiting_leverage'
                    
                    send_telegram(
                        f"üî¢ Coin t·ªëi ƒëa: {max_coins}\n\n"
                        f"Ch·ªçn ƒë√≤n b·∫©y:",
                        chat_id,
                        create_leverage_keyboard(),
                        self.telegram_bot_token, self.telegram_chat_id
                    )
                except ValueError:
                    send_telegram("‚ö†Ô∏è Vui l√≤ng ch·ªçn s·ªë h·ª£p l·ªá:",
                                chat_id, create_coin_count_keyboard(),
                                self.telegram_bot_token, self.telegram_chat_id)

        elif current_step == 'waiting_leverage':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy", chat_id, create_main_menu(),
                            self.telegram_bot_token, self.telegram_chat_id)
            else:
                try:
                    lev_text = text[:-1] if text.endswith('x') else text
                    leverage = int(lev_text)
                    
                    if leverage <= 0 or leverage > 100:
                        send_telegram("‚ö†Ô∏è ƒê√≤n b·∫©y ph·∫£i t·ª´ 1-100. Ch·ªçn l·∫°i:",
                                    chat_id, create_leverage_keyboard(),
                                    self.telegram_bot_token, self.telegram_chat_id)
                        return

                    user_state['leverage'] = leverage
                    user_state['step'] = 'waiting_percent'
                    
                    send_telegram(
                        f"üí∞ ƒê√≤n b·∫©y: {leverage}x\n\n"
                        f"Ch·ªçn % s·ªë d∆∞ cho m·ªói l·ªánh:",
                        chat_id,
                        create_percent_keyboard(),
                        self.telegram_bot_token, self.telegram_chat_id
                    )
                except ValueError:
                    send_telegram("‚ö†Ô∏è Vui l√≤ng ch·ªçn ƒë√≤n b·∫©y h·ª£p l·ªá:",
                                chat_id, create_leverage_keyboard(),
                                self.telegram_bot_token, self.telegram_chat_id)

        elif current_step == 'waiting_percent':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy", chat_id, create_main_menu(),
                            self.telegram_bot_token, self.telegram_chat_id)
            else:
                try:
                    percent = float(text)
                    if percent <= 0 or percent > 100:
                        send_telegram("‚ö†Ô∏è % s·ªë d∆∞ ph·∫£i t·ª´ 0.1-100. Ch·ªçn l·∫°i:",
                                    chat_id, create_percent_keyboard(),
                                    self.telegram_bot_token, self.telegram_chat_id)
                        return

                    user_state['percent'] = percent
                    user_state['step'] = 'waiting_tp'
                    
                    balance = get_balance(self.api_key, self.api_secret)
                    amount_info = f"\nüíµ ~{balance * (percent/100):.2f} USDT/l·ªánh" if balance else ""
                    
                    send_telegram(
                        f"üìä % S·ªë d∆∞: {percent}%{amount_info}\n\n"
                        f"Ch·ªçn Take Profit (%):",
                        chat_id,
                        create_tp_keyboard(),
                        self.telegram_bot_token, self.telegram_chat_id
                    )
                except ValueError:
                    send_telegram("‚ö†Ô∏è Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá:",
                                chat_id, create_percent_keyboard(),
                                self.telegram_bot_token, self.telegram_chat_id)

        elif current_step == 'waiting_tp':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy", chat_id, create_main_menu(),
                            self.telegram_bot_token, self.telegram_chat_id)
            else:
                try:
                    tp = float(text)
                    if tp <= 0:
                        send_telegram("‚ö†Ô∏è Take Profit ph·∫£i > 0. Ch·ªçn l·∫°i:",
                                    chat_id, create_tp_keyboard(),
                                    self.telegram_bot_token, self.telegram_chat_id)
                        return

                    user_state['tp'] = tp
                    user_state['step'] = 'waiting_sl'
                    
                    send_telegram(
                        f"üéØ Take Profit: {tp}%\n\n"
                        f"Ch·ªçn Stop Loss (%):\n"
                        f"<i>Ch·ªçn 'T·∫ÆT SL' ƒë·ªÉ kh√¥ng d·ª´ng l·ªó</i>",
                        chat_id,
                        create_sl_keyboard(),
                        self.telegram_bot_token, self.telegram_chat_id
                    )
                except ValueError:
                    send_telegram("‚ö†Ô∏è Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá:",
                                chat_id, create_tp_keyboard(),
                                self.telegram_bot_token, self.telegram_chat_id)

        elif current_step == 'waiting_sl':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy", chat_id, create_main_menu(),
                            self.telegram_bot_token, self.telegram_chat_id)
            elif text == 'T·∫ÆT SL':
                # üéØ X·ª¨ L√ù T·∫ÆT SL
                user_state['sl'] = 0  # G√°n 0 ƒë·ªÉ sau n√†y chuy·ªÉn th√†nh None
                
                # üéØ T·∫†O BOT DUY NH·∫§T
                leverage = user_state.get('leverage')
                percent = user_state.get('percent')
                tp = user_state.get('tp')
                max_coins = user_state.get('max_coins', 5)
                
                success = self.add_bot(leverage, percent, tp, 0, max_coins)  # SL = 0
                
                if success:
                    success_msg = (
                        f"‚úÖ <b>BOT DUY NH·∫§T ƒê√É S·∫¥N S√ÄNG</b>\n\n"
                        f"üí∞ ƒê√≤n b·∫©y: {leverage}x\n"
                        f"üìä % S·ªë d∆∞: {percent}%\n"
                        f"üéØ TP: {tp}%\n"
                        f"üõ°Ô∏è SL: T·∫ÆT\n"
                        f"üî¢ Coin t·ªëi ƒëa: {max_coins}\n\n"
                        f"üîÑ <b>C∆° ch·∫ø ho·∫°t ƒë·ªông:</b>\n"
                        f"‚Ä¢ Qu√©t TO√ÄN B·ªò Binance\n"
                        f"‚Ä¢ T√¨m coin t·ªët nh·∫•t v·ªõi ƒë√≤n b·∫©y {leverage}x\n"
                        f"‚Ä¢ CHI·∫æM SLOT ngay khi t√¨m ƒë∆∞·ª£c coin ph√π h·ª£p\n"
                        f"‚Ä¢ T·ª∞ ƒê·ªòNG chuy·ªÉn coin khi t√≠n hi·ªáu kh√¥ng ph√π h·ª£p\n"
                        f"‚Ä¢ D·ª™NG khi ƒë·ªß {max_coins} coin\n"
                        f"‚Ä¢ T·ª∞ ƒê·ªòNG thay th·∫ø khi ƒë√≥ng l·ªánh\n"
                        f"‚Ä¢ <b>KH√îNG D·ª™NG L·ªñ</b> (SL ƒë√£ t·∫Øt)\n"
                        f"‚Ä¢ B·ªé QUA coin l·ªói, t√¨m coin kh√°c"
                    )
                    send_telegram(success_msg, chat_id, create_main_menu(),
                                self.telegram_bot_token, self.telegram_chat_id)
                else:
                    send_telegram("‚ùå L·ªói t·∫°o bot", chat_id, create_main_menu(),
                                self.telegram_bot_token, self.telegram_chat_id)
                
                self.user_states[chat_id] = {}
            else:
                try:
                    sl = float(text)
                    if sl < 0:
                        send_telegram("‚ö†Ô∏è Stop Loss ph·∫£i ‚â• 0. Ch·ªçn l·∫°i:",
                                    chat_id, create_sl_keyboard(),
                                    self.telegram_bot_token, self.telegram_chat_id)
                        return

                    # üéØ T·∫†O BOT DUY NH·∫§T
                    leverage = user_state.get('leverage')
                    percent = user_state.get('percent')
                    tp = user_state.get('tp')
                    max_coins = user_state.get('max_coins', 5)
                    
                    success = self.add_bot(leverage, percent, tp, sl, max_coins)
                    
                    if success:
                        success_msg = (
                            f"‚úÖ <b>BOT DUY NH·∫§T ƒê√É S·∫¥N S√ÄNG</b>\n\n"
                            f"üí∞ ƒê√≤n b·∫©y: {leverage}x\n"
                            f"üìä % S·ªë d∆∞: {percent}%\n"
                            f"üéØ TP: {tp}%\n"
                            f"üõ°Ô∏è SL: {sl}%\n"
                            f"üî¢ Coin t·ªëi ƒëa: {max_coins}\n\n"
                            f"üîÑ <b>C∆° ch·∫ø ho·∫°t ƒë·ªông:</b>\n"
                            f"‚Ä¢ Qu√©t TO√ÄN B·ªò Binance\n"
                            f"‚Ä¢ T√¨m coin t·ªët nh·∫•t v·ªõi ƒë√≤n b·∫©y {leverage}x\n"
                            f"‚Ä¢ CHI·∫æM SLOT ngay khi t√¨m ƒë∆∞·ª£c coin ph√π h·ª£p\n"
                            f"‚Ä¢ T·ª∞ ƒê·ªòNG chuy·ªÉn coin khi t√≠n hi·ªáu kh√¥ng ph√π h·ª£p\n"
                            f"‚Ä¢ D·ª™NG khi ƒë·ªß {max_coins} coin\n"
                            f"‚Ä¢ T·ª∞ ƒê·ªòNG thay th·∫ø khi ƒë√≥ng l·ªánh\n"
                            f"‚Ä¢ B·ªé QUA coin l·ªói, t√¨m coin kh√°c"
                        )
                        send_telegram(success_msg, chat_id, create_main_menu(),
                                    self.telegram_bot_token, self.telegram_chat_id)
                    else:
                        send_telegram("‚ùå L·ªói t·∫°o bot", chat_id, create_main_menu(),
                                    self.telegram_bot_token, self.telegram_chat_id)
                    
                    self.user_states[chat_id] = {}
                    
                except ValueError:
                    send_telegram("‚ö†Ô∏è Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá ho·∫∑c ch·ªçn 'T·∫ÆT SL':",
                                chat_id, create_sl_keyboard(),
                                self.telegram_bot_token, self.telegram_chat_id)

        # X·ª≠ l√Ω c√°c l·ªánh menu ch√≠nh
        elif text == "‚ûï Th√™m Bot":
            # üéØ CH·ªà C√íN 1 QUY TR√åNH ƒê∆†N GI·∫¢N
            if self.bots:
                send_telegram("‚ö†Ô∏è H·ªá th·ªëng ƒëang ch·∫°y 1 bot. H√£y d·ª´ng bot hi·ªán t·∫°i tr∆∞·ªõc khi t·∫°o m·ªõi.", 
                            chat_id, create_main_menu(), self.telegram_bot_token, self.telegram_chat_id)
                return
                
            self.user_states[chat_id] = {'step': 'waiting_max_coins'}
            
            balance = get_balance(self.api_key, self.api_secret)
            balance_info = f"\nüí∞ S·ªë d∆∞ hi·ªán c√≥: <b>{balance:.2f} USDT</b>" if balance else ""
            
            send_telegram(
                "üî¢ <b>THI·∫æT L·∫¨P S·ªê L∆Ø·ª¢NG COIN T·ªêI ƒêA</b>\n\n"
                f"{balance_info}\n\n"
                "Ch·ªçn s·ªë l∆∞·ª£ng coin t·ªëi ƒëa bot ƒë∆∞·ª£c ph√©p giao d·ªãch:\n"
                "<i>Bot s·∫Ω t√¨m cho ƒë·∫øn khi ƒë·ªß s·ªë l∆∞·ª£ng n√†y</i>",
                chat_id,
                create_coin_count_keyboard(),
                self.telegram_bot_token, self.telegram_chat_id
            )
        
        elif text == "üìä Danh s√°ch Bot":
            if not self.bots:
                send_telegram("ü§ñ Kh√¥ng c√≥ bot n√†o ƒëang ch·∫°y", chat_id,
                            bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
            else:
                message = "ü§ñ <b>TH√îNG TIN BOT DUY NH·∫§T</b>\n\n"
                
                bot = list(self.bots.values())[0]
                symbol_info = bot.symbol if bot.symbol else "ƒêang t√¨m coin..."
                status = "üü¢ ƒêang trade" if bot.position_open else "üîç ƒêang t√¨m"
                
                # üéØ HI·ªÇN TH·ªä SL L√Ä "T·∫ÆT" KHI SL = 0
                sl_display = "T·∫ÆT" if bot.sl is None else f"{bot.sl}%"
                
                message += f"üîπ Tr·∫°ng th√°i: {status}\n"
                message += f"üîπ Coin hi·ªán t·∫°i: {symbol_info}\n"
                message += f"üîπ ƒê√£ chi·∫øm slot: {'C√≥' if bot.coin_occupied else 'Kh√¥ng'}\n"
                message += f"üîπ H∆∞·ªõng mong mu·ªën: {bot.current_target_direction or 'Ch∆∞a x√°c ƒë·ªãnh'}\n"
                message += f"üîπ ƒê√≤n b·∫©y: {bot.lev}x\n"
                message += f"üîπ % S·ªë d∆∞: {bot.percent}%\n"
                message += f"üîπ TP/SL: {bot.tp}%/{sl_display}\n"
                message += f"üîπ Coin t·ªëi ƒëa: {self.coin_manager.max_coins}\n"
                
                trading_coins = self.coin_manager.get_trading_coins()
                if trading_coins:
                    message += f"\nüîó <b>Coin ƒëang theo d√µi:</b>\n"
                    for coin in trading_coins:
                        message += f"‚Ä¢ {coin}\n"
                
                send_telegram(message, chat_id,
                            bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
        
        elif text == "üìä Th·ªëng k√™":
            summary = self.get_status_summary()
            send_telegram(summary, chat_id,
                         bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
        
        elif text == "‚õî D·ª´ng Bot":
            if not self.bots:
                send_telegram("ü§ñ Kh√¥ng c√≥ bot n√†o ƒëang ch·∫°y", chat_id,
                            bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
            else:
                self.stop_all()
                send_telegram("‚õî ƒê√£ d·ª´ng bot v√† h·ªá th·ªëng", chat_id, create_main_menu(),
                            self.telegram_bot_token, self.telegram_chat_id)
        
        elif text == "üí∞ S·ªë d∆∞":
            try:
                balance = get_balance(self.api_key, self.api_secret)
                if balance is None:
                    send_telegram("‚ùå L·ªói k·∫øt n·ªëi Binance", chat_id,
                                bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
                else:
                    send_telegram(f"üí∞ <b>S·ªê D∆Ø KH·∫¢ D·ª§NG</b>: {balance:.2f} USDT", chat_id,
                                bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
            except Exception as e:
                send_telegram(f"‚ö†Ô∏è L·ªói l·∫•y s·ªë d∆∞: {str(e)}", chat_id,
                            bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
        
        elif text == "üìà V·ªã th·∫ø":
            try:
                positions = get_positions(api_key=self.api_key, api_secret=self.api_secret)
                open_positions = []
                
                for pos in positions:
                    position_amt = float(pos.get('positionAmt', 0))
                    if position_amt != 0:
                        open_positions.append(pos)
                
                if not open_positions:
                    send_telegram("üì≠ Kh√¥ng c√≥ v·ªã th·∫ø n√†o ƒëang m·ªü", chat_id,
                                bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
                    return
                
                message = "üìà <b>V·ªä TH·∫æ ƒêANG M·ªû TR√äN BINANCE</b>\n\n"
                for pos in open_positions:
                    symbol = pos.get('symbol', 'UNKNOWN')
                    entry = float(pos.get('entryPrice', 0))
                    side = "LONG" if float(pos.get('positionAmt', 0)) > 0 else "SHORT"
                    pnl = float(pos.get('unRealizedProfit', 0))
                    leverage = float(pos.get('leverage', 1))
                    amount = abs(float(pos.get('positionAmt', 0)))
                    
                    message += (
                        f"üîπ {symbol} | {side}\n"
                        f"   üìä ƒê√≤n b·∫©y: {leverage}x\n"
                        f"   üè∑Ô∏è Gi√° v√†o: {entry:.4f}\n"
                        f"   ‚öñÔ∏è Kh·ªëi l∆∞·ª£ng: {amount:.4f}\n"
                        f"   üí∞ PnL: {pnl:.2f} USDT\n\n"
                    )
                
                send_telegram(message, chat_id,
                            bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
            except Exception as e:
                send_telegram(f"‚ö†Ô∏è L·ªói l·∫•y v·ªã th·∫ø: {str(e)}", chat_id,
                            bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
        
        elif text == "üéØ Chi·∫øn l∆∞·ª£c":
            strategy_info = (
                "üéØ <b>H·ªÜ TH·ªêNG BOT ƒê∆†N DUY NH·∫§T - CHUY·ªÇN COIN LINH HO·∫†T</b>\n\n"
                
                "ü§ñ <b>1 BOT - NHI·ªÄU COIN</b>\n"
                "‚Ä¢ Ch·ªâ 1 bot duy nh·∫•t qu√©t to√†n b·ªô Binance\n"
                "‚Ä¢ T·ª± ƒë·ªông t√¨m coin t·ªët nh·∫•t v·ªõi ƒë√≤n b·∫©y ph√π h·ª£p\n"
                "‚Ä¢ Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng coin t·ªëi ƒëa\n\n"
                
                "üî¢ <b>C∆† CH·∫æ COIN GI·ªöI H·∫†N</b>\n"
                "‚Ä¢ Danh s√°ch coin ban ƒë·∫ßu: R·ªñNG\n"
                "‚Ä¢ T√¨m coin ph√π h·ª£p: CHI·∫æM SLOT NGAY\n"
                "‚Ä¢ M·ªü v·ªã th·∫ø: GI·ªÆ NGUY√äN slot\n"  
                "‚Ä¢ ƒê√≥ng v·ªã th·∫ø: X√ìA coin kh·ªèi danh s√°ch\n"
                "‚Ä¢ Coin kh√¥ng ph√π h·ª£p: CHUY·ªÇN NGAY coin kh√°c\n"
                "‚Ä¢ D·ª´ng t√¨m khi ƒë·ªß s·ªë l∆∞·ª£ng coin\n"
                "‚Ä¢ Ti·∫øp t·ª•c t√¨m khi c√≥ slot tr·ªëng\n\n"
                
                "‚ö° <b>CHUY·ªÇN COIN LINH HO·∫†T</b>\n"
                "‚Ä¢ T√≠n hi·ªáu NEUTRAL ‚Üí Chuy·ªÉn coin ngay\n"
                "‚Ä¢ T√≠n hi·ªáu kh√¥ng ph√π h·ª£p ‚Üí Chuy·ªÉn coin ngay\n"
                "‚Ä¢ Kh√¥ng m·ªü ƒë∆∞·ª£c l·ªánh ‚Üí Chuy·ªÉn coin ngay\n"
                "‚Ä¢ Lu√¥n t√¨m coin t·ªët nh·∫•t c√≥ th·ªÉ\n\n"
                
                "üö´ <b>T·∫ÆT STOP LOSS</b>\n"
                "‚Ä¢ Khi SL = 0: Bot s·∫Ω KH√îNG t·ª± ƒë·ªông ƒë√≥ng l·ªánh khi l·ªó\n"
                "‚Ä¢ Ch·ªâ ƒë√≥ng l·ªánh khi ƒë·∫°t TP ho·∫∑c ƒë√≥ng th·ªß c√¥ng\n"
                "‚Ä¢ Ph√π h·ª£p cho chi·∫øn l∆∞·ª£c hold l√¢u d√†i\n"
                "‚Ä¢ C·∫¢NH B√ÅO: R·ªßi ro cao khi kh√¥ng c√≥ SL"
            )
            send_telegram(strategy_info, chat_id,
                        bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
        
        elif text == "‚öôÔ∏è C·∫•u h√¨nh":
            balance = get_balance(self.api_key, self.api_secret)
            api_status = "‚úÖ ƒê√£ k·∫øt n·ªëi" if balance is not None else "‚ùå L·ªói k·∫øt n·ªëi"
            
            has_bot = "‚úÖ ƒêang ch·∫°y" if self.bots else "‚ùå Ch∆∞a c√≥"
            trading_coins = self.coin_manager.get_trading_coins()
            available_slots = self.coin_manager.get_available_slots()
            
            # üéØ HI·ªÇN TH·ªä TR·∫†NG TH√ÅI SL
            sl_status = "T·∫ÆT" 
            if self.bots:
                bot = list(self.bots.values())[0]
                sl_status = "T·∫ÆT" if bot.sl is None else f"{bot.sl}%"
            
            config_info = (
                "‚öôÔ∏è <b>C·∫§U H√åNH H·ªÜ TH·ªêNG BOT ƒê∆†N</b>\n\n"
                f"üîë Binance API: {api_status}\n"
                f"ü§ñ Bot: {has_bot}\n"
                f"üî¢ Coin t·ªëi ƒëa: {self.coin_manager.max_coins}\n"
                f"üìà ƒêang theo d√µi: {len(trading_coins)} coin\n"
                f"üîì C√≤n tr·ªëng: {available_slots} slot\n"
                f"üõ°Ô∏è SL: {sl_status}\n"
                f"üåê WebSocket: {len(self.ws_manager.connections)} k·∫øt n·ªëi\n"
                f"‚öñÔ∏è Position Balancer: ƒê√£ s·∫µn s√†ng\n\n"
                f"üîÑ <b>H·ªá th·ªëng 1 bot ƒëang ho·∫°t ƒë·ªông</b>\n"
                f"üéØ <b>CHUY·ªÇN COIN LINH HO·∫†T - Chi·∫øm slot ngay khi t√¨m ƒë∆∞·ª£c coin</b>\n"
                f"üö´ <b>T·∫ÆT SL - Kh√¥ng d·ª´ng l·ªó khi SL = 0</b>"
            )
            send_telegram(config_info, chat_id,
                        bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
        
        elif text:
            self.send_main_menu(chat_id)

# ========== KH·ªûI T·∫†O GLOBAL INSTANCES ==========
coin_manager = CoinManager()
