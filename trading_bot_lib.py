# trading_bot_manager_complete.py - BOT MANAGER HO√ÄN CH·ªàNH ƒê√É S·ª¨A L·ªñI
import json
import hmac
import hashlib
import time
import threading
import urllib.request
import urllib.parse
import numpy as np
import websocket
import logging
import requests
import os
import math
import traceback
import random
from datetime import datetime
from concurrent.futures import ThreadPoolExecutor
from concurrent.futures import ThreadPoolExecutor, as_completed
import time
import ssl

# ========== BYPASS SSL VERIFICATION ==========
ssl._create_default_https_context = ssl._create_unverified_context

# ========== C·∫§U H√åNH LOGGING ==========
def setup_logging():
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(module)s - %(message)s',
        handlers=[
            logging.StreamHandler(),
            logging.FileHandler('bot_errors.log')
        ]
    )
    return logging.getLogger()

logger = setup_logging()

# ========== H√ÄM TELEGRAM ==========
def send_telegram(message, chat_id=None, reply_markup=None, bot_token=None, default_chat_id=None):
    if not bot_token:
        logger.warning("Telegram Bot Token ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p")
        return
    
    chat_id = chat_id or default_chat_id
    if not chat_id:
        logger.warning("Telegram Chat ID ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p")
        return
    
    url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": message,
        "parse_mode": "HTML"
    }
    
    if reply_markup:
        payload["reply_markup"] = json.dumps(reply_markup)
    
    try:
        response = requests.post(url, json=payload, timeout=15)
        if response.status_code != 200:
            logger.error(f"L·ªói Telegram ({response.status_code}): {response.text}")
    except Exception as e:
        logger.error(f"L·ªói k·∫øt n·ªëi Telegram: {str(e)}")

# ========== MENU TELEGRAM ==========
def create_cancel_keyboard():
    return {
        "keyboard": [[{"text": "‚ùå H·ªßy b·ªè"}]],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_strategy_keyboard():
    return {
        "keyboard": [
            [{"text": "üìä Volatility System"}],
            [{"text": "‚ùå H·ªßy b·ªè"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_exit_strategy_keyboard():
    return {
        "keyboard": [
            [{"text": "üéØ Ch·ªâ TP/SL c·ªë ƒë·ªãnh"}],
            [{"text": "‚ùå H·ªßy b·ªè"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_bot_mode_keyboard():
    return {
        "keyboard": [
            [{"text": "ü§ñ Bot Tƒ©nh - Coin c·ª• th·ªÉ"}, {"text": "üîÑ Bot ƒê·ªông - T·ª± t√¨m coin"}],
            [{"text": "‚ùå H·ªßy b·ªè"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_symbols_keyboard(strategy=None):
    try:
        symbols = get_all_usdt_pairs(limit=12)
        if not symbols:
            symbols = ["BTCUSDT", "ETHUSDT", "BNBUSDT", "ADAUSDT", "DOGEUSDT", "XRPUSDT", "DOTUSDT", "LINKUSDT"]
    except:
        symbols = ["BTCUSDT", "ETHUSDT", "BNBUSDT", "ADAUSDT", "DOGEUSDT", "XRPUSDT", "DOTUSDT", "LINKUSDT"]
    
    keyboard = []
    row = []
    for symbol in symbols:
        row.append({"text": symbol})
        if len(row) == 3:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    keyboard.append([{"text": "‚ùå H·ªßy b·ªè"}])
    
    return {
        "keyboard": keyboard,
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_main_menu():
    return {
        "keyboard": [
            [{"text": "üìä Danh s√°ch Bot"}, {"text": "üìä Th·ªëng k√™"}],
            [{"text": "‚ûï Th√™m Bot"}, {"text": "‚õî D·ª´ng Bot"}],
            [{"text": "üí∞ S·ªë d∆∞"}, {"text": "üìà V·ªã th·∫ø"}],
            [{"text": "‚öôÔ∏è C·∫•u h√¨nh"}, {"text": "üéØ Chi·∫øn l∆∞·ª£c"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": False
    }

def create_leverage_keyboard(strategy=None):
    leverages = ["3", "5", "10", "15", "20", "25", "50", "75", "100"]
    
    keyboard = []
    row = []
    for lev in leverages:
        row.append({"text": f"{lev}x"})
        if len(row) == 3:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    keyboard.append([{"text": "‚ùå H·ªßy b·ªè"}])
    
    return {
        "keyboard": keyboard,
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_percent_keyboard():
    return {
        "keyboard": [
            [{"text": "1"}, {"text": "3"}, {"text": "5"}, {"text": "10"}],
            [{"text": "15"}, {"text": "20"}, {"text": "25"}, {"text": "50"}],
            [{"text": "‚ùå H·ªßy b·ªè"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_tp_keyboard():
    return {
        "keyboard": [
            [{"text": "50"}, {"text": "100"}, {"text": "200"}],
            [{"text": "300"}, {"text": "500"}, {"text": "1000"}],
            [{"text": "‚ùå H·ªßy b·ªè"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_sl_keyboard():
    return {
        "keyboard": [
            [{"text": "0"}, {"text": "50"}, {"text": "100"}],
            [{"text": "150"}, {"text": "200"}, {"text": "500"}],
            [{"text": "‚ùå H·ªßy b·ªè"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_bot_count_keyboard():
    return {
        "keyboard": [
            [{"text": "1"}, {"text": "2"}, {"text": "3"}],
            [{"text": "5"}, {"text": "10"}],
            [{"text": "‚ùå H·ªßy b·ªè"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_roi_trigger_keyboard():
    return {
        "keyboard": [
            [{"text": "30"}, {"text": "50"}, {"text": "100"}],
            [{"text": "150"}, {"text": "200"}, {"text": "300"}],
            [{"text": "‚ùå T·∫Øt t√≠nh nƒÉng"}],
            [{"text": "‚ùå H·ªßy b·ªè"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

# ========== API BINANCE ƒê√É S·ª¨A L·ªñI ==========
def sign(query, api_secret):
    try:
        return hmac.new(api_secret.encode(), query.encode(), hashlib.sha256).hexdigest()
    except Exception as e:
        logger.error(f"L·ªói t·∫°o ch·ªØ k√Ω: {str(e)}")
        return ""

def binance_api_request(url, method='GET', params=None, headers=None):
    max_retries = 2
    for attempt in range(max_retries):
        try:
            if headers is None:
                headers = {}
            
            if 'User-Agent' not in headers:
                headers['User-Agent'] = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            
            if method.upper() == 'GET':
                if params:
                    query = urllib.parse.urlencode(params)
                    url = f"{url}?{query}"
                req = urllib.request.Request(url, headers=headers)
            else:
                data = urllib.parse.urlencode(params).encode() if params else None
                req = urllib.request.Request(url, data=data, headers=headers, method=method)
            
            with urllib.request.urlopen(req, timeout=30) as response:
                if response.status == 200:
                    return json.loads(response.read().decode())
                else:
                    error_content = response.read().decode()
                    logger.error(f"L·ªói API ({response.status}): {error_content}")
                    if response.status in [400, 401]:
                        return None
                    if response.status == 429:
                        time.sleep(2 ** attempt)
                    elif response.status >= 500:
                        time.sleep(1)
                    continue
                    
        except urllib.error.HTTPError as e:
            error_content = e.read().decode()
            if e.code in [400, 451]:
                logger.error(f"L·ªói {e.code}: {error_content}")
                return None
            else:
                logger.error(f"L·ªói HTTP ({e.code}): {e.reason}")
            
            if e.code == 401:
                return None
            if e.code == 429:
                time.sleep(2 ** attempt)
            elif e.code >= 500:
                time.sleep(1)
            continue
                
        except Exception as e:
            logger.error(f"L·ªói k·∫øt n·ªëi API (l·∫ßn {attempt + 1}): {str(e)}")
            time.sleep(1)
    
    logger.error(f"Kh√¥ng th·ªÉ th·ª±c hi·ªán y√™u c·∫ßu API sau {max_retries} l·∫ßn th·ª≠")
    return None

def get_all_usdt_pairs(limit=300):
    try:
        url = "https://fapi.binance.com/fapi/v1/exchangeInfo"
        data = binance_api_request(url)
        if not data:
            return []
        
        usdt_pairs = []
        for symbol_info in data.get('symbols', []):
            symbol = symbol_info.get('symbol', '')
            if symbol.endswith('USDT') and symbol_info.get('status') == 'TRADING':
                usdt_pairs.append(symbol)
        
        return usdt_pairs[:limit] if limit else usdt_pairs
        
    except Exception as e:
        logger.error(f"L·ªói l·∫•y danh s√°ch coin: {str(e)}")
        return []

def get_max_leverage(symbol, api_key, api_secret):
    try:
        url = "https://fapi.binance.com/fapi/v1/exchangeInfo"
        data = binance_api_request(url)
        if not data:
            return 0
        
        for s in data['symbols']:
            if s['symbol'] == symbol.upper():
                for f in s['filters']:
                    if f['filterType'] == 'LEVERAGE' and 'maxLeverage' in f:
                        return int(f['maxLeverage'])
                break
        return 0
    except Exception as e:
        logger.error(f"L·ªói l·∫•y ƒë√≤n b·∫©y {symbol}: {str(e)}")
        return 0

def get_step_size(symbol, api_key, api_secret):
    if not symbol:
        return 0.001
    url = "https://fapi.binance.com/fapi/v1/exchangeInfo"
    try:
        data = binance_api_request(url)
        if not data:
            return 0.001
        for s in data['symbols']:
            if s['symbol'] == symbol.upper():
                for f in s['filters']:
                    if f['filterType'] == 'LOT_SIZE':
                        return float(f['stepSize'])
    except Exception as e:
        logger.error(f"L·ªói l·∫•y step size: {str(e)}")
    return 0.001

def set_leverage(symbol, lev, api_key, api_secret):
    if not symbol:
        return False
    try:
        ts = int(time.time() * 1000)
        params = {
            "symbol": symbol.upper(),
            "leverage": lev,
            "timestamp": ts
        }
        query = urllib.parse.urlencode(params)
        sig = sign(query, api_secret)
        url = f"https://fapi.binance.com/fapi/v1/leverage?{query}&signature={sig}"
        headers = {'X-MBX-APIKEY': api_key}
        
        response = binance_api_request(url, method='POST', headers=headers)
        return response is not None and 'leverage' in response
    except Exception as e:
        logger.error(f"L·ªói set ƒë√≤n b·∫©y: {str(e)}")
        return False

def get_balance(api_key, api_secret):
    try:
        ts = int(time.time() * 1000)
        params = {"timestamp": ts}
        query = urllib.parse.urlencode(params)
        sig = sign(query, api_secret)
        url = f"https://fapi.binance.com/fapi/v2/account?{query}&signature={sig}"
        headers = {'X-MBX-APIKEY': api_key}
        
        data = binance_api_request(url, headers=headers)
        if not data:
            return None
            
        for asset in data['assets']:
            if asset['asset'] == 'USDT':
                return float(asset['availableBalance'])
        return 0
    except Exception as e:
        logger.error(f"L·ªói l·∫•y s·ªë d∆∞: {str(e)}")
        return None

def place_order(symbol, side, qty, api_key, api_secret):
    if not symbol:
        return None
    try:
        ts = int(time.time() * 1000)
        params = {
            "symbol": symbol.upper(),
            "side": side,
            "type": "MARKET",
            "quantity": qty,
            "timestamp": ts
        }
        query = urllib.parse.urlencode(params)
        sig = sign(query, api_secret)
        url = f"https://fapi.binance.com/fapi/v1/order?{query}&signature={sig}"
        headers = {'X-MBX-APIKEY': api_key}
        
        return binance_api_request(url, method='POST', headers=headers)
    except Exception as e:
        logger.error(f"L·ªói ƒë·∫∑t l·ªánh: {str(e)}")
    return None

def cancel_all_orders(symbol, api_key, api_secret):
    if not symbol:
        return False
    try:
        ts = int(time.time() * 1000)
        params = {"symbol": symbol.upper(), "timestamp": ts}
        query = urllib.parse.urlencode(params)
        sig = sign(query, api_secret)
        url = f"https://fapi.binance.com/fapi/v1/allOpenOrders?{query}&signature={sig}"
        headers = {'X-MBX-APIKEY': api_key}
        
        binance_api_request(url, method='DELETE', headers=headers)
        return True
    except Exception as e:
        logger.error(f"L·ªói h·ªßy l·ªánh: {str(e)}")
    return False

def get_current_price(symbol):
    if not symbol:
        return 0
    try:
        url = f"https://fapi.binance.com/fapi/v1/ticker/price?symbol={symbol.upper()}"
        data = binance_api_request(url)
        if data and 'price' in data:
            return float(data['price'])
        return 0
    except Exception as e:
        logger.error(f"L·ªói l·∫•y gi√° {symbol}: {str(e)}")
    return 0

def get_positions(symbol=None, api_key=None, api_secret=None):
    try:
        ts = int(time.time() * 1000)
        params = {"timestamp": ts}
        if symbol:
            params["symbol"] = symbol.upper()
        query = urllib.parse.urlencode(params)
        sig = sign(query, api_secret)
        url = f"https://fapi.binance.com/fapi/v2/positionRisk?{query}&signature={sig}"
        headers = {'X-MBX-APIKEY': api_key}
        
        positions = binance_api_request(url, headers=headers)
        return positions if positions else []
    except Exception as e:
        logger.error(f"L·ªói l·∫•y v·ªã th·∫ø: {str(e)}")
    return []

def get_1h_volatility(symbol):
    try:
        url = "https://fapi.binance.com/fapi/v1/klines"
        params = {
            'symbol': symbol.upper(),
            'interval': '1h',
            'limit': 2
        }
        data = binance_api_request(url, params=params)
        if not data or len(data) < 2:
            return 0
            
        prev_candle = data[0]
        current_candle = data[1]
        
        prev_close = float(prev_candle[4])
        current_close = float(current_candle[4])
        
        volatility = ((current_close - prev_close) / prev_close) * 100
        return volatility
        
    except Exception as e:
        logger.error(f"L·ªói t√≠nh bi·∫øn ƒë·ªông {symbol}: {str(e)}")
        return 0

# ========== COIN MANAGER M·ªöI ==========
class CoinManager:
    def __init__(self):
        self.active_coins = set()
        self.failed_coins = {}
        self._lock = threading.Lock()
    
    def register_coin(self, symbol):
        if not symbol:
            return
        with self._lock:
            self.active_coins.add(symbol.upper())
    
    def unregister_coin(self, symbol):
        if not symbol:
            return
        with self._lock:
            self.active_coins.discard(symbol.upper())
    
    def is_coin_active(self, symbol):
        if not symbol:
            return False
        with self._lock:
            return symbol.upper() in self.active_coins
    
    def get_active_coins(self):
        with self._lock:
            return list(self.active_coins)
    
    def add_failed_coin(self, symbol, duration=600):
        if not symbol:
            return
        with self._lock:
            self.failed_coins[symbol.upper()] = time.time() + duration
    
    def is_coin_failed(self, symbol):
        if not symbol:
            return True
        with self._lock:
            if symbol.upper() in self.failed_coins:
                if time.time() < self.failed_coins[symbol.upper()]:
                    return True
                else:
                    del self.failed_coins[symbol.upper()]
            return False
    
    def cleanup_expired_failed_coins(self):
        current_time = time.time()
        with self._lock:
            expired = [symbol for symbol, expire_time in self.failed_coins.items() if current_time > expire_time]
            for symbol in expired:
                del self.failed_coins[symbol]

# ========== VOLATILITY COIN FINDER M·ªöI ==========
class VolatilityCoinFinder:
    def __init__(self, api_key, api_secret, leverage):
        self.api_key = api_key
        self.api_secret = api_secret
        self.leverage = leverage
        self.eligible_coins = []
        self.last_update_time = 0
        self.update_interval = 300
        self._lock = threading.Lock()
        
    def update_eligible_coins(self):
        try:
            current_time = time.time()
            if current_time - self.last_update_time < self.update_interval and self.eligible_coins:
                return self.eligible_coins
                
            logger.info(f"üîÑ ƒêang c·∫≠p nh·∫≠t danh s√°ch coin v·ªõi ƒë√≤n b·∫©y {self.leverage}x...")
            
            all_symbols = get_all_usdt_pairs(limit=300)
            if not all_symbols:
                return []
            
            eligible = []
            
            with ThreadPoolExecutor(max_workers=5) as executor:
                future_to_symbol = {
                    executor.submit(get_max_leverage, symbol, self.api_key, self.api_secret): symbol 
                    for symbol in all_symbols
                }
                
                for future in as_completed(future_to_symbol):
                    symbol = future_to_symbol[future]
                    try:
                        max_lev = future.result()
                        if max_lev >= self.leverage:
                            eligible.append(symbol)
                    except Exception:
                        pass
                    time.sleep(0.1)
                    
            with self._lock:
                self.eligible_coins = eligible
                self.last_update_time = current_time
                
            logger.info(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t {len(eligible)} coin v·ªõi ƒë√≤n b·∫©y >= {self.leverage}x")
            return eligible
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói c·∫≠p nh·∫≠t danh s√°ch coin: {str(e)}")
            return []
    
    def find_most_volatile_coin(self, coin_manager, excluded_coins=None):
        try:
            eligible_coins = self.update_eligible_coins()
            if not eligible_coins:
                return None, None
                
            coin_manager.cleanup_expired_failed_coins()
                
            filtered_coins = []
            for coin in eligible_coins:
                if coin_manager.is_coin_active(coin):
                    continue
                if coin_manager.is_coin_failed(coin):
                    continue
                if excluded_coins and coin in excluded_coins:
                    continue
                filtered_coins.append(coin)
                
            if not filtered_coins:
                return None, None
                
            volatilities = []
            
            with ThreadPoolExecutor(max_workers=3) as executor:
                future_to_coin = {
                    executor.submit(get_1h_volatility, coin): coin 
                    for coin in filtered_coins[:20]
                }
                
                for future in as_completed(future_to_coin):
                    coin = future_to_coin[future]
                    try:
                        volatility = future.result()
                        if volatility != 0:
                            volatilities.append((coin, abs(volatility), volatility))
                        time.sleep(0.3)
                    except Exception:
                        continue
            
            if not volatilities:
                return None, None
                
            volatilities.sort(key=lambda x: x[1], reverse=True)
            best_coin, best_volatility, raw_volatility = volatilities[0]
            
            direction = "SELL" if raw_volatility > 0 else "BUY"
            
            logger.info(f"üéØ Coin bi·∫øn ƒë·ªông nh·∫•t: {best_coin} - Bi·∫øn ƒë·ªông: {raw_volatility:.2f}% - H∆∞·ªõng: {direction}")
            return best_coin, direction
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói t√¨m coin bi·∫øn ƒë·ªông: {str(e)}")
            return None, None

# ========== WEBSOCKET MANAGER ==========
class WebSocketManager:
    def __init__(self):
        self.connections = {}
        self.executor = ThreadPoolExecutor(max_workers=10)
        self._lock = threading.Lock()
        self._stop_event = threading.Event()
        
    def add_symbol(self, symbol, callback):
        if not symbol:
            return
        symbol = symbol.upper()
        with self._lock:
            if symbol not in self.connections:
                self._create_connection(symbol, callback)
                
    def _create_connection(self, symbol, callback):
        if self._stop_event.is_set():
            return
        stream = f"{symbol.lower()}@trade"
        url = f"wss://fstream.binance.com/ws/{stream}"
        
        def on_message(ws, message):
            try:
                data = json.loads(message)
                if 'p' in data:
                    price = float(data['p'])
                    self.executor.submit(callback, price)
            except Exception as e:
                logger.error(f"L·ªói WebSocket {symbol}: {str(e)}")
                
        def on_error(ws, error):
            logger.error(f"L·ªói WebSocket {symbol}: {str(error)}")
            
        def on_close(ws, close_status_code, close_msg):
            logger.info(f"WebSocket ƒë√≥ng {symbol}")
            
        ws = websocket.WebSocketApp(
            url,
            on_message=on_message,
            on_error=on_error,
            on_close=on_close
        )
        
        thread = threading.Thread(target=ws.run_forever, daemon=True)
        thread.start()
        
        self.connections[symbol] = {
            'ws': ws,
            'thread': thread,
            'callback': callback
        }
        
    def remove_symbol(self, symbol):
        if not symbol:
            return
        symbol = symbol.upper()
        with self._lock:
            if symbol in self.connections:
                try:
                    self.connections[symbol]['ws'].close()
                except:
                    pass
                del self.connections[symbol]
                
    def stop(self):
        self._stop_event.set()
        for symbol in list(self.connections.keys()):
            self.remove_symbol(symbol)

# ========== BASE BOT ƒê√É S·ª¨A ==========
class BaseBot:
    def __init__(self, symbol, lev, percent, tp, sl, roi_trigger, ws_manager, api_key, api_secret, 
                 telegram_bot_token, telegram_chat_id, strategy_name, bot_id=None):
        
        self.symbol = symbol.upper() if symbol else None
        self.lev = lev
        self.percent = percent
        self.tp = tp
        self.sl = sl
        self.roi_trigger = roi_trigger
        self.ws_manager = ws_manager
        self.api_key = api_key
        self.api_secret = api_secret
        self.telegram_bot_token = telegram_bot_token
        self.telegram_chat_id = telegram_chat_id
        self.strategy_name = strategy_name
        self.bot_id = bot_id or f"{strategy_name}_{int(time.time())}_{random.randint(1000, 9999)}"
        
        self.status = "searching"
        self.side = ""
        self.qty = 0
        self.entry = 0
        self.current_price = 0
        self.position_open = False
        self._stop = False
        
        self.last_trade_time = 0
        self.last_close_time = 0
        
        self.coin_manager = CoinManager()
        self.coin_finder = VolatilityCoinFinder(api_key, api_secret, lev)
        
        self.next_side = None
        self.last_find_time = 0
        self.find_interval = 30
        
        self.check_position_status()
        if self.symbol:
            self.ws_manager.add_symbol(self.symbol, self._handle_price_update)
        
        self.thread = threading.Thread(target=self._run, daemon=True)
        self.thread.start()
        
        if self.symbol:
            self.log(f"üü¢ Bot {strategy_name} kh·ªüi ƒë·ªông | {self.symbol} | ƒêB: {lev}x | V·ªën: {percent}%")
        else:
            self.log(f"üü¢ Bot {strategy_name} kh·ªüi ƒë·ªông | ƒêang t√¨m coin... | ƒêB: {lev}x | V·ªën: {percent}%")

    def check_position_status(self):
        if not self.symbol:
            return
            
        try:
            positions = get_positions(self.symbol, self.api_key, self.api_secret)
            if not positions:
                self._reset_position()
                return
            
            for pos in positions:
                if pos['symbol'] == self.symbol:
                    position_amt = float(pos.get('positionAmt', 0))
                    if abs(position_amt) > 0:
                        self.position_open = True
                        self.status = "open"
                        self.side = "BUY" if position_amt > 0 else "SELL"
                        self.qty = position_amt
                        self.entry = float(pos.get('entryPrice', 0))
                        return
                    else:
                        self._reset_position()
                        return
                        
            self._reset_position()
                
        except Exception as e:
            self.log(f"‚ùå L·ªói ki·ªÉm tra v·ªã th·∫ø: {str(e)}")

    def _reset_position(self):
        self.position_open = False
        self.status = "waiting"
        self.side = ""
        self.qty = 0
        self.entry = 0

    def find_and_set_coin(self):
        try:
            current_time = time.time()
            if current_time - self.last_find_time < self.find_interval:
                return False
            
            self.last_find_time = current_time
            
            active_coins = self.coin_manager.get_active_coins()
            
            new_symbol, new_direction = self.coin_finder.find_most_volatile_coin(
                coin_manager=self.coin_manager,
                excluded_coins=active_coins
            )
            
            if new_symbol and new_direction:
                max_lev = get_max_leverage(new_symbol, self.api_key, self.api_secret)
                if max_lev >= self.lev:
                    self.coin_manager.register_coin(new_symbol)
                    
                    if self.symbol:
                        self.ws_manager.remove_symbol(self.symbol)
                        self.coin_manager.unregister_coin(self.symbol)
                    
                    self.symbol = new_symbol
                    self.ws_manager.add_symbol(new_symbol, self._handle_price_update)
                    self.status = "waiting"
                    self.next_side = new_direction
                    
                    self.log(f"üéØ ƒê√£ t√¨m th·∫•y coin: {new_symbol} - H∆∞·ªõng: {new_direction}")
                    return True
                else:
                    self.coin_manager.add_failed_coin(new_symbol, duration=600)
            
            return False
            
        except Exception as e:
            self.log(f"‚ùå L·ªói t√¨m coin: {str(e)}")
            return False

    def verify_leverage_and_switch(self):
        if not self.symbol:
            return True
            
        try:
            current_leverage = get_max_leverage(self.symbol, self.api_key, self.api_secret)
            if current_leverage < self.lev:
                self.coin_manager.add_failed_coin(self.symbol, duration=600)
                return False

            if not set_leverage(self.symbol, self.lev, self.api_key, self.api_secret):
                self.coin_manager.add_failed_coin(self.symbol, duration=600)
                return False
                
            return True
            
        except Exception as e:
            self.coin_manager.add_failed_coin(self.symbol, duration=600)
            return False

    def _run(self):
        while not self._stop:
            try:
                current_time = time.time()
                
                if current_time - getattr(self, '_last_leverage_check', 0) > 60:
                    if not self.verify_leverage_and_switch():
                        if self.symbol:
                            self._cleanup_symbol()
                        time.sleep(1)
                        continue
                    self._last_leverage_check = current_time
                
                if not self.position_open:
                    if not self.symbol:
                        if self.find_and_set_coin():
                            self.log("‚úÖ ƒê√£ t√¨m th·∫•y coin m·ªõi")
                        time.sleep(2)
                        continue
                    
                    if self.symbol and self.next_side:
                        if current_time - self.last_trade_time > 3 and current_time - self.last_close_time > 3:
                            if self.open_position(self.next_side):
                                self.last_trade_time = current_time
                                self.next_side = None
                            else:
                                time.sleep(1)
                        else:
                            time.sleep(1)
                    else:
                        time.sleep(1)
                
                self.check_tp_sl()
                time.sleep(1)
            
            except Exception as e:
                self.log(f"‚ùå L·ªói h·ªá th·ªëng: {str(e)}")
                time.sleep(1)

    def _handle_price_update(self, price):
        self.current_price = price

    def stop(self):
        self._stop = True
        if self.symbol:
            self.ws_manager.remove_symbol(self.symbol)
        if self.symbol:
            self.coin_manager.unregister_coin(self.symbol)
        self.log(f"üî¥ Bot d·ª´ng")

    def open_position(self, side):
        if side not in ["BUY", "SELL"]:
            self._cleanup_symbol()
            return False
            
        try:
            self.check_position_status()
            
            if self.position_open:
                return False
    
            if not self.verify_leverage_and_switch():
                self._cleanup_symbol()
                return False
    
            balance = get_balance(self.api_key, self.api_secret)
            if balance is None or balance <= 0:
                return False
    
            current_price = get_current_price(self.symbol)
            if current_price <= 0:
                self._cleanup_symbol()
                return False
    
            step_size = get_step_size(self.symbol, self.api_key, self.api_secret)
            usd_amount = balance * (self.percent / 100)
            qty = (usd_amount * self.lev) / current_price
            
            if step_size > 0:
                qty = math.floor(qty / step_size) * step_size
                qty = round(qty, 8)
    
            if qty <= 0:
                self._cleanup_symbol()
                return False
    
            cancel_all_orders(self.symbol, self.api_key, self.api_secret)
            time.sleep(0.2)
            
            result = place_order(self.symbol, side, qty, self.api_key, self.api_secret)
            
            if result and 'orderId' in result:
                executed_qty = float(result.get('executedQty', 0))
                avg_price = float(result.get('avgPrice', current_price))
                
                if executed_qty >= 0:
                    self.entry = avg_price
                    self.side = side
                    self.qty = executed_qty if side == "BUY" else -executed_qty
                    self.position_open = True
                    self.status = "open"
                    
                    message = (
                        f"‚úÖ <b>ƒê√É M·ªû V·ªä TH·∫æ {self.symbol}</b>\n"
                        f"ü§ñ Chi·∫øn l∆∞·ª£c: {self.strategy_name}\n"
                        f"üìå H∆∞·ªõng: {side}\n"
                        f"üè∑Ô∏è Gi√° v√†o: {self.entry:.4f}\n"
                        f"üìä Kh·ªëi l∆∞·ª£ng: {executed_qty:.4f}\n"
                        f"üí∞ ƒê√≤n b·∫©y: {self.lev}x\n"
                        f"üéØ TP: {self.tp}% | üõ°Ô∏è SL: {self.sl}%"
                    )
                    
                    self.log(message)
                    return True
                else:
                    self._cleanup_symbol()
                    return False
            else:
                self._cleanup_symbol()
                return False
                        
        except Exception as e:
            self.log(f"‚ùå L·ªói m·ªü l·ªánh: {str(e)}")
            self._cleanup_symbol()
            return False
    
    def _cleanup_symbol(self):
        if self.symbol:
            try:
                self.ws_manager.remove_symbol(self.symbol)
                self.coin_manager.unregister_coin(self.symbol)
            except:
                pass
            
            self.symbol = None
        
        self.status = "searching"
        self.position_open = False
        self.side = ""
        self.qty = 0
        self.entry = 0
        self.next_side = None

    def close_position(self, reason=""):
        try:
            self.check_position_status()
            
            if not self.position_open or abs(self.qty) <= 0:
                return False

            close_side = "SELL" if self.side == "BUY" else "BUY"
            close_qty = abs(self.qty)
            
            cancel_all_orders(self.symbol, self.api_key, self.api_secret)
            time.sleep(0.5)
            
            result = place_order(self.symbol, close_side, close_qty, self.api_key, self.api_secret)
            if result and 'orderId' in result:
                current_price = get_current_price(self.symbol)
                pnl = 0
                if self.entry > 0:
                    if self.side == "BUY":
                        pnl = (current_price - self.entry) * abs(self.qty)
                    else:
                        pnl = (self.entry - current_price) * abs(self.qty)
                
                message = (
                    f"‚õî <b>ƒê√É ƒê√ìNG V·ªä TH·∫æ {self.symbol}</b>\n"
                    f"üìå L√Ω do: {reason}\n"
                    f"üí∞ PnL: {pnl:.2f} USDT"
                )
                self.log(message)
                
                self.next_side = "BUY" if self.side == "SELL" else "SELL"
                self._reset_position()
                self.last_close_time = time.time()
                
                return True
            else:
                return False
                
        except Exception as e:
            self.log(f"‚ùå L·ªói ƒë√≥ng l·ªánh: {str(e)}")
            return False

    def check_tp_sl(self):
        if not self.symbol or not self.position_open or self.entry <= 0:
            return

        current_price = get_current_price(self.symbol)
        if current_price <= 0:
            return

        if self.side == "BUY":
            profit = (current_price - self.entry) * abs(self.qty)
        else:
            profit = (self.entry - current_price) * abs(self.qty)
            
        invested = self.entry * abs(self.qty) / self.lev
        if invested <= 0:
            return
            
        roi = (profit / invested) * 100

        if self.tp is not None and roi >= self.tp:
            self.close_position(f"‚úÖ ƒê·∫°t TP {self.tp}% (ROI: {roi:.2f}%)")
        elif self.sl is not None and self.sl > 0 and roi <= -self.sl:
            self.close_position(f"‚ùå ƒê·∫°t SL {self.sl}% (ROI: {roi:.2f}%)")

    def log(self, message):
        logger.info(f"[{self.bot_id}] {message}")
        if self.telegram_bot_token and self.telegram_chat_id:
            send_telegram(f"<b>{self.bot_id}</b>: {message}", 
                         bot_token=self.telegram_bot_token, 
                         default_chat_id=self.telegram_chat_id)

# ========== VOLATILITY BOT ==========
class VolatilityBot(BaseBot):
    def __init__(self, symbol, lev, percent, tp, sl, roi_trigger, ws_manager, api_key, api_secret, 
                 telegram_bot_token, telegram_chat_id, bot_id=None):
        super().__init__(symbol, lev, percent, tp, sl, roi_trigger, ws_manager, api_key, api_secret,
                        telegram_bot_token, telegram_chat_id, "Volatility-Reversal", bot_id=bot_id)

# ========== BOT MANAGER M·ªöI HO√ÄN TO√ÄN ==========
class BotManager:
    def __init__(self, api_key=None, api_secret=None, telegram_bot_token=None, telegram_chat_id=None):
        self.ws_manager = WebSocketManager()
        self.bots = {}
        self.running = True
        self.user_states = {}
        
        self.api_key = api_key
        self.api_secret = api_secret
        self.telegram_bot_token = telegram_bot_token
        self.telegram_chat_id = telegram_chat_id
        
        if api_key and api_secret:
            self._verify_api_connection()
            self.log("üü¢ H·ªÜ TH·ªêNG BOT BI·∫æN ƒê·ªòNG ƒê√É KH·ªûI ƒê·ªòNG")
            
            self.telegram_thread = threading.Thread(target=self._telegram_listener, daemon=True)
            self.telegram_thread.start()
            
            if self.telegram_chat_id:
                self.send_main_menu(self.telegram_chat_id)

    def _verify_api_connection(self):
        try:
            balance = get_balance(self.api_key, self.api_secret)
            if balance is None:
                self.log("‚ùå L·ªñI: Kh√¥ng th·ªÉ k·∫øt n·ªëi Binance API")
                return False
            else:
                self.log(f"‚úÖ K·∫øt n·ªëi Binance th√†nh c√¥ng! S·ªë d∆∞: {balance:.2f} USDT")
                return True
        except Exception as e:
            self.log(f"‚ùå L·ªói ki·ªÉm tra k·∫øt n·ªëi: {str(e)}")
            return False

    def get_position_summary(self):
        try:
            all_positions = get_positions(api_key=self.api_key, api_secret=self.api_secret)
            
            binance_positions = []
            for pos in all_positions:
                position_amt = float(pos.get('positionAmt', 0))
                if position_amt != 0:
                    symbol = pos.get('symbol', 'UNKNOWN')
                    entry_price = float(pos.get('entryPrice', 0))
                    side = "LONG" if position_amt > 0 else "SHORT"
                    pnl = float(pos.get('unRealizedProfit', 0))
                    
                    binance_positions.append({
                        'symbol': symbol,
                        'side': side,
                        'size': abs(position_amt),
                        'entry': entry_price,
                        'pnl': pnl
                    })
        
            bot_details = []
            searching_bots = 0
            trading_bots = 0
            
            for bot_id, bot in self.bots.items():
                bot_info = {
                    'bot_id': bot_id,
                    'symbol': bot.symbol or 'ƒêang t√¨m...',
                    'status': bot.status,
                    'side': bot.side,
                    'leverage': bot.lev,
                    'percent': bot.percent
                }
                bot_details.append(bot_info)
                
                if bot.status == "searching":
                    searching_bots += 1
                elif bot.status == "open":
                    trading_bots += 1
            
            summary = "üìä **TH·ªêNG K√ä H·ªÜ TH·ªêNG**\n\n"
            
            balance = get_balance(self.api_key, self.api_secret)
            if balance is not None:
                summary += f"üí∞ **S·ªê D∆Ø**: {balance:.2f} USDT\n\n"
            
            summary += f"ü§ñ **BOT H·ªÜ TH·ªêNG**: {len(self.bots)} bots\n"
            summary += f"   üîç ƒêang t√¨m coin: {searching_bots}\n"
            summary += f"   üìà ƒêang trade: {trading_bots}\n\n"
            
            if bot_details:
                summary += "üìã **CHI TI·∫æT BOT**:\n"
                for bot in bot_details[:6]:
                    symbol_info = bot['symbol'] if bot['symbol'] != 'ƒêang t√¨m...' else 'üîç ƒêang t√¨m'
                    status = "üîç T√¨m coin" if bot['status'] == "searching" else "üü¢ ƒêang trade"
                    
                    summary += f"   üîπ {bot['bot_id'][:12]}...\n"
                    summary += f"      üìä {symbol_info} | {status}\n"
                    summary += f"      üí∞ ƒêB: {bot['leverage']}x | V·ªën: {bot['percent']}%\n\n"
            
            return summary
                    
        except Exception as e:
            return f"‚ùå L·ªói th·ªëng k√™: {str(e)}"

    def log(self, message):
        logger.info(f"[SYSTEM] {message}")
        if self.telegram_bot_token and self.telegram_chat_id:
            send_telegram(f"<b>SYSTEM</b>: {message}", 
                         bot_token=self.telegram_bot_token, 
                         default_chat_id=self.telegram_chat_id)

    def send_main_menu(self, chat_id):
        welcome = (
            "ü§ñ <b>BOT GIAO D·ªäCH FUTURES - PHI√äN B·∫¢N BI·∫æN ƒê·ªòNG</b>\n\n"
            "üéØ <b>CHI·∫æN THU·∫¨T ƒê·∫¢O CHI·ªÄU BI·∫æN ƒê·ªòNG</b>\n\n"
            "üìä <b>Nguy√™n t·∫Øc ho·∫°t ƒë·ªông:</b>\n"
            "‚Ä¢ T·ª± ƒë·ªông l·ªçc coin c√≥ ƒë√≤n b·∫©y ph√π h·ª£p\n"
            "‚Ä¢ Ph√¢n t√≠ch bi·∫øn ƒë·ªông gi√° 1 gi·ªù\n"
            "‚Ä¢ Ch·ªçn coin bi·∫øn ƒë·ªông m·∫°nh nh·∫•t\n"
            "‚Ä¢ ƒêI NG∆Ø·ª¢C H∆Ø·ªöNG bi·∫øn ƒë·ªông\n\n"
            "üîÑ <b>C∆° ch·∫ø th√¥ng minh:</b>\n"
            "‚Ä¢ T·ª± ƒë·ªông t√¨m coin m·ªõi khi c√≥ l·ªói\n"
            "‚Ä¢ Tr√°nh tr√πng l·∫∑p gi·ªØa c√°c bot\n"
            "‚Ä¢ Qu·∫£n l√Ω r·ªßi ro v·ªõi TP/SL"
        )
        send_telegram(welcome, chat_id, create_main_menu(),
                     bot_token=self.telegram_bot_token, 
                     default_chat_id=self.telegram_chat_id)

    def add_bot(self, symbol, lev, percent, tp, sl, roi_trigger, strategy_type, bot_count=1, **kwargs):
        if sl == 0:
            sl = None
            
        if not self.api_key or not self.api_secret:
            return False
        
        if not self._verify_api_connection():
            return False
        
        bot_mode = kwargs.get('bot_mode', 'static')
        created_count = 0
        
        for i in range(bot_count):
            try:
                if bot_mode == 'static' and symbol:
                    bot_id = f"{symbol}_{strategy_type}_{i}_{int(time.time())}"
                    
                    if bot_id in self.bots:
                        continue
                    
                    bot = VolatilityBot(symbol, lev, percent, tp, sl, roi_trigger, self.ws_manager,
                                      self.api_key, self.api_secret, self.telegram_bot_token, 
                                      self.telegram_chat_id, bot_id=bot_id)
                    
                else:
                    bot_id = f"DYNAMIC_{strategy_type}_{i}_{int(time.time())}"
                    
                    if bot_id in self.bots:
                        continue
                    
                    bot = VolatilityBot(None, lev, percent, tp, sl, roi_trigger, self.ws_manager,
                                      self.api_key, self.api_secret, self.telegram_bot_token,
                                      self.telegram_chat_id, bot_id=bot_id)
                
                self.bots[bot_id] = bot
                created_count += 1
                
            except Exception as e:
                continue
        
        if created_count > 0:
            roi_info = f" | üéØ ROI Trigger: {roi_trigger}%" if roi_trigger else ""
            
            success_msg = (
                f"‚úÖ <b>ƒê√É T·∫†O {created_count} BOT BI·∫æN ƒê·ªòNG</b>\n\n"
                f"üí∞ ƒê√≤n b·∫©y: {lev}x\n"
                f"üìà % S·ªë d∆∞: {percent}%\n"
                f"üéØ TP: {tp}%\n"
                f"üõ°Ô∏è SL: {sl if sl is not None else 'T·∫Øt'}%{roi_info}"
            )
            
            if bot_mode == 'static' and symbol:
                success_msg += f"\nüîó Coin: {symbol}"
            else:
                success_msg += f"\nüîó Coin: T·ª± ƒë·ªông t√¨m ki·∫øm"
            
            self.log(success_msg)
            return True
        else:
            return False

    def stop_bot(self, bot_id):
        bot = self.bots.get(bot_id)
        if bot:
            bot.stop()
            del self.bots[bot_id]
            self.log(f"‚õî ƒê√£ d·ª´ng bot {bot_id}")
            return True
        return False

    def stop_all(self):
        self.log("‚õî ƒêang d·ª´ng t·∫•t c·∫£ bot...")
        for bot_id in list(self.bots.keys()):
            self.stop_bot(bot_id)
        self.ws_manager.stop()
        self.running = False
        self.log("üî¥ H·ªá th·ªëng ƒë√£ d·ª´ng")

    def _telegram_listener(self):
        last_update_id = 0
        
        while self.running and self.telegram_bot_token:
            try:
                url = f"https://api.telegram.org/bot{self.telegram_bot_token}/getUpdates?offset={last_update_id+1}&timeout=30"
                response = requests.get(url, timeout=35)
                
                if response.status_code == 200:
                    data = response.json()
                    if data.get('ok'):
                        for update in data['result']:
                            update_id = update['update_id']
                            message = update.get('message', {})
                            chat_id = str(message.get('chat', {}).get('id'))
                            text = message.get('text', '').strip()
                            
                            if chat_id != self.telegram_chat_id:
                                continue
                            
                            if update_id > last_update_id:
                                last_update_id = update_id
                            
                            self._handle_telegram_message(chat_id, text)
                time.sleep(10)
                
            except Exception as e:
                time.sleep(10)

    def _handle_telegram_message(self, chat_id, text):
        user_state = self.user_states.get(chat_id, {})
        current_step = user_state.get('step')
        
        if current_step == 'waiting_bot_count':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy th√™m bot", chat_id, create_main_menu(),
                            self.telegram_bot_token, self.telegram_chat_id)
            else:
                try:
                    bot_count = int(text)
                    if 1 <= bot_count <= 10:
                        user_state['bot_count'] = bot_count
                        user_state['step'] = 'waiting_bot_mode'
                        
                        send_telegram(
                            f"ü§ñ S·ªë l∆∞·ª£ng bot: {bot_count}\n\nCh·ªçn ch·∫ø ƒë·ªô bot:",
                            chat_id,
                            create_bot_mode_keyboard(),
                            self.telegram_bot_token, self.telegram_chat_id
                        )
                    else:
                        send_telegram("‚ö†Ô∏è S·ªë l∆∞·ª£ng bot ph·∫£i t·ª´ 1 ƒë·∫øn 10:",
                                    chat_id, create_bot_count_keyboard(),
                                    self.telegram_bot_token, self.telegram_chat_id)
                except ValueError:
                    send_telegram("‚ö†Ô∏è Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá:",
                                chat_id, create_bot_count_keyboard(),
                                self.telegram_bot_token, self.telegram_chat_id)

        elif current_step == 'waiting_bot_mode':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy th√™m bot", chat_id, create_main_menu(),
                            self.telegram_bot_token, self.telegram_chat_id)
            elif text in ["ü§ñ Bot Tƒ©nh - Coin c·ª• th·ªÉ", "üîÑ Bot ƒê·ªông - T·ª± t√¨m coin"]:
                user_state['bot_mode'] = 'static' if text == "ü§ñ Bot Tƒ©nh - Coin c·ª• th·ªÉ" else 'dynamic'
                user_state['step'] = 'waiting_strategy'
                send_telegram(
                    "Ch·ªçn chi·∫øn l∆∞·ª£c:",
                    chat_id,
                    create_strategy_keyboard(),
                    self.telegram_bot_token, self.telegram_chat_id
                )

        elif current_step == 'waiting_strategy':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy th√™m bot", chat_id, create_main_menu(),
                            self.telegram_bot_token, self.telegram_chat_id)
            elif text == "üìä Volatility System":
                user_state['strategy'] = "Volatility-Reversal"
                user_state['step'] = 'waiting_leverage'
                
                send_telegram(
                    "Ch·ªçn ƒë√≤n b·∫©y:",
                    chat_id,
                    create_leverage_keyboard(),
                    self.telegram_bot_token, self.telegram_chat_id
                )

        elif current_step == 'waiting_leverage':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy th√™m bot", chat_id, create_main_menu(),
                            self.telegram_bot_token, self.telegram_chat_id)
            else:
                try:
                    if text.endswith('x'):
                        lev_text = text[:-1]
                    else:
                        lev_text = text

                    leverage = int(lev_text)
                    if 1 <= leverage <= 100:
                        user_state['leverage'] = leverage
                        user_state['step'] = 'waiting_percent'
                        
                        send_telegram(
                            f"üí∞ ƒê√≤n b·∫©y: {leverage}x\n\nCh·ªçn % s·ªë d∆∞:",
                            chat_id,
                            create_percent_keyboard(),
                            self.telegram_bot_token, self.telegram_chat_id
                        )
                    else:
                        send_telegram("‚ö†Ô∏è ƒê√≤n b·∫©y ph·∫£i t·ª´ 1 ƒë·∫øn 100:",
                                    chat_id, create_leverage_keyboard(),
                                    self.telegram_bot_token, self.telegram_chat_id)
                except ValueError:
                    send_telegram("‚ö†Ô∏è Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá:",
                                chat_id, create_leverage_keyboard(),
                                self.telegram_bot_token, self.telegram_chat_id)

        elif current_step == 'waiting_percent':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy th√™m bot", chat_id, create_main_menu(),
                            self.telegram_bot_token, self.telegram_chat_id)
            else:
                try:
                    percent = float(text)
                    if 0 < percent <= 100:
                        user_state['percent'] = percent
                        user_state['step'] = 'waiting_tp'
                        
                        send_telegram(
                            f"üìä % S·ªë d∆∞: {percent}%\n\nCh·ªçn Take Profit (%):",
                            chat_id,
                            create_tp_keyboard(),
                            self.telegram_bot_token, self.telegram_chat_id
                        )
                    else:
                        send_telegram("‚ö†Ô∏è % s·ªë d∆∞ ph·∫£i t·ª´ 0.1 ƒë·∫øn 100:",
                                    chat_id, create_percent_keyboard(),
                                    self.telegram_bot_token, self.telegram_chat_id)
                except ValueError:
                    send_telegram("‚ö†Ô∏è Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá:",
                                chat_id, create_percent_keyboard(),
                                self.telegram_bot_token, self.telegram_chat_id)

        elif current_step == 'waiting_tp':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy th√™m bot", chat_id, create_main_menu(),
                            self.telegram_bot_token, self.telegram_chat_id)
            else:
                try:
                    tp = float(text)
                    if tp > 0:
                        user_state['tp'] = tp
                        user_state['step'] = 'waiting_sl'
                        
                        send_telegram(
                            f"üéØ Take Profit: {tp}%\n\nCh·ªçn Stop Loss (%):",
                            chat_id,
                            create_sl_keyboard(),
                            self.telegram_bot_token, self.telegram_chat_id
                        )
                    else:
                        send_telegram("‚ö†Ô∏è Take Profit ph·∫£i l·ªõn h∆°n 0:",
                                    chat_id, create_tp_keyboard(),
                                    self.telegram_bot_token, self.telegram_chat_id)
                except ValueError:
                    send_telegram("‚ö†Ô∏è Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá:",
                                chat_id, create_tp_keyboard(),
                                self.telegram_bot_token, self.telegram_chat_id)

        elif current_step == 'waiting_sl':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy th√™m bot", chat_id, create_main_menu(),
                            self.telegram_bot_token, self.telegram_chat_id)
            else:
                try:
                    sl = float(text)
                    if sl >= 0:
                        user_state['sl'] = sl
                        
                        strategy = user_state.get('strategy')
                        bot_mode = user_state.get('bot_mode', 'static')
                        leverage = user_state.get('leverage')
                        percent = user_state.get('percent')
                        tp = user_state.get('tp')
                        sl = user_state.get('sl')
                        symbol = user_state.get('symbol')
                        bot_count = user_state.get('bot_count', 1)
                        
                        success = self.add_bot(
                            symbol=symbol,
                            lev=leverage,
                            percent=percent,
                            tp=tp,
                            sl=sl,
                            roi_trigger=None,
                            strategy_type=strategy,
                            bot_mode=bot_mode,
                            bot_count=bot_count
                        )
                        
                        if success:
                            send_telegram("‚úÖ ƒê√£ t·∫°o bot th√†nh c√¥ng!", chat_id, create_main_menu(),
                                        self.telegram_bot_token, self.telegram_chat_id)
                        else:
                            send_telegram("‚ùå C√≥ l·ªói khi t·∫°o bot", chat_id, create_main_menu(),
                                        self.telegram_bot_token, self.telegram_chat_id)
                        
                        self.user_states[chat_id] = {}
                        
                    else:
                        send_telegram("‚ö†Ô∏è Stop Loss ph·∫£i >= 0:",
                                    chat_id, create_sl_keyboard(),
                                    self.telegram_bot_token, self.telegram_chat_id)
                except ValueError:
                    send_telegram("‚ö†Ô∏è Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá:",
                                chat_id, create_sl_keyboard(),
                                self.telegram_bot_token, self.telegram_chat_id)

        elif text == "‚ûï Th√™m Bot":
            self.user_states[chat_id] = {'step': 'waiting_bot_count'}
            balance = get_balance(self.api_key, self.api_secret)
            if balance is None:
                send_telegram("‚ùå L·ªñI K·∫æT N·ªêI BINANCE", chat_id,
                            bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
                return
            
            send_telegram(
                f"üí∞ S·ªë d∆∞: {balance:.2f} USDT\n\nCh·ªçn s·ªë l∆∞·ª£ng bot:",
                chat_id,
                create_bot_count_keyboard(),
                self.telegram_bot_token, self.telegram_chat_id
            )
        
        elif text == "üìä Danh s√°ch Bot":
            if not self.bots:
                send_telegram("ü§ñ Kh√¥ng c√≥ bot n√†o ƒëang ch·∫°y", chat_id,
                            bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
            else:
                message = "ü§ñ <b>DANH S√ÅCH BOT ƒêANG CH·∫†Y</b>\n\n"
                
                for bot_id, bot in self.bots.items():
                    status = "üîç ƒêang t√¨m coin" if bot.status == "searching" else "üü¢ ƒêang trade"
                    symbol_info = bot.symbol if bot.symbol else "ƒêang t√¨m..."
                    message += f"üîπ {bot_id}\n"
                    message += f"   üìä {symbol_info} | {status}\n"
                    message += f"   üí∞ ƒêB: {bot.lev}x | V·ªën: {bot.percent}%\n\n"
                
                send_telegram(message, chat_id,
                            bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
        
        elif text == "üìä Th·ªëng k√™":
            summary = self.get_position_summary()
            send_telegram(summary, chat_id,
                         bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
        
        elif text == "‚õî D·ª´ng Bot":
            if not self.bots:
                send_telegram("ü§ñ Kh√¥ng c√≥ bot n√†o ƒëang ch·∫°y", chat_id,
                            bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
            else:
                keyboard = []
                for bot_id in self.bots.keys():
                    keyboard.append([{"text": f"‚õî {bot_id}"}])
                
                keyboard.append([{"text": "‚õî D·ª™NG T·∫§T C·∫¢"}])
                keyboard.append([{"text": "‚ùå H·ªßy b·ªè"}])
                
                send_telegram(
                    "Ch·ªçn bot ƒë·ªÉ d·ª´ng:", 
                    chat_id, 
                    {"keyboard": keyboard, "resize_keyboard": True, "one_time_keyboard": True},
                    self.telegram_bot_token, self.telegram_chat_id
                )
        
        elif text.startswith("‚õî "):
            bot_id = text.replace("‚õî ", "").strip()
            if bot_id == "D·ª™NG T·∫§T C·∫¢":
                self.stop_all()
                send_telegram("‚õî ƒê√£ d·ª´ng t·∫•t c·∫£ bot", chat_id, create_main_menu(),
                            self.telegram_bot_token, self.telegram_chat_id)
            elif self.stop_bot(bot_id):
                send_telegram(f"‚õî ƒê√£ d·ª´ng bot {bot_id}", chat_id, create_main_menu(),
                            self.telegram_bot_token, self.telegram_chat_id)
            else:
                send_telegram(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y bot {bot_id}", chat_id, create_main_menu(),
                            self.telegram_bot_token, self.telegram_chat_id)
        
        elif text == "üí∞ S·ªë d∆∞":
            balance = get_balance(self.api_key, self.api_secret)
            if balance is None:
                send_telegram("‚ùå L·ªói k·∫øt n·ªëi Binance", chat_id,
                            bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
            else:
                send_telegram(f"üí∞ S·ªë d∆∞: {balance:.2f} USDT", chat_id,
                            bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
        
        elif text == "üìà V·ªã th·∫ø":
            positions = get_positions(api_key=self.api_key, api_secret=self.api_secret)
            if not positions:
                send_telegram("üì≠ Kh√¥ng c√≥ v·ªã th·∫ø n√†o", chat_id,
                            bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
            else:
                message = "üìà <b>V·ªä TH·∫æ ƒêANG M·ªû</b>\n\n"
                for pos in positions:
                    position_amt = float(pos.get('positionAmt', 0))
                    if position_amt != 0:
                        symbol = pos.get('symbol', 'UNKNOWN')
                        entry = float(pos.get('entryPrice', 0))
                        side = "LONG" if position_amt > 0 else "SHORT"
                        pnl = float(pos.get('unRealizedProfit', 0))
                        
                        message += (
                            f"üîπ {symbol} | {side}\n"
                            f"üí∞ PnL: {pnl:.2f} USDT\n\n"
                        )
                
                send_telegram(message, chat_id,
                            bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
        
        elif text == "üéØ Chi·∫øn l∆∞·ª£c":
            strategy_info = (
                "üéØ <b>CHI·∫æN THU·∫¨T ƒê·∫¢O CHI·ªÄU BI·∫æN ƒê·ªòNG</b>\n\n"
                "üìä T·ª± ƒë·ªông l·ªçc coin c√≥ ƒë√≤n b·∫©y ph√π h·ª£p\n"
                "üìà Ph√¢n t√≠ch bi·∫øn ƒë·ªông gi√° 1 gi·ªù\n"
                "üîÑ ƒêi ng∆∞·ª£c h∆∞·ªõng bi·∫øn ƒë·ªông\n"
                "‚ö° T·ª± ƒë·ªông t√¨m coin m·ªõi khi c√≥ l·ªói"
            )
            send_telegram(strategy_info, chat_id,
                        bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
        
        elif text == "‚öôÔ∏è C·∫•u h√¨nh":
            balance = get_balance(self.api_key, self.api_secret)
            api_status = "‚úÖ ƒê√£ k·∫øt n·ªëi" if balance is not None else "‚ùå L·ªói k·∫øt n·ªëi"
            
            searching_bots = sum(1 for bot in self.bots.values() if bot.status == "searching")
            trading_bots = sum(1 for bot in self.bots.values() if bot.status == "open")
            
            config_info = (
                f"üîë Binance API: {api_status}\n"
                f"ü§ñ T·ªïng s·ªë bot: {len(self.bots)}\n"
                f"üîç ƒêang t√¨m coin: {searching_bots}\n"
                f"üìä ƒêang trade: {trading_bots}"
            )
            send_telegram(config_info, chat_id,
                        bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
        
        elif text:
            self.send_main_menu(chat_id)
