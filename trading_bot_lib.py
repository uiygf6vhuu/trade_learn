# trading_bot_lib.py - HO√ÄN CH·ªàNH V·ªöI BOT ƒê·ªòNG T·ª∞ T√åM COIN M·ªöI
import json
import hmac
import hashlib
import time
import threading
import urllib.request
import urllib.parse
import numpy as np
import websocket
import logging
import requests
import os
import math
import traceback
from datetime import datetime
from concurrent.futures import ThreadPoolExecutor

# ========== C·∫§U H√åNH LOGGING ==========
def setup_logging():
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(module)s - %(message)s',
        handlers=[
            logging.StreamHandler(),
            logging.FileHandler('bot_errors.log')
        ]
    )
    return logging.getLogger()

logger = setup_logging()

# ========== H√ÄM TELEGRAM ==========
def send_telegram(message, chat_id=None, reply_markup=None, bot_token=None, default_chat_id=None):
    if not bot_token:
        logger.warning("Telegram Bot Token ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p")
        return
    
    chat_id = chat_id or default_chat_id
    if not chat_id:
        logger.warning("Telegram Chat ID ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p")
        return
    
    url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": message,
        "parse_mode": "HTML"
    }
    
    if reply_markup:
        payload["reply_markup"] = json.dumps(reply_markup)
    
    try:
        response = requests.post(url, json=payload, timeout=15)
        if response.status_code != 200:
            logger.error(f"L·ªói Telegram ({response.status_code}): {response.text}")
    except Exception as e:
        logger.error(f"L·ªói k·∫øt n·ªëi Telegram: {str(e)}")

# ========== MENU TELEGRAM HO√ÄN CH·ªàNH ==========
def create_main_menu():
    return {
        "keyboard": [
            [{"text": "üìä Danh s√°ch Bot"}],
            [{"text": "‚ûï Th√™m Bot"}, {"text": "‚õî D·ª´ng Bot"}],
            [{"text": "üí∞ S·ªë d∆∞"}, {"text": "üìà V·ªã th·∫ø"}],
            [{"text": "‚öôÔ∏è C·∫•u h√¨nh"}, {"text": "üéØ Chi·∫øn l∆∞·ª£c"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": False
    }

def create_cancel_keyboard():
    return {
        "keyboard": [[{"text": "‚ùå H·ªßy b·ªè"}]],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_strategy_keyboard():
    return {
        "keyboard": [
            [{"text": "ü§ñ RSI/EMA Recursive"}, {"text": "üìä EMA Crossover"}],
            [{"text": "üéØ Reverse 24h"}, {"text": "üìà Trend Following"}],
            [{"text": "‚ö° Scalping"}, {"text": "üõ°Ô∏è Safe Grid"}],
            [{"text": "üîÑ Bot ƒê·ªông Th√¥ng Minh"}, {"text": "‚ùå H·ªßy b·ªè"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_exit_strategy_keyboard():
    """B√†n ph√≠m ch·ªçn chi·∫øn l∆∞·ª£c tho√°t l·ªánh"""
    return {
        "keyboard": [
            [{"text": "üéØ Ch·ªâ TP/SL c·ªë ƒë·ªãnh"}],
            [{"text": "‚ùå H·ªßy b·ªè"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_bot_mode_keyboard():
    """B√†n ph√≠m ch·ªçn ch·∫ø ƒë·ªô bot"""
    return {
        "keyboard": [
            [{"text": "ü§ñ Bot Tƒ©nh - Coin c·ª• th·ªÉ"}, {"text": "üîÑ Bot ƒê·ªông - T·ª± t√¨m coin"}],
            [{"text": "‚ùå H·ªßy b·ªè"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_symbols_keyboard(strategy=None):
    """B√†n ph√≠m ch·ªçn coin"""
    try:
        symbols = get_all_usdt_pairs(limit=12)
        if not symbols:
            symbols = ["BTCUSDT", "ETHUSDT", "BNBUSDT", "ADAUSDT", "DOGEUSDT", "XRPUSDT", "DOTUSDT", "LINKUSDT"]
    except:
        symbols = ["BTCUSDT", "ETHUSDT", "BNBUSDT", "ADAUSDT", "DOGEUSDT", "XRPUSDT", "DOTUSDT", "LINKUSDT"]
    
    keyboard = []
    row = []
    for symbol in symbols:
        row.append({"text": symbol})
        if len(row) == 3:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    keyboard.append([{"text": "‚ùå H·ªßy b·ªè"}])
    
    return {
        "keyboard": keyboard,
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_leverage_keyboard(strategy=None):
    """B√†n ph√≠m ch·ªçn ƒë√≤n b·∫©y"""
    leverages = ["3", "5", "10", "15", "20", "25", "50", "75", "100"]
    
    keyboard = []
    row = []
    for lev in leverages:
        row.append({"text": f"{lev}x"})
        if len(row) == 3:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    keyboard.append([{"text": "‚ùå H·ªßy b·ªè"}])
    
    return {
        "keyboard": keyboard,
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_percent_keyboard():
    """B√†n ph√≠m ch·ªçn % s·ªë d∆∞"""
    return {
        "keyboard": [
            [{"text": "1"}, {"text": "3"}, {"text": "5"}, {"text": "10"}],
            [{"text": "15"}, {"text": "20"}, {"text": "25"}, {"text": "50"}],
            [{"text": "‚ùå H·ªßy b·ªè"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_tp_keyboard():
    """B√†n ph√≠m ch·ªçn Take Profit"""
    return {
        "keyboard": [
            [{"text": "50"}, {"text": "100"}, {"text": "200"}],
            [{"text": "300"}, {"text": "500"}, {"text": "1000"}],
            [{"text": "‚ùå H·ªßy b·ªè"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_sl_keyboard():
    """B√†n ph√≠m ch·ªçn Stop Loss"""
    return {
        "keyboard": [
            [{"text": "0"}, {"text": "50"}, {"text": "100"}],
            [{"text": "150"}, {"text": "200"}, {"text": "500"}],
            [{"text": "‚ùå H·ªßy b·ªè"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_threshold_keyboard():
    return {
        "keyboard": [
            [{"text": "30"}, {"text": "50"}, {"text": "70"}],
            [{"text": "100"}, {"text": "150"}, {"text": "200"}],
            [{"text": "‚ùå H·ªßy b·ªè"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_volatility_keyboard():
    return {
        "keyboard": [
            [{"text": "2"}, {"text": "3"}, {"text": "5"}],
            [{"text": "7"}, {"text": "10"}, {"text": "15"}],
            [{"text": "‚ùå H·ªßy b·ªè"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_grid_levels_keyboard():
    return {
        "keyboard": [
            [{"text": "3"}, {"text": "5"}, {"text": "7"}],
            [{"text": "10"}, {"text": "15"}, {"text": "20"}],
            [{"text": "‚ùå H·ªßy b·ªè"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }


def create_bot_count_keyboard():
    """B√†n ph√≠m ch·ªçn s·ªë l∆∞·ª£ng bot"""
    return {
        "keyboard": [
            [{"text": "1"}, {"text": "2"}],
            [{"text": "3"}, {"text": "5"}],
            [{"text": "‚ùå H·ªßy b·ªè"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def get_volume_for_symbol(symbol, ticker_dict):
    """L·∫•y kh·ªëi l∆∞·ª£ng giao d·ªãch cho symbol ƒë·ªÉ s·∫Øp x·∫øp"""
    if symbol in ticker_dict:
        return float(ticker_dict[symbol].get('quoteVolume', 0))
    return 0

# ========== QU·∫¢N L√ù COIN CHUNG ==========
class CoinManager:
    _instance = None
    _lock = threading.Lock()
    
    def __new__(cls):
        with cls._lock:
            if cls._instance is None:
                cls._instance = super(CoinManager, cls).__new__(cls)
                cls._instance.managed_coins = {}
                cls._instance.config_coin_count = {}  # Theo d√µi s·ªë coin c·ªßa m·ªói config
        return cls._instance
    
    def register_coin(self, symbol, bot_id, strategy, config_key=None):
        with self._lock:
            if config_key not in self.config_coin_count:
                self.config_coin_count[config_key] = 0
            
            # KI·ªÇM TRA S·ªê COIN T·ªêI ƒêA CHO CONFIG (2 COIN)
            if self.config_coin_count.get(config_key, 0) >= 2:
                return False
                
            if symbol not in self.managed_coins:
                self.managed_coins[symbol] = {
                    "strategy": strategy, 
                    "bot_id": bot_id,
                    "config_key": config_key
                }
                self.config_coin_count[config_key] = self.config_coin_count.get(config_key, 0) + 1
                return True
            return False
    
    def unregister_coin(self, symbol):
        with self._lock:
            if symbol in self.managed_coins:
                config_key = self.managed_coins[symbol].get("config_key")
                del self.managed_coins[symbol]
                
                # GI·∫¢M S·ªê L∆Ø·ª¢NG COIN C·ª¶A CONFIG
                if config_key in self.config_coin_count:
                    self.config_coin_count[config_key] = max(0, self.config_coin_count[config_key] - 1)
                return True
            return False
    
    def is_coin_managed(self, symbol):
        with self._lock:
            return symbol in self.managed_coins

    def has_same_config_bot(self, symbol, config_key):
        with self._lock:
            if symbol in self.managed_coins:
                existing_config = self.managed_coins[symbol].get("config_key")
                return existing_config == config_key
            return False
    
    def count_bots_by_config(self, config_key):
        with self._lock:
            count = 0
            for coin_info in self.managed_coins.values():
                if coin_info.get("config_key") == config_key:
                    count += 1
            return count
    
    def get_config_coin_count(self, config_key):
        """L·∫•y s·ªë coin hi·ªán t·∫°i c·ªßa config"""
        with self._lock:
            return self.config_coin_count.get(config_key, 0)
    
    def get_managed_coins(self):
        with self._lock:
            return self.managed_coins.copy()

# ========== API BINANCE ==========
def sign(query, api_secret):
    try:
        return hmac.new(api_secret.encode(), query.encode(), hashlib.sha256).hexdigest()
    except Exception as e:
        logger.error(f"L·ªói t·∫°o ch·ªØ k√Ω: {str(e)}")
        return ""

def binance_api_request(url, method='GET', params=None, headers=None):
    max_retries = 3
    for attempt in range(max_retries):
        try:
            if method.upper() == 'GET':
                if params:
                    query = urllib.parse.urlencode(params)
                    url = f"{url}?{query}"
                req = urllib.request.Request(url, headers=headers or {})
            else:
                data = urllib.parse.urlencode(params).encode() if params else None
                req = urllib.request.Request(url, data=data, headers=headers or {}, method=method)
            
            with urllib.request.urlopen(req, timeout=15) as response:
                if response.status == 200:
                    return json.loads(response.read().decode())
                else:
                    error_content = response.read().decode()
                    logger.error(f"L·ªói API ({response.status}): {error_content}")
                    if response.status == 401:
                        return None
                    if response.status == 429:
                        time.sleep(2 ** attempt)
                    elif response.status >= 500:
                        time.sleep(1)
                    continue
        except urllib.error.HTTPError as e:
            logger.error(f"L·ªói HTTP ({e.code}): {e.reason}")
            if e.code == 401:
                return None
            if e.code == 429:
                time.sleep(2 ** attempt)
            elif e.code >= 500:
                time.sleep(1)
            continue
        except Exception as e:
            logger.error(f"L·ªói k·∫øt n·ªëi API: {str(e)}")
            time.sleep(1)
    
    logger.error(f"Kh√¥ng th·ªÉ th·ª±c hi·ªán y√™u c·∫ßu API sau {max_retries} l·∫ßn th·ª≠")
    return None

def get_all_usdt_pairs(limit=100):
    try:
        url = "https://fapi.binance.com/fapi/v1/exchangeInfo"
        data = binance_api_request(url)
        if not data:
            logger.warning("Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu t·ª´ Binance, tr·∫£ v·ªÅ danh s√°ch r·ªóng")
            return []
        
        usdt_pairs = []
        for symbol_info in data.get('symbols', []):
            symbol = symbol_info.get('symbol', '')
            if symbol.endswith('USDT') and symbol_info.get('status') == 'TRADING':
                usdt_pairs.append(symbol)
        
        logger.info(f"‚úÖ L·∫•y ƒë∆∞·ª£c {len(usdt_pairs)} coin USDT t·ª´ Binance")
        return usdt_pairs[:limit] if limit else usdt_pairs
        
    except Exception as e:
        logger.error(f"‚ùå L·ªói l·∫•y danh s√°ch coin t·ª´ Binance: {str(e)}")
        return []

def get_top_volatile_symbols(limit=10, threshold=20):
    """L·∫•y danh s√°ch coin c√≥ bi·∫øn ƒë·ªông 24h cao nh·∫•t t·ª´ to√†n b·ªô Binance"""
    try:
        all_symbols = get_all_usdt_pairs(limit=200)
        if not all_symbols:
            logger.warning("Kh√¥ng l·∫•y ƒë∆∞·ª£c coin t·ª´ Binance")
            return []
        
        url = "https://fapi.binance.com/fapi/v1/ticker/24hr"
        data = binance_api_request(url)
        if not data:
            return []
        
        ticker_dict = {ticker['symbol']: ticker for ticker in data if 'symbol' in ticker}
        
        volatile_pairs = []
        for symbol in all_symbols:
            if symbol in ticker_dict:
                ticker = ticker_dict[symbol]
                try:
                    change = float(ticker.get('priceChangePercent', 0))
                    volume = float(ticker.get('quoteVolume', 0))
                    
                    if abs(change) >= threshold:
                        volatile_pairs.append((symbol, abs(change)))
                except (ValueError, TypeError):
                    continue
        
        volatile_pairs.sort(key=lambda x: x[1], reverse=True)
        
        top_symbols = [pair[0] for pair in volatile_pairs[:limit]]
        logger.info(f"‚úÖ T√¨m th·∫•y {len(top_symbols)} coin bi·∫øn ƒë·ªông ‚â•{threshold}%")
        return top_symbols
        
    except Exception as e:
        logger.error(f"‚ùå L·ªói l·∫•y danh s√°ch coin bi·∫øn ƒë·ªông: {str(e)}")
        return []

def get_qualified_symbols(api_key, api_secret, strategy_type, leverage, threshold=None, volatility=None, grid_levels=None, max_candidates=20, final_limit=2, strategy_key=None):
    """T√¨m coin ph√π h·ª£p t·ª´ TO√ÄN B·ªò Binance - T√åM n COIN CHO M·ªñI CHI·∫æN L∆Ø·ª¢C"""
    try:
        test_balance = get_balance(api_key, api_secret)
        if test_balance is None:
            logger.error("‚ùå KH√îNG TH·ªÇ K·∫æT N·ªêI BINANCE")
            return []
        
        coin_manager = CoinManager()
        
        all_symbols = get_all_usdt_pairs(limit=200)
        if not all_symbols:
            logger.error("‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c danh s√°ch coin t·ª´ Binance")
            return []
        
        url = "https://fapi.binance.com/fapi/v1/ticker/24hr"
        data = binance_api_request(url)
        if not data:
            return []
        
        ticker_dict = {ticker['symbol']: ticker for ticker in data if 'symbol' in ticker}
        
        qualified_symbols = []
        
        for symbol in all_symbols:
            if symbol not in ticker_dict:
                continue
                
            # Lo·∫°i tr·ª´ BTC v√† ETH ƒë·ªÉ tr√°nh bi·∫øn ƒë·ªông qu√° cao
            if symbol in ['BTCUSDT', 'ETHUSDT']:
                continue
            
            # Ki·ªÉm tra coin ƒë√£ ƒë∆∞·ª£c qu·∫£n l√Ω b·ªüi config n√†y ch∆∞a
            if strategy_key and coin_manager.has_same_config_bot(symbol, strategy_key):
                continue
            
            ticker = ticker_dict[symbol]
            
            try:
                price_change = float(ticker.get('priceChangePercent', 0))
                abs_price_change = abs(price_change)
                volume = float(ticker.get('quoteVolume', 0))
                high_price = float(ticker.get('highPrice', 0))
                low_price = float(ticker.get('lowPrice', 0))
                
                if low_price > 0:
                    price_range = ((high_price - low_price) / low_price) * 100
                else:
                    price_range = 0
                
                # ƒêI·ªÄU KI·ªÜN CHO T·ª™NG CHI·∫æN L∆Ø·ª¢C - LINH HO·∫†T H∆†N
                if strategy_type == "Reverse 24h":
                    if abs_price_change >= (threshold or 15):
                        score = abs_price_change * (volume / 1000000)
                        qualified_symbols.append((symbol, score, price_change, volume))
                
                elif strategy_type == "Scalping":
                    if abs_price_change >= (volatility or 2) and volume > 2000000 and price_range >= 1.0:
                        qualified_symbols.append((symbol, price_range, volume))
                
                elif strategy_type == "Safe Grid":
                    if 0.5 <= abs_price_change <= 8.0:
                        qualified_symbols.append((symbol, -abs(price_change - 3.0), volume))
                
                elif strategy_type == "Trend Following":
                    if (1.0 <= abs_price_change <= 15.0 and price_range >= 0.5):
                        score = volume * abs_price_change
                        qualified_symbols.append((symbol, score, volume))
                
                elif strategy_type == "Smart Dynamic":
                    if (1.0 <= abs_price_change <= 12.0 and price_range >= 0.8):
                        volume_score = min(volume / 5000000, 5)
                        volatility_score = min(abs_price_change / 10, 3)
                        score = volume_score + volatility_score
                        qualified_symbols.append((symbol, score, volume))
                        
            except (ValueError, TypeError) as e:
                continue
        
        # S·∫ÆP X·∫æP THEO CHI·∫æN L∆Ø·ª¢C V√Ä KH·ªêI L∆Ø·ª¢NG GI·∫¢M D·∫¶N
        if strategy_type == "Reverse 24h":
            qualified_symbols.sort(key=lambda x: (x[1], x[3]), reverse=True)
        elif strategy_type == "Scalping":
            qualified_symbols.sort(key=lambda x: (x[1], x[2]), reverse=True)
        elif strategy_type == "Safe Grid":
            qualified_symbols.sort(key=lambda x: (x[1], x[2]), reverse=True)
        elif strategy_type == "Trend Following":
            qualified_symbols.sort(key=lambda x: (x[1], x[2]), reverse=True)
        elif strategy_type == "Smart Dynamic":
            qualified_symbols.sort(key=lambda x: (x[1], x[2]), reverse=True)
        
        # LOG CHI TI·∫æT ƒê·ªÇ DEBUG
        logger.info(f"üîç {strategy_type}: Qu√©t {len(all_symbols)} coin, t√¨m th·∫•y {len(qualified_symbols)} ph√π h·ª£p")
        
        final_symbols = []
        for item in qualified_symbols[:max_candidates]:
            if len(final_symbols) >= final_limit:  # L·∫§Y n COIN THEO Y√äU C·∫¶U
                break
                
            if strategy_type == "Reverse 24h":
                symbol, score, original_change, volume = item
            else:
                symbol, score, volume = item
                
            try:
                leverage_success = set_leverage(symbol, leverage, api_key, api_secret)
                step_size = get_step_size(symbol, api_key, api_secret)
                
                if leverage_success and step_size > 0:
                    final_symbols.append(symbol)
                    if strategy_type == "Reverse 24h":
                        logger.info(f"‚úÖ {symbol}: ph√π h·ª£p {strategy_type} (Bi·∫øn ƒë·ªông: {original_change:.2f}%, ƒêi·ªÉm: {score:.2f}, Volume: {volume:.0f})")
                    else:
                        logger.info(f"‚úÖ {symbol}: ph√π h·ª£p {strategy_type} (Score: {score:.2f}, Volume: {volume:.0f})")
                time.sleep(0.1)
            except Exception as e:
                logger.error(f"‚ùå L·ªói ki·ªÉm tra {symbol}: {str(e)}")
                continue
        
        # BACKUP SYSTEM: Ch·ªâ backup khi ch∆∞a c√≥ coin n√†o
        if not final_symbols:
            logger.warning(f"‚ö†Ô∏è {strategy_type}: kh√¥ng t√¨m th·∫•y coin ph√π h·ª£p, s·ª≠ d·ª•ng backup method")
            backup_symbols = []
            
            for symbol in all_symbols:
                if symbol not in ticker_dict:
                    continue
                    
                # Ki·ªÉm tra coin ƒë√£ ƒë∆∞·ª£c qu·∫£n l√Ω b·ªüi config n√†y ch∆∞a
                if strategy_key and coin_manager.has_same_config_bot(symbol, strategy_key):
                    continue
                    
                ticker = ticker_dict[symbol]
                try:
                    volume = float(ticker.get('quoteVolume', 0))
                    price_change = float(ticker.get('priceChangePercent', 0))
                    abs_price_change = abs(price_change)
                    
                    if (0.5 <= abs_price_change <= 10.0 and
                        symbol not in ['BTCUSDT', 'ETHUSDT']):
                        backup_symbols.append((symbol, volume, abs_price_change))
                except:
                    continue
            
            # S·∫Øp x·∫øp theo volume gi·∫£m d·∫ßn
            backup_symbols.sort(key=lambda x: x[1], reverse=True)
            
            for symbol, volume, price_change in backup_symbols[:final_limit]:  # L·∫§Y n COIN
                try:
                    leverage_success = set_leverage(symbol, leverage, api_key, api_secret)
                    step_size = get_step_size(symbol, api_key, api_secret)
                    
                    if leverage_success and step_size > 0:
                        final_symbols.append(symbol)
                        logger.info(f"üîÑ {symbol}: backup coin (Volume: {volume:.0f}, Bi·∫øn ƒë·ªông: {price_change:.2f}%)")
                        if len(final_symbols) >= final_limit:
                            break
                    time.sleep(0.1)
                except Exception as e:
                    continue
        
        logger.info(f"üéØ {strategy_type}: K·∫øt qu·∫£ cu·ªëi - {len(final_symbols)} coin: {final_symbols}")
        return final_symbols[:final_limit]  # TR·∫¢ V·ªÄ n COIN
        
    except Exception as e:
        logger.error(f"‚ùå L·ªói t√¨m coin {strategy_type}: {str(e)}")
        return []

def get_step_size(symbol, api_key, api_secret):
    url = "https://fapi.binance.com/fapi/v1/exchangeInfo"
    try:
        data = binance_api_request(url)
        if not data:
            return 0.001
        for s in data['symbols']:
            if s['symbol'] == symbol.upper():
                for f in s['filters']:
                    if f['filterType'] == 'LOT_SIZE':
                        return float(f['stepSize'])
    except Exception as e:
        logger.error(f"L·ªói l·∫•y step size: {str(e)}")
    return 0.001

def set_leverage(symbol, lev, api_key, api_secret):
    try:
        ts = int(time.time() * 1000)
        params = {
            "symbol": symbol.upper(),
            "leverage": lev,
            "timestamp": ts
        }
        query = urllib.parse.urlencode(params)
        sig = sign(query, api_secret)
        url = f"https://fapi.binance.com/fapi/v1/leverage?{query}&signature={sig}"
        headers = {'X-MBX-APIKEY': api_key}
        
        response = binance_api_request(url, method='POST', headers=headers)
        if response is None:
            return False
        if response and 'leverage' in response:
            return True
        return False
    except Exception as e:
        logger.error(f"L·ªói thi·∫øt l·∫≠p ƒë√≤n b·∫©y: {str(e)}")
        return False

def get_balance(api_key, api_secret):
    try:
        ts = int(time.time() * 1000)
        params = {"timestamp": ts}
        query = urllib.parse.urlencode(params)
        sig = sign(query, api_secret)
        url = f"https://fapi.binance.com/fapi/v2/account?{query}&signature={sig}"
        headers = {'X-MBX-APIKEY': api_key}
        
        data = binance_api_request(url, headers=headers)
        if not data:
            return None
        for asset in data['assets']:
            if asset['asset'] == 'USDT':
                return float(asset['availableBalance'])
        return 0
    except Exception as e:
        logger.error(f"L·ªói l·∫•y s·ªë d∆∞: {str(e)}")
        return None

def place_order(symbol, side, qty, api_key, api_secret):
    try:
        ts = int(time.time() * 1000)
        params = {
            "symbol": symbol.upper(),
            "side": side,
            "type": "MARKET",
            "quantity": qty,
            "timestamp": ts
        }
        query = urllib.parse.urlencode(params)
        sig = sign(query, api_secret)
        url = f"https://fapi.binance.com/fapi/v1/order?{query}&signature={sig}"
        headers = {'X-MBX-APIKEY': api_key}
        
        return binance_api_request(url, method='POST', headers=headers)
    except Exception as e:
        logger.error(f"L·ªói ƒë·∫∑t l·ªánh: {str(e)}")
    return None

def cancel_all_orders(symbol, api_key, api_secret):
    try:
        ts = int(time.time() * 1000)
        params = {"symbol": symbol.upper(), "timestamp": ts}
        query = urllib.parse.urlencode(params)
        sig = sign(query, api_secret)
        url = f"https://fapi.binance.com/fapi/v1/allOpenOrders?{query}&signature={sig}"
        headers = {'X-MBX-APIKEY': api_key}
        
        binance_api_request(url, method='DELETE', headers=headers)
        return True
    except Exception as e:
        logger.error(f"L·ªói h·ªßy l·ªánh: {str(e)}")
    return False

def get_current_price(symbol):
    try:
        url = f"https://fapi.binance.com/fapi/v1/ticker/price?symbol={symbol.upper()}"
        data = binance_api_request(url)
        if data and 'price' in data:
            return float(data['price'])
    except Exception as e:
        logger.error(f"L·ªói l·∫•y gi√°: {str(e)}")
    return 0

def get_positions(symbol=None, api_key=None, api_secret=None):
    try:
        ts = int(time.time() * 1000)
        params = {"timestamp": ts}
        if symbol:
            params["symbol"] = symbol.upper()
        query = urllib.parse.urlencode(params)
        sig = sign(query, api_secret)
        url = f"https://fapi.binance.com/fapi/v2/positionRisk?{query}&signature={sig}"
        headers = {'X-MBX-APIKEY': api_key}
        
        positions = binance_api_request(url, headers=headers)
        if not positions:
            return []
        if symbol:
            for pos in positions:
                if pos['symbol'] == symbol.upper():
                    return [pos]
        return positions
    except Exception as e:
        logger.error(f"L·ªói l·∫•y v·ªã th·∫ø: {str(e)}")
    return []

def get_24h_change(symbol):
    try:
        url = f"https://fapi.binance.com/fapi/v1/ticker/24hr?symbol={symbol.upper()}"
        data = binance_api_request(url)
        if data and 'priceChangePercent' in data:
            change = data['priceChangePercent']
            if change is None:
                return 0.0
            return float(change) if change is not None else 0.0
        return 0.0
    except Exception as e:
        logger.error(f"L·ªói l·∫•y bi·∫øn ƒë·ªông 24h cho {symbol}: {str(e)}")
    return 0.0

# ========== CH·ªà B√ÅO K·ª∏ THU·∫¨T ==========
def calc_rsi(prices, period=14):
    try:
        if len(prices) < period + 1:
            return None
        deltas = np.diff(prices)
        gains = np.where(deltas > 0, deltas, 0)
        losses = np.where(deltas < 0, -deltas, 0)
        avg_gain = np.mean(gains[:period])
        avg_loss = np.mean(losses[:period])
        if avg_loss == 0:
            return 100.0
        rs = avg_gain / avg_loss
        rsi_value = 100.0 - (100.0 / (1 + rs))
        
        if np.isnan(rsi_value) or np.isinf(rsi_value):
            return None
        return rsi_value
    except Exception as e:
        return None

def calc_ema(prices, period):
    try:
        if len(prices) < period:
            return None
        
        ema = [sum(prices[:period]) / period]
        multiplier = 2 / (period + 1)
        
        for price in prices[period:]:
            ema_value = (price * multiplier) + (ema[-1] * (1 - multiplier))
            ema.append(ema_value)
        
        return float(ema[-1])
    except Exception as e:
        return None

# ========== WEBSOCKET MANAGER ==========
class WebSocketManager:
    def __init__(self):
        self.connections = {}
        self.executor = ThreadPoolExecutor(max_workers=10)
        self._lock = threading.Lock()
        self._stop_event = threading.Event()
        
    def add_symbol(self, symbol, callback):
        symbol = symbol.upper()
        with self._lock:
            if symbol not in self.connections:
                self._create_connection(symbol, callback)
                
    def _create_connection(self, symbol, callback):
        if self._stop_event.is_set():
            return
        stream = f"{symbol.lower()}@trade"
        url = f"wss://fstream.binance.com/ws/{stream}"
        
        def on_message(ws, message):
            try:
                data = json.loads(message)
                if 'p' in data:
                    price = float(data['p'])
                    self.executor.submit(callback, price)
            except Exception as e:
                logger.error(f"L·ªói x·ª≠ l√Ω tin nh·∫Øn WebSocket {symbol}: {str(e)}")
                
        def on_error(ws, error):
            logger.error(f"L·ªói WebSocket {symbol}: {str(error)}")
            if not self._stop_event.is_set():
                time.sleep(5)
                self._reconnect(symbol, callback)
            
        def on_close(ws, close_status_code, close_msg):
            logger.info(f"WebSocket ƒë√≥ng {symbol}: {close_status_code} - {close_msg}")
            if not self._stop_event.is_set() and symbol in self.connections:
                time.sleep(5)
                self._reconnect(symbol, callback)
                
        ws = websocket.WebSocketApp(
            url,
            on_message=on_message,
            on_error=on_error,
            on_close=on_close
        )
        
        thread = threading.Thread(target=ws.run_forever, daemon=True)
        thread.start()
        
        self.connections[symbol] = {
            'ws': ws,
            'thread': thread,
            'callback': callback
        }
        logger.info(f"WebSocket b·∫Øt ƒë·∫ßu cho {symbol}")
        
    def _reconnect(self, symbol, callback):
        logger.info(f"K·∫øt n·ªëi l·∫°i WebSocket cho {symbol}")
        self.remove_symbol(symbol)
        self._create_connection(symbol, callback)
        
    def remove_symbol(self, symbol):
        symbol = symbol.upper()
        with self._lock:
            if symbol in self.connections:
                try:
                    self.connections[symbol]['ws'].close()
                except Exception as e:
                    logger.error(f"L·ªói ƒë√≥ng WebSocket {symbol}: {str(e)}")
                del self.connections[symbol]
                logger.info(f"WebSocket ƒë√£ x√≥a cho {symbol}")
                
    def stop(self):
        self._stop_event.set()
        for symbol in list(self.connections.keys()):
            self.remove_symbol(symbol)

# ========== BASE BOT N√ÇNG C·∫§P ==========
class BaseBot:
    def __init__(self, symbol, lev, percent, tp, sl, ws_manager, api_key, api_secret, 
                 telegram_bot_token, telegram_chat_id, strategy_name, config_key=None):
        
        self.symbol = symbol.upper() if symbol else "BTCUSDT"
        self.lev = lev
        self.percent = percent
        self.tp = tp
        self.sl = sl
        self.ws_manager = ws_manager
        self.api_key = api_key
        self.api_secret = api_secret
        self.telegram_bot_token = telegram_bot_token
        self.telegram_chat_id = telegram_chat_id
        self.strategy_name = strategy_name
        self.config_key = config_key
        
        self.status = "waiting"
        self.side = ""
        self.qty = 0
        self.entry = 0
        self.prices = []
        self.position_open = False
        self._stop = False
        
        # Bi·∫øn theo d√µi th·ªùi gian
        self.last_trade_time = 0
        self.last_close_time = 0
        # Bi·∫øn theo d√µi t√¨m coin
        self._last_find_attempt = 0
        self._find_coin_cooldown = 300  # 5 ph√∫t
        self.last_position_check = 0
        self.last_error_log_time = 0
        
        self.cooldown_period = 300
        self.position_check_interval = 30
        
        # B·∫£o v·ªá ch·ªëng l·∫∑p ƒë√≥ng l·ªánh
        self._close_attempted = False
        self._last_close_attempt = 0
        
        # C·ªù ƒë√°nh d·∫•u c·∫ßn x√≥a bot
        self.should_be_removed = False
        
        self.coin_manager = CoinManager()
        
        # ƒêƒÇNG K√ù COIN CH·ªà KHI C√ì SYMBOL V√Ä CONFIG_KEY
        if symbol and config_key:
            success = self._register_coin_with_retry(symbol)
            if not success:
                self.log(f"‚ùå Kh√¥ng th·ªÉ ƒëƒÉng k√Ω coin {symbol} - ƒë√£ ƒë·∫°t gi·ªõi h·∫°n 2 coin/config")
                self.should_be_removed = True
        
        self.check_position_status()
        if symbol:
            self.ws_manager.add_symbol(self.symbol, self._handle_price_update)
        self.thread = threading.Thread(target=self._run, daemon=True)
        self.thread.start()
        self.log(f"üü¢ Bot {strategy_name} kh·ªüi ƒë·ªông | {self.symbol} | ƒêB: {lev}x | V·ªën: {percent}% | TP/SL: {tp}%/{sl}%")

    def _register_coin_with_retry(self, symbol):
        """ƒêƒÉng k√Ω coin v·ªõi retry logic"""
        max_retries = 3
        for attempt in range(max_retries):
            success = self.coin_manager.register_coin(symbol, f"{self.strategy_name}_{id(self)}", self.strategy_name, self.config_key)
            if success:
                return True
            time.sleep(0.5)
        return False

    def log(self, message):
        logger.info(f"[{self.symbol} - {self.strategy_name}] {message}")
        if self.telegram_bot_token and self.telegram_chat_id:
            send_telegram(f"<b>{self.symbol}</b> ({self.strategy_name}): {message}", 
                         bot_token=self.telegram_bot_token, 
                         default_chat_id=self.telegram_chat_id)

    def _handle_price_update(self, price):
        if self._stop or not price or price <= 0:
            return
        try:
            self.prices.append(float(price))
            if len(self.prices) > 100:
                self.prices = self.prices[-100:]
        except Exception as e:
            self.log(f"‚ùå L·ªói x·ª≠ l√Ω gi√°: {str(e)}")

    def get_signal(self):
        raise NotImplementedError("Ph∆∞∆°ng th·ª©c get_signal c·∫ßn ƒë∆∞·ª£c tri·ªÉn khai")

    def check_position_status(self):
        try:
            positions = get_positions(self.symbol, self.api_key, self.api_secret)
            if not positions:
                self._reset_position()
                return
            
            position_found = False
            for pos in positions:
                if pos['symbol'] == self.symbol:
                    position_amt = float(pos.get('positionAmt', 0))
                    if abs(position_amt) > 0:
                        position_found = True
                        self.position_open = True
                        self.status = "open"
                        self.side = "BUY" if position_amt > 0 else "SELL"
                        self.qty = position_amt
                        self.entry = float(pos.get('entryPrice', 0))
                        break
                    else:
                        position_found = True
                        self._reset_position()
                        break
            
            if not position_found:
                self._reset_position()
                
        except Exception as e:
            if time.time() - self.last_error_log_time > 10:
                self.log(f"‚ùå L·ªói ki·ªÉm tra v·ªã th·∫ø: {str(e)}")
                self.last_error_log_time = time.time()

    def _reset_position(self):
        self.position_open = False
        self.status = "waiting"
        self.side = ""
        self.qty = 0
        self.entry = 0
        self._close_attempted = False
        self._last_close_attempt = 0

    def _run(self):
        while not self._stop:
            try:
                current_time = time.time()
                
                if current_time - self.last_position_check > self.position_check_interval:
                    self.check_position_status()
                    self.last_position_check = current_time
                
                if not self.position_open:
                    signal = self.get_signal()
                    
                    if (signal and 
                        current_time - self.last_trade_time > 60 and
                        current_time - self.last_close_time > self.cooldown_period):
                        
                        self.log(f"üéØ Nh·∫≠n t√≠n hi·ªáu {signal}, ƒëang m·ªü l·ªánh...")
                        if self.open_position(signal):
                            self.last_trade_time = current_time
                        else:
                            time.sleep(30)
                
                if self.position_open and not self._close_attempted:
                    self.check_tp_sl()
                    
                time.sleep(1)
                
            except Exception as e:
                if time.time() - self.last_error_log_time > 10:
                    self.log(f"‚ùå L·ªói h·ªá th·ªëng: {str(e)}")
                    self.last_error_log_time = time.time()
                time.sleep(1)

    def stop(self):
        self._stop = True
        if self.symbol:
            self.ws_manager.remove_symbol(self.symbol)
        if self.symbol and self.config_key:
            self.coin_manager.unregister_coin(self.symbol)
        if self.symbol:
            cancel_all_orders(self.symbol, self.api_key, self.api_secret)
        self.log(f"üî¥ Bot d·ª´ng cho {self.symbol}")

    def open_position(self, side):
        try:
            self.check_position_status()
            if self.position_open:
                self.log(f"‚ö†Ô∏è ƒê√£ c√≥ v·ªã th·∫ø {self.side}, b·ªè qua t√≠n hi·ªáu {side}")
                return False

            if self.should_be_removed:
                self.log("‚ö†Ô∏è Bot ƒë√£ ƒë∆∞·ª£c ƒë√°nh d·∫•u x√≥a, kh√¥ng m·ªü l·ªánh m·ªõi")
                return False

            if not set_leverage(self.symbol, self.lev, self.api_key, self.api_secret):
                self.log(f"‚ùå Kh√¥ng th·ªÉ ƒë·∫∑t ƒë√≤n b·∫©y {self.lev}x")
                return False

            balance = get_balance(self.api_key, self.api_secret)
            if balance is None or balance <= 0:
                self.log("‚ùå Kh√¥ng ƒë·ªß s·ªë d∆∞")
                return False

            current_price = get_current_price(self.symbol)
            if current_price <= 0:
                self.log("‚ùå L·ªói l·∫•y gi√°")
                return False

            step_size = get_step_size(self.symbol, self.api_key, self.api_secret)
            usd_amount = balance * (self.percent / 100)
            qty = (usd_amount * self.lev) / current_price
            
            if step_size > 0:
                qty = math.floor(qty / step_size) * step_size
                qty = round(qty, 8)

            if qty < step_size:
                self.log(f"‚ùå S·ªë l∆∞·ª£ng qu√° nh·ªè: {qty}")
                return False

            result = place_order(self.symbol, side, qty, self.api_key, self.api_secret)
            if result and 'orderId' in result:
                executed_qty = float(result.get('executedQty', 0))
                avg_price = float(result.get('avgPrice', current_price))
                
                if executed_qty >= 0:
                    self.entry = avg_price
                    self.side = side
                    self.qty = executed_qty if side == "BUY" else -executed_qty
                    self.position_open = True
                    self.status = "open"
                    
                    message = (
                        f"‚úÖ <b>ƒê√É M·ªû V·ªä TH·∫æ {self.symbol}</b>\n"
                        f"ü§ñ Chi·∫øn l∆∞·ª£c: {self.strategy_name}\n"
                        f"üìå H∆∞·ªõng: {side}\n"
                        f"üè∑Ô∏è Gi√° v√†o: {self.entry:.4f}\n"
                        f"üìä Kh·ªëi l∆∞·ª£ng: {executed_qty:.4f}\n"
                        f"üíµ Gi√° tr·ªã: {executed_qty * self.entry:.2f} USDT\n"
                        f"üí∞ ƒê√≤n b·∫©y: {self.lev}x\n"
                        f"üéØ TP: {self.tp}% | üõ°Ô∏è SL: {self.sl}%"
                    )
                    self.log(message)
                    return True
                else:
                    self.log(f"‚ùå L·ªánh kh√¥ng kh·ªõp - S·ªë l∆∞·ª£ng: {qty}")
                    return False
            else:
                error_msg = result.get('msg', 'Unknown error') if result else 'No response'
                self.log(f"‚ùå L·ªói ƒë·∫∑t l·ªánh {side}: {error_msg}")
                return False
                
        except Exception as e:
            self.log(f"‚ùå L·ªói m·ªü l·ªánh: {str(e)}")
            return False

    def close_position(self, reason=""):
        try:
            self.check_position_status()
            
            if not self.position_open or abs(self.qty) <= 0:
                self.log(f"‚ö†Ô∏è Kh√¥ng c√≥ v·ªã th·∫ø ƒë·ªÉ ƒë√≥ng: {reason}")
                # V·∫™N X√ìA COIN D√ô KH√îNG C√ì V·ªä TH·∫æ
                if self.symbol and self.config_key:
                    self.coin_manager.unregister_coin(self.symbol)
                return False

            current_time = time.time()
            if self._close_attempted and current_time - self._last_close_attempt < 30:
                self.log(f"‚ö†Ô∏è ƒêang th·ª≠ ƒë√≥ng l·ªánh l·∫ßn tr∆∞·ªõc, ch·ªù...")
                return False
            
            self._close_attempted = True
            self._last_close_attempt = current_time

            close_side = "SELL" if self.side == "BUY" else "BUY"
            close_qty = abs(self.qty)
            
            cancel_all_orders(self.symbol, self.api_key, self.api_secret)
            time.sleep(0.5)
            
            result = place_order(self.symbol, close_side, close_qty, self.api_key, self.api_secret)
            if result and 'orderId' in result:
                current_price = get_current_price(self.symbol)
                pnl = 0
                if self.entry > 0:
                    if self.side == "BUY":
                        pnl = (current_price - self.entry) * abs(self.qty)
                    else:
                        pnl = (self.entry - current_price) * abs(self.qty)
                
                message = (
                    f"‚õî <b>ƒê√É ƒê√ìNG V·ªä TH·∫æ {self.symbol}</b>\n"
                    f"ü§ñ Chi·∫øn l∆∞·ª£c: {self.strategy_name}\n"
                    f"üìå L√Ω do: {reason}\n"
                    f"üè∑Ô∏è Gi√° ra: {current_price:.4f}\n"
                    f"üìä Kh·ªëi l∆∞·ª£ng: {close_qty:.4f}\n"
                    f"üí∞ PnL: {pnl:.2f} USDT"
                )
                self.log(message)
                
                # X√ìA COIN KH·ªéI DANH S√ÅCH QU·∫¢N L√ù
                if self.symbol and self.config_key:
                    self.coin_manager.unregister_coin(self.symbol)
                
                # BOT ƒê·ªòNG: T√åM COIN M·ªöI SAU KHI ƒê√ìNG L·ªÜNH
                if hasattr(self, 'config_key') and self.config_key:
                    self._find_new_coin_after_close()
                
                self._reset_position()
                self.last_close_time = time.time()
                
                time.sleep(2)
                self.check_position_status()
                
                return True
            else:
                error_msg = result.get('msg', 'Unknown error') if result else 'No response'
                self.log(f"‚ùå L·ªói ƒë√≥ng l·ªánh: {error_msg}")
                self._close_attempted = False
                return False
                
        except Exception as e:
            self.log(f"‚ùå L·ªói ƒë√≥ng l·ªánh: {str(e)}")
            self._close_attempted = False
            return False

    def _find_new_coin_after_close(self):
        """BOT ƒê·ªòNG: T√åM COIN M·ªöI SAU KHI ƒê√ìNG L·ªÜNH - S·ª¨ D·ª§NG C∆† CH·∫æ DANH S√ÅCH TARGET"""
        try:
            # KI·ªÇM TRA COOLDOWN
            current_time = time.time()
            if hasattr(self, '_last_find_attempt') and current_time - self._last_find_attempt < 300:
                return False
                
            self._last_find_attempt = current_time
            
            self.log(f"üîÑ Bot ƒë·ªông ƒëang t√¨m coin m·ªõi thay th·∫ø {self.symbol}...")
            
            # S·ª≠ d·ª•ng BotManager ƒë·ªÉ t√¨m coin m·ªõi th√¥ng qua c∆° ch·∫ø danh s√°ch target
            if hasattr(self, 'config_key') and self.config_key:
                # G·ªçi BotManager ƒë·ªÉ x·ª≠ l√Ω t√¨m coin m·ªõi
                bot_manager = getattr(self, '_bot_manager', None)
                if bot_manager and hasattr(bot_manager, '_handle_coin_after_close'):
                    bot_manager._handle_coin_after_close(self.config_key, self.symbol)
                    return True
            
            return False
            
        except Exception as e:
            self.log(f"‚ùå L·ªói t√¨m coin m·ªõi: {str(e)}")
            return False

    def check_tp_sl(self):
        """CH·ªà KI·ªÇM TRA TP/SL C∆† B·∫¢N"""
        if not self.position_open or self.entry <= 0 or self._close_attempted:
            return

        current_price = get_current_price(self.symbol)
        if current_price <= 0:
            return

        if self.side == "BUY":
            profit = (current_price - self.entry) * abs(self.qty)
        else:
            profit = (self.entry - current_price) * abs(self.qty)
            
        invested = self.entry * abs(self.qty) / self.lev
        if invested <= 0:
            return
            
        roi = (profit / invested) * 100

        if self.tp is not None and roi >= self.tp:
            self.close_position(f"‚úÖ ƒê·∫°t TP {self.tp}% (ROI: {roi:.2f}%)")
        elif self.sl is not None and self.sl > 0 and roi <= -self.sl:
            self.close_position(f"‚ùå ƒê·∫°t SL {self.sl}% (ROI: {roi:.2f}%)")

# ========== C√ÅC CHI·∫æN L∆Ø·ª¢C GIAO D·ªäCH ==========
class RSI_EMA_Bot(BaseBot):
    def __init__(self, symbol, lev, percent, tp, sl, ws_manager, api_key, api_secret, telegram_bot_token, telegram_chat_id):
        super().__init__(symbol, lev, percent, tp, sl, ws_manager, api_key, api_secret, telegram_bot_token, telegram_chat_id, "RSI/EMA Recursive")
        self.rsi_period = 14
        self.ema_fast = 9
        self.ema_slow = 21
        self.rsi_oversold = 30
        self.rsi_overbought = 70

    def get_signal(self):
        try:
            if len(self.prices) < 50:
                return None

            rsi = calc_rsi(self.prices, self.rsi_period)
            ema_fast = calc_ema(self.prices, self.ema_fast)
            ema_slow = calc_ema(self.prices, self.ema_slow)

            if rsi is None or ema_fast is None or ema_slow is None:
                return None

            signal = None
            if rsi < self.rsi_oversold and ema_fast > ema_slow:
                signal = "BUY"
            elif rsi > self.rsi_overbought and ema_fast < ema_slow:
                signal = "SELL"

            return signal

        except Exception as e:
            return None

class EMA_Crossover_Bot(BaseBot):
    def __init__(self, symbol, lev, percent, tp, sl, ws_manager, api_key, api_secret, telegram_bot_token, telegram_chat_id):
        super().__init__(symbol, lev, percent, tp, sl, ws_manager, api_key, api_secret, telegram_bot_token, telegram_chat_id, "EMA Crossover")
        self.ema_fast = 9
        self.ema_slow = 21
        self.prev_ema_fast = None
        self.prev_ema_slow = None

    def get_signal(self):
        try:
            if len(self.prices) < 50:
                return None

            ema_fast = calc_ema(self.prices, self.ema_fast)
            ema_slow = calc_ema(self.prices, self.ema_slow)

            if ema_fast is None or ema_slow is None:
                return None

            signal = None
            if self.prev_ema_fast is not None and self.prev_ema_slow is not None:
                if self.prev_ema_fast <= self.prev_ema_slow and ema_fast > ema_slow:
                    signal = "BUY"
                elif self.prev_ema_fast >= self.prev_ema_slow and ema_fast < ema_slow:
                    signal = "SELL"

            self.prev_ema_fast = ema_fast
            self.prev_ema_slow = ema_slow

            return signal

        except Exception as e:
            return None

class Reverse_24h_Bot(BaseBot):
    def __init__(self, symbol, lev, percent, tp, sl, ws_manager, api_key, api_secret, telegram_bot_token, telegram_chat_id, threshold=30, config_key=None):
        super().__init__(symbol, lev, percent, tp, sl, ws_manager, api_key, api_secret, telegram_bot_token, telegram_chat_id, "Reverse 24h", config_key)
        self.threshold = threshold
        self.last_24h_check = 0
        self.last_reported_change = 0

    def get_signal(self):
        try:
            current_time = time.time()
            if current_time - self.last_24h_check < 60:
                return None

            change_24h = get_24h_change(self.symbol)
            self.last_24h_check = current_time

            if change_24h is None:
                return None
                
            if abs(change_24h - self.last_reported_change) > 5:
                self.log(f"üìä Bi·∫øn ƒë·ªông 24h: {change_24h:.2f}% | Ng∆∞·ª°ng: {self.threshold}%")
                self.last_reported_change = change_24h

            signal = None
            if abs(change_24h) >= self.threshold:
                if change_24h > 0:
                    signal = "SELL"
                    self.log(f"üéØ T√≠n hi·ªáu SELL - Bi·∫øn ƒë·ªông 24h: +{change_24h:.2f}% (‚â• {self.threshold}%)")
                else:
                    signal = "BUY" 
                    self.log(f"üéØ T√≠n hi·ªáu BUY - Bi·∫øn ƒë·ªông 24h: {change_24h:.2f}% (‚â§ -{self.threshold}%)")

            return signal

        except Exception as e:
            self.log(f"‚ùå L·ªói t√≠n hi·ªáu Reverse 24h: {str(e)}")
            return None

class Trend_Following_Bot(BaseBot):
    def __init__(self, symbol, lev, percent, tp, sl, ws_manager, api_key, api_secret, telegram_bot_token, telegram_chat_id, config_key=None):
        super().__init__(symbol, lev, percent, tp, sl, ws_manager, api_key, api_secret, telegram_bot_token, telegram_chat_id, "Trend Following", config_key)
        self.trend_period = 20
        self.trend_threshold = 0.001

    def get_signal(self):
        try:
            if len(self.prices) < self.trend_period + 1:
                return None

            recent_prices = self.prices[-self.trend_period:]
            if len(recent_prices) < 2:
                return None
                
            price_change = (recent_prices[-1] - recent_prices[0]) / recent_prices[0]

            signal = None
            if price_change > self.trend_threshold:
                signal = "BUY"
            elif price_change < -self.trend_threshold:
                signal = "SELL"

            return signal

        except Exception as e:
            return None

class Scalping_Bot(BaseBot):
    def __init__(self, symbol, lev, percent, tp, sl, ws_manager, api_key, api_secret, telegram_bot_token, telegram_chat_id, config_key=None):
        super().__init__(symbol, lev, percent, tp, sl, ws_manager, api_key, api_secret, telegram_bot_token, telegram_chat_id, "Scalping", config_key)
        self.rsi_period = 7
        self.min_movement = 0.001

    def get_signal(self):
        try:
            if len(self.prices) < 20:
                return None

            current_price = self.prices[-1]
            price_change = 0
            if len(self.prices) >= 2:
                price_change = (current_price - self.prices[-2]) / self.prices[-2]

            rsi = calc_rsi(self.prices, self.rsi_period)

            if rsi is None:
                return None

            signal = None
            if rsi < 25 and price_change < -self.min_movement:
                signal = "BUY"
            elif rsi > 75 and price_change > self.min_movement:
                signal = "SELL"

            return signal

        except Exception as e:
            return None

class Safe_Grid_Bot(BaseBot):
    def __init__(self, symbol, lev, percent, tp, sl, ws_manager, api_key, api_secret, telegram_bot_token, telegram_chat_id, grid_levels=5, config_key=None):
        super().__init__(symbol, lev, percent, tp, sl, ws_manager, api_key, api_secret, telegram_bot_token, telegram_chat_id, "Safe Grid", config_key)
        self.grid_levels = grid_levels
        self.orders_placed = 0

    def get_signal(self):
        try:
            if self.orders_placed < self.grid_levels:
                self.orders_placed += 1
                if self.orders_placed % 2 == 1:
                    return "BUY"
                else:
                    return "SELL"
            return None
        except Exception as e:
            return None

# ========== BOT ƒê·ªòNG TH√îNG MINH ==========
class SmartDynamicBot(BaseBot):
    """BOT ƒê·ªòNG TH√îNG MINH - K·∫æT H·ª¢P NHI·ªÄU CHI·∫æN L∆Ø·ª¢C"""
    
    def __init__(self, symbol, lev, percent, tp, sl, ws_manager, api_key, api_secret, 
                 telegram_bot_token, telegram_chat_id, config_key=None):
        
        super().__init__(symbol, lev, percent, tp, sl, ws_manager, api_key, api_secret,
                        telegram_bot_token, telegram_chat_id, "Smart Dynamic", config_key)

    def get_signal(self):
        """K·∫æT H·ª¢P NHI·ªÄU CHI·∫æN L∆Ø·ª¢C ƒê·ªÇ RA T√çN HI·ªÜU T·ªêI ∆ØU"""
        try:
            if len(self.prices) < 50:
                return None

            # 1. RSI SIGNAL
            rsi = calc_rsi(self.prices, 14)
            
            # 2. EMA SIGNAL  
            ema_fast = calc_ema(self.prices, 9)
            ema_slow = calc_ema(self.prices, 21)
            
            # 3. TREND SIGNAL
            trend_strength = self._calculate_trend_strength()
            
            # 4. VOLATILITY CHECK
            volatility = self._calculate_volatility()
            
            if None in [rsi, ema_fast, ema_slow]:
                return None

            signal = None
            score = 0
            
            # RSI + EMA CONFIRMATION
            if rsi < 30 and ema_fast > ema_slow:
                score += 2
                signal = "BUY"
            elif rsi > 70 and ema_fast < ema_slow:
                score += 2
                signal = "SELL"
            
            # TREND CONFIRMATION
            if trend_strength > 0.5 and signal == "BUY":
                score += 1
            elif trend_strength < -0.5 and signal == "SELL":
                score += 1
            
            # VOLATILITY FILTER (tr√°nh market qu√° bi·∫øn ƒë·ªông)
            if volatility > 8.0:
                score -= 1
            
            # CH·ªà V√ÄO L·ªÜNH KHI SCORE ƒê·ª¶ CAO
            if score >= 2:
                self.log(f"üéØ Smart Signal: {signal} | Score: {score}/3 | RSI: {rsi:.1f} | Trend: {trend_strength:.2f}")
                return signal
            
            return None

        except Exception as e:
            self.log(f"‚ùå L·ªói Smart Dynamic signal: {str(e)}")
            return None

    def _calculate_trend_strength(self):
        """T√≠nh strength c·ªßa trend"""
        if len(self.prices) < 20:
            return 0
            
        short_trend = (self.prices[-1] - self.prices[-5]) / self.prices[-5]
        medium_trend = (self.prices[-1] - self.prices[-10]) / self.prices[-10]
        long_trend = (self.prices[-1] - self.prices[-20]) / self.prices[-20]
        
        return (short_trend + medium_trend + long_trend) / 3

    def _calculate_volatility(self):
        """T√≠nh ƒë·ªô bi·∫øn ƒë·ªông"""
        if len(self.prices) < 20:
            return 0
            
        returns = []
        for i in range(1, len(self.prices)):
            ret = (self.prices[i] - self.prices[i-1]) / self.prices[i-1]
            returns.append(abs(ret))
            
        return np.mean(returns) * 100


# ========== BOT MANAGER HO√ÄN CH·ªàNH V·ªöI n COIN CHO M·ªñI CHI·∫æN L∆Ø·ª¢C ==========
class BotManager:
    def __init__(self, api_key=None, api_secret=None, telegram_bot_token=None, telegram_chat_id=None):
        self.ws_manager = WebSocketManager()
        self.bots = {}
        self.running = True
        self.start_time = time.time()
        self.user_states = {}
        
        self.auto_strategies = {}
        self.last_auto_scan = 0
        self.auto_scan_interval = 600
        
        # Dictionary l∆∞u danh s√°ch coin target cho m·ªói config
        self.target_coins = {}  # {strategy_key: [coin1, coin2, ...]}
        # Dictionary l∆∞u s·ªë l∆∞·ª£ng bot t·ªëi ƒëa cho m·ªói config
        self.max_bots_per_config = {}  # {strategy_key: n}
        
        # Dictionary theo d√µi th·ªùi gian ch·ªù cho m·ªói chi·∫øn l∆∞·ª£c
        self.strategy_cooldowns = {
            "Reverse 24h": {},
            "Scalping": {},
            "Trend Following": {},
            "Safe Grid": {},
            "Smart Dynamic": {}
        }
        self.cooldown_period = 300  # 5 ph√∫t cooldown
        
        self.api_key = api_key
        self.api_secret = api_secret
        self.telegram_bot_token = telegram_bot_token
        self.telegram_chat_id = telegram_chat_id
        
        if api_key and api_secret:
            self._verify_api_connection()
            self.log("üü¢ H·ªÜ TH·ªêNG BOT TH√îNG MINH ƒê√É KH·ªûI ƒê·ªòNG - n COIN/CHI·∫æN L∆Ø·ª¢C")
            
            self.telegram_thread = threading.Thread(target=self._telegram_listener, daemon=True)
            self.telegram_thread.start()
            
            self.auto_scan_thread = threading.Thread(target=self._auto_scan_loop, daemon=True)
            self.auto_scan_thread.start()
            
            if self.telegram_chat_id:
                self.send_main_menu(self.telegram_chat_id)
        else:
            self.log("‚ö° BotManager kh·ªüi ƒë·ªông ·ªü ch·∫ø ƒë·ªô kh√¥ng config")

    def _verify_api_connection(self):
        balance = get_balance(self.api_key, self.api_secret)
        if balance is None:
            self.log("‚ùå L·ªñI: Kh√¥ng th·ªÉ k·∫øt n·ªëi Binance API.")
        else:
            self.log(f"‚úÖ K·∫øt n·ªëi Binance th√†nh c√¥ng! S·ªë d∆∞: {balance:.2f} USDT")

    def log(self, message):
        logger.info(f"[SYSTEM] {message}")
        if self.telegram_bot_token and self.telegram_chat_id:
            send_telegram(f"<b>SYSTEM</b>: {message}", 
                         bot_token=self.telegram_bot_token, 
                         default_chat_id=self.telegram_chat_id)

    def send_main_menu(self, chat_id):
        welcome = "ü§ñ <b>BOT GIAO D·ªäCH FUTURES TH√îNG MINH</b>\n\nüéØ <b>H·ªÜ TH·ªêNG n COIN/CHI·∫æN L∆Ø·ª¢C</b>"
        send_telegram(welcome, chat_id, create_main_menu(),
                     bot_token=self.telegram_bot_token, 
                     default_chat_id=self.telegram_chat_id)

    def _is_in_cooldown(self, strategy_type, config_key):
        """Ki·ªÉm tra xem chi·∫øn l∆∞·ª£c c√≥ ƒëang trong th·ªùi gian ch·ªù kh√¥ng"""
        if strategy_type not in self.strategy_cooldowns:
            return False
            
        last_cooldown_time = self.strategy_cooldowns[strategy_type].get(config_key)
        if last_cooldown_time is None:
            return False
            
        current_time = time.time()
        if current_time - last_cooldown_time < self.cooldown_period:
            return True
            
        # H·∫øt cooldown, x√≥a kh·ªèi danh s√°ch
        del self.strategy_cooldowns[strategy_type][config_key]
        return False

    def _find_qualified_symbols(self, strategy_type, leverage, config, strategy_key):
        """T√¨m coin ph√π h·ª£p cho chi·∫øn l∆∞·ª£c - T√åM n COIN"""
        try:
            threshold = config.get('threshold', 30)
            volatility = config.get('volatility', 3)
            grid_levels = config.get('grid_levels', 5)
            
            # L·∫•y s·ªë l∆∞·ª£ng coin c·∫ßn t√¨m t·ª´ config
            max_bots = self.max_bots_per_config.get(strategy_key, 2)
            
            qualified_symbols = get_qualified_symbols(
                self.api_key, self.api_secret, strategy_type, leverage,
                threshold, volatility, grid_levels, 
                max_candidates=20, 
                final_limit=max_bots,  # T√åM n COIN
                strategy_key=strategy_key
            )
            
            return qualified_symbols
            
        except Exception as e:
            self.log(f"‚ùå L·ªói t√¨m coin: {str(e)}")
            return []

    def _find_and_populate_target_coins(self, strategy_type, leverage, config, strategy_key, max_bots=2):
        """T√¨m v√† t·∫°o danh s√°ch coin target cho config - T√åM n COIN NGAY L·∫¨P T·ª®C"""
        try:
            if strategy_key not in self.target_coins:
                self.target_coins[strategy_key] = []
                self.max_bots_per_config[strategy_key] = max_bots
            
            current_count = len(self.target_coins[strategy_key])
            needed_count = max_bots - current_count
            
            if needed_count <= 0:
                return self.target_coins[strategy_key]
            
            logger.info(f"üîÑ ƒêang t√¨m {needed_count} coin cho {strategy_type} (Config: {strategy_key})")
            
            # T√åM n COIN NGAY L·∫¨P T·ª®C
            new_symbols = self._find_qualified_symbols(strategy_type, leverage, config, strategy_key)
            
            added_count = 0
            for symbol in new_symbols:
                if symbol not in self.target_coins[strategy_key] and added_count < needed_count:
                    self.target_coins[strategy_key].append(symbol)
                    logger.info(f"‚úÖ ƒê√£ th√™m {symbol} v√†o danh s√°ch target cho {strategy_key}")
                    added_count += 1
            
            # T·∫†O BOT CHO T·∫§T C·∫¢ COIN TRONG DANH S√ÅCH
            self._create_all_bots_from_target_list(strategy_key)
            
            return self.target_coins[strategy_key]
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói populate target coins: {str(e)}")
            return []

    def _create_all_bots_from_target_list(self, strategy_key):
        """T·∫°o bot cho t·∫•t c·∫£ coin trong danh s√°ch target - ƒê·∫¢M B·∫¢O T·∫†O M·ªöI"""
        try:
            if strategy_key not in self.target_coins or not self.target_coins[strategy_key]:
                return False
            
            strategy_config = self.auto_strategies.get(strategy_key)
            if not strategy_config:
                return False
            
            created_count = 0
            max_bots = self.max_bots_per_config.get(strategy_key, 2)
            
            for symbol in self.target_coins[strategy_key]:
                if created_count >= max_bots:
                    break
                    
                bot_id = f"{symbol}_{strategy_key}"
                
                # CH·ªà T·∫†O BOT N·∫æU CH∆ØA T·ªíN T·∫†I
                if bot_id not in self.bots:
                    strategy_type = strategy_config['strategy_type']
                    success = self._create_auto_bot(symbol, strategy_type, strategy_config)
                    if success:
                        created_count += 1
                        logger.info(f"‚úÖ ƒê√£ t·∫°o bot {bot_id} t·ª´ danh s√°ch target")
            
            if created_count > 0:
                logger.info(f"üéØ ƒê√£ t·∫°o {created_count} bot m·ªõi cho {strategy_key}")
            
            return created_count > 0
                
        except Exception as e:
            logger.error(f"‚ùå L·ªói t·∫°o bot t·ª´ target list: {str(e)}")
            return False
    def _scan_auto_strategies(self):
        """Qu√©t v√† b·ªï sung coin cho c√°c chi·∫øn thu·∫≠t t·ª± ƒë·ªông"""
        if not self.auto_strategies:
            return
            
        self.log("üîÑ ƒêang qu√©t coin cho c√°c c·∫•u h√¨nh t·ª± ƒë·ªông...")
        
        for strategy_key, strategy_config in self.auto_strategies.items():
            try:
                strategy_type = strategy_config['strategy_type']
                
                # KI·ªÇM TRA COOLDOWN
                if self._is_in_cooldown(strategy_type, strategy_key):
                    continue
                
                coin_manager = CoinManager()
                current_bots_count = coin_manager.count_bots_by_config(strategy_key)
                max_bots = self.max_bots_per_config.get(strategy_key, 2)
                
                # N·∫æU CH∆ØA ƒê·ª¶ BOT, T√åM V√Ä TH√äM V√ÄO DANH S√ÅCH TARGET
                if current_bots_count < max_bots:
                    self.log(f"üîÑ {strategy_type} (Config: {strategy_key}): ƒëang c√≥ {current_bots_count}/{max_bots} bot, t√¨m coin...")
                    
                    # T√¨m v√† th√™m coin v√†o danh s√°ch target
                    target_coins = self._find_and_populate_target_coins(
                        strategy_type, 
                        strategy_config['leverage'], 
                        strategy_config, 
                        strategy_key,
                        max_bots
                    )
                    
                    current_after = coin_manager.count_bots_by_config(strategy_key)
                    if current_after > current_bots_count:
                        self.log(f"‚úÖ {strategy_type}: ƒë√£ th√™m {current_after - current_bots_count} bot m·ªõi")
                    
                    if target_coins:
                        self.log(f"üéØ {strategy_type}: danh s√°ch target - {target_coins}")
                    else:
                        self.log(f"‚ö†Ô∏è {strategy_type}: kh√¥ng t√¨m th·∫•y coin ph√π h·ª£p cho danh s√°ch target")
                else:
                    self.log(f"‚úÖ {strategy_type} (Config: {strategy_key}): ƒë√£ ƒë·ªß {current_bots_count}/{max_bots} bot")
                        
            except Exception as e:
                self.log(f"‚ùå L·ªói qu√©t {strategy_type}: {str(e)}")

    def _handle_coin_after_close(self, strategy_key, closed_symbol):
        """X·ª≠ l√Ω khi m·ªôt coin ƒë√≥ng l·ªánh - CH·ªà X√ìA COIN, GI·ªÆ CONFIG"""
        try:
            # 1. X√ìA COIN ƒê√ìNG L·ªÜNH KH·ªéI DANH S√ÅCH TARGET
            if strategy_key in self.target_coins and closed_symbol in self.target_coins[strategy_key]:
                self.target_coins[strategy_key].remove(closed_symbol)
                self.log(f"üóëÔ∏è ƒê√£ x√≥a {closed_symbol} kh·ªèi danh s√°ch target {strategy_key}")
            
            # 2. D·ª™NG BOT C·ª¶A COIN ƒê√ìNG L·ªÜNH
            bot_id_to_remove = f"{closed_symbol}_{strategy_key}"
            if bot_id_to_remove in self.bots:
                self.stop_bot(bot_id_to_remove)
                self.log(f"üî¥ ƒê√£ d·ª´ng bot {bot_id_to_remove}")
            
            # 3. QUAN TR·ªåNG: LU√îN T√åM COIN M·ªöI - KH√îNG BAO GI·ªú X√ìA CONFIG
            strategy_config = self.auto_strategies.get(strategy_key)
            if strategy_config:
                # T√åM COIN M·ªöI THAY TH·∫æ
                new_symbols = self._find_qualified_symbols(
                    strategy_config['strategy_type'],
                    strategy_config['leverage'], 
                    strategy_config,
                    strategy_key
                )
                
                for symbol in new_symbols:
                    if (symbol not in self.target_coins.get(strategy_key, []) and 
                        symbol != closed_symbol):
                        
                        # TH√äM V√ÄO DANH S√ÅCH TARGET
                        if strategy_key not in self.target_coins:
                            self.target_coins[strategy_key] = []
                        self.target_coins[strategy_key].append(symbol)
                        
                        # T·∫†O BOT M·ªöI
                        success = self._create_auto_bot(symbol, strategy_config['strategy_type'], strategy_config)
                        if success:
                            self.log(f"‚úÖ ƒê√£ t·∫°o bot m·ªõi {symbol} thay th·∫ø {closed_symbol}")
                            break  # CH·ªà TH√äM 1 COIN M·ªöI
                
        except Exception as e:
            self.log(f"‚ùå L·ªói x·ª≠ l√Ω coin sau khi ƒë√≥ng: {str(e)}")

    def _auto_scan_loop(self):
        """V√íNG L·∫∂P T·ª∞ ƒê·ªòNG QU√âT COIN"""
        while self.running:
            try:
                current_time = time.time()
                
                # X·ª¨ L√ù BOT ƒê·ªòNG ƒê√ìNG L·ªÜNH
                for bot_id, bot in list(self.bots.items()):
                    if (hasattr(bot, 'config_key') and bot.config_key and
                        not bot.position_open and 
                        current_time - bot.last_close_time < 300 and
                        bot.strategy_name in ["Reverse 24h", "Scalping", "Safe Grid", "Trend Following", "Smart Dynamic"]):
                        
                        # KI·ªÇM TRA COOLDOWN
                        if current_time - getattr(bot, '_last_find_attempt', 0) > 300:
                            self.log(f"üîÑ Bot ƒë·ªông {bot_id} ƒëang t√¨m coin m·ªõi sau khi ƒë√≥ng l·ªánh...")
                            bot._last_find_attempt = current_time
                            # G·ªçi tr·ª±c ti·∫øp h√†m x·ª≠ l√Ω c·ªßa BotManager
                            self._handle_coin_after_close(bot.config_key, bot.symbol)
                
                # QU√âT T·ª∞ ƒê·ªòNG ƒê·ªäNH K·ª≤
                if current_time - self.last_auto_scan > self.auto_scan_interval:
                    self._scan_auto_strategies()
                    self.last_auto_scan = current_time
                
                time.sleep(60)
                
            except Exception as e:
                self.log(f"‚ùå L·ªói auto scan: {str(e)}")
                time.sleep(60)

    def _create_auto_bot(self, symbol, strategy_type, config):
        """T·∫°o bot t·ª± ƒë·ªông"""
        try:
            leverage = config['leverage']
            percent = config['percent']
            tp = config['tp']
            sl = config['sl']
            strategy_key = config['strategy_key']
            
            bot_class = {
                "Reverse 24h": Reverse_24h_Bot,
                "Scalping": Scalping_Bot,
                "Safe Grid": Safe_Grid_Bot,
                "Trend Following": Trend_Following_Bot,
                "Smart Dynamic": SmartDynamicBot
            }.get(strategy_type)
            
            if not bot_class:
                return False
            
            if strategy_type == "Reverse 24h":
                threshold = config.get('threshold', 30)
                bot = bot_class(symbol, leverage, percent, tp, sl, self.ws_manager,
                              self.api_key, self.api_secret, self.telegram_bot_token, 
                              self.telegram_chat_id, threshold, strategy_key)
            elif strategy_type == "Safe Grid":
                grid_levels = config.get('grid_levels', 5)
                bot = bot_class(symbol, leverage, percent, tp, sl, self.ws_manager,
                              self.api_key, self.api_secret, self.telegram_bot_token,
                              self.telegram_chat_id, grid_levels, strategy_key)
            else:
                bot = bot_class(symbol, leverage, percent, tp, sl, self.ws_manager,
                              self.api_key, self.api_secret, self.telegram_bot_token,
                              self.telegram_chat_id, strategy_key)
            
            # G√°n tham chi·∫øu ƒë·∫øn BotManager ƒë·ªÉ c√≥ th·ªÉ g·ªçi _handle_coin_after_close
            bot._bot_manager = self
            
            bot_id = f"{symbol}_{strategy_key}"
            self.bots[bot_id] = bot
            return True
            
        except Exception as e:
            self.log(f"‚ùå L·ªói t·∫°o bot {symbol}: {str(e)}")
            return False

    def add_bot(self, symbol, lev, percent, tp, sl, strategy_type, bot_count=1, **kwargs):
        """Th√™m bot v·ªõi c∆° ch·∫ø n coin cho m·ªói chi·∫øn l∆∞·ª£c"""
        if sl == 0:
            sl = None
            
        if not self.api_key or not self.api_secret:
            self.log("‚ùå Ch∆∞a thi·∫øt l·∫≠p API Key trong BotManager")
            return False
        
        test_balance = get_balance(self.api_key, self.api_secret)
        if test_balance is None:
            self.log("‚ùå L·ªñI: Kh√¥ng th·ªÉ k·∫øt n·ªëi Binance")
            return False
        
        bot_mode = kwargs.get('bot_mode', 'static')
        
        # BOT ƒê·ªòNG - T√åM n COIN CHO M·ªñI CHI·∫æN L∆Ø·ª¢C
        if bot_mode == 'dynamic' and strategy_type in ["Reverse 24h", "Scalping", "Safe Grid", "Trend Following", "Smart Dynamic"]:
            strategy_key = f"{strategy_type}_{lev}_{percent}_{tp}_{sl}"
            
            # Th√™m tham s·ªë ƒë·∫∑c bi·ªát
            if strategy_type == "Reverse 24h":
                threshold = kwargs.get('threshold', 30)
                strategy_key += f"_th{threshold}"
            elif strategy_type == "Scalping":
                volatility = kwargs.get('volatility', 3)
                strategy_key += f"_vol{volatility}"
            elif strategy_type == "Safe Grid":
                grid_levels = kwargs.get('grid_levels', 5)
                strategy_key += f"_grid{grid_levels}"
            
            # KI·ªÇM TRA COOLDOWN
            if self._is_in_cooldown(strategy_type, strategy_key):
                self.log(f"‚è∞ {strategy_type} (Config: {strategy_key}): ƒëang trong cooldown, kh√¥ng th·ªÉ th√™m m·ªõi")
                return False
            
            self.auto_strategies[strategy_key] = {
                'strategy_type': strategy_type,
                'leverage': lev,
                'percent': percent,
                'tp': tp,
                'sl': sl,
                'strategy_key': strategy_key,
                **kwargs
            }
            
            # THI·∫æT L·∫¨P S·ªê L∆Ø·ª¢NG BOT T·ªêI ƒêA
            self.max_bots_per_config[strategy_key] = bot_count
            
            # T√åM V√Ä T·∫†O n COIN NGAY L·∫¨P T·ª®C
            target_coins = self._find_and_populate_target_coins(
                strategy_type, lev, self.auto_strategies[strategy_key], 
                strategy_key, bot_count
            )
            
            success_count = len([bot_id for bot_id in self.bots.keys() if strategy_key in bot_id])
            
            if success_count > 0:
                success_msg = (
                    f"‚úÖ <b>ƒê√É T·∫†O {success_count}/{bot_count} BOT {strategy_type}</b>\n\n"
                    f"üéØ Chi·∫øn l∆∞·ª£c: {strategy_type}\n"
                    f"üí∞ ƒê√≤n b·∫©y: {lev}x\n"
                    f"üìä % S·ªë d∆∞: {percent}%\n"
                    f"üéØ TP: {tp}%\n"
                    f"üõ°Ô∏è SL: {sl}%\n"
                )
                if strategy_type == "Reverse 24h":
                    success_msg += f"üìà Ng∆∞·ª°ng: {threshold}%\n"
                elif strategy_type == "Scalping":
                    success_msg += f"‚ö° Bi·∫øn ƒë·ªông: {volatility}%\n"
                elif strategy_type == "Safe Grid":
                    success_msg += f"üõ°Ô∏è S·ªë l·ªánh: {grid_levels}\n"
                    
                success_msg += f"ü§ñ Coin: {', '.join(target_coins) if target_coins else 'ƒêang t√¨m...'}\n\n"
                success_msg += f"üîë <b>Config Key:</b> {strategy_key}\n"
                success_msg += f"üéØ <b>M·ªói chi·∫øn l∆∞·ª£c c√≥ {bot_count} coin ri√™ng bi·ªát</b>"
                
                self.log(success_msg)
                return True
            else:
                self.log(f"‚ö†Ô∏è {strategy_type}: ƒëang t√¨m coin ph√π h·ª£p, s·∫Ω th·ª≠ l·∫°i sau")
                return True
        
        # CHI·∫æN L∆Ø·ª¢C TH·ª¶ C√îNG
        else:
            symbol = symbol.upper()
            bot_id = f"{symbol}_{strategy_type}"
            
            if bot_id in self.bots:
                self.log(f"‚ö†Ô∏è ƒê√£ c√≥ bot {strategy_type} cho {symbol}")
                return False
                
            try:
                bot_class = {
                    "RSI/EMA Recursive": RSI_EMA_Bot,
                    "EMA Crossover": EMA_Crossover_Bot
                }.get(strategy_type)
                
                if not bot_class:
                    self.log(f"‚ùå Chi·∫øn l∆∞·ª£c {strategy_type} kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£")
                    return False
                
                bot = bot_class(symbol, lev, percent, tp, sl, self.ws_manager,
                              self.api_key, self.api_secret, self.telegram_bot_token, 
                              self.telegram_chat_id)
                
                self.bots[bot_id] = bot
                self.log(f"‚úÖ ƒê√£ th√™m bot {strategy_type}: {symbol} | ƒêB: {lev}x | V·ªën: {percent}% | TP/SL: {tp}%/{sl}%")
                return True
                
            except Exception as e:
                error_msg = f"‚ùå L·ªói t·∫°o bot {symbol}: {str(e)}"
                self.log(error_msg)
                return False

    def stop_bot(self, bot_id):
        bot = self.bots.get(bot_id)
        if bot:
            # X√≥a coin kh·ªèi danh s√°ch target n·∫øu l√† bot ƒë·ªông
            if hasattr(bot, 'config_key') and bot.config_key:
                strategy_key = bot.config_key
                if strategy_key in self.target_coins and bot.symbol in self.target_coins[strategy_key]:
                    self.target_coins[strategy_key].remove(bot.symbol)
                    self.log(f"üóëÔ∏è ƒê√£ x√≥a {bot.symbol} kh·ªèi danh s√°ch target {strategy_key}")
            
            # D·ª™NG V√Ä X√ìA BOT HO√ÄN TO√ÄN
            bot.stop()
            del self.bots[bot_id]
            self.log(f"‚õî ƒê√£ d·ª´ng v√† x√≥a bot {bot_id}")
            return True
        return False
    def stop_all(self):
        self.log("‚õî ƒêang d·ª´ng t·∫•t c·∫£ bot...")
        for bot_id in list(self.bots.keys()):
            self.stop_bot(bot_id)
        self.ws_manager.stop()
        self.running = False
        self.log("üî¥ H·ªá th·ªëng ƒë√£ d·ª´ng")

    def _telegram_listener(self):
        last_update_id = 0
        
        while self.running and self.telegram_bot_token:
            try:
                url = f"https://api.telegram.org/bot{self.telegram_bot_token}/getUpdates?offset={last_update_id+1}&timeout=30"
                response = requests.get(url, timeout=35)
                
                if response.status_code == 200:
                    data = response.json()
                    if data.get('ok'):
                        for update in data['result']:
                            update_id = update['update_id']
                            message = update.get('message', {})
                            chat_id = str(message.get('chat', {}).get('id'))
                            text = message.get('text', '').strip()
                            
                            if chat_id != self.telegram_chat_id:
                                continue
                            
                            if update_id > last_update_id:
                                last_update_id = update_id
                            
                            self._handle_telegram_message(chat_id, text)
                elif response.status_code == 409:
                    logger.error("L·ªói xung ƒë·ªôt Telegram")
                    time.sleep(60)
                else:
                    time.sleep(10)
                
            except Exception as e:
                logger.error(f"L·ªói Telegram listener: {str(e)}")
                time.sleep(10)

    def _handle_telegram_message(self, chat_id, text):
        user_state = self.user_states.get(chat_id, {})
        current_step = user_state.get('step')
        
        # X·ª¨ L√ù C√ÅC B∆Ø·ªöC T·∫†O BOT THEO TH·ª® T·ª∞
        if current_step == 'waiting_bot_count':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy th√™m bot", chat_id, create_main_menu(),
                            self.telegram_bot_token, self.telegram_chat_id)
            else:
                try:
                    bot_count = int(text)
                    if bot_count <= 0 or bot_count > 5:
                        send_telegram("‚ö†Ô∏è S·ªë l∆∞·ª£ng bot ph·∫£i t·ª´ 1 ƒë·∫øn 5. Vui l√≤ng ch·ªçn l·∫°i:",
                                    chat_id, create_bot_count_keyboard(),
                                    self.telegram_bot_token, self.telegram_chat_id)
                        return

                    user_state['bot_count'] = bot_count
                    user_state['step'] = 'waiting_bot_mode'
                    
                    send_telegram(
                        f"ü§ñ S·ªë l∆∞·ª£ng bot: {bot_count}\n\n"
                        f"Ch·ªçn ch·∫ø ƒë·ªô bot:",
                        chat_id,
                        create_bot_mode_keyboard(),
                        self.telegram_bot_token, self.telegram_chat_id
                    )
                except ValueError:
                    send_telegram("‚ö†Ô∏è Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá cho s·ªë l∆∞·ª£ng bot:",
                                chat_id, create_bot_count_keyboard(),
                                self.telegram_bot_token, self.telegram_chat_id)

        elif current_step == 'waiting_bot_mode':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy th√™m bot", chat_id, create_main_menu(),
                            self.telegram_bot_token, self.telegram_chat_id)
            elif text in ["ü§ñ Bot Tƒ©nh - Coin c·ª• th·ªÉ", "üîÑ Bot ƒê·ªông - T·ª± t√¨m coin"]:
                if text == "ü§ñ Bot Tƒ©nh - Coin c·ª• th·ªÉ":
                    user_state['bot_mode'] = 'static'
                    user_state['step'] = 'waiting_strategy'
                    send_telegram(
                        "üéØ <b>ƒê√É CH·ªåN: BOT Tƒ®NH</b>\n\n"
                        "ü§ñ Bot s·∫Ω giao d·ªãch coin C·ªê ƒê·ªäNH\n"
                        "üìä B·∫°n c·∫ßn ch·ªçn coin c·ª• th·ªÉ\n\n"
                        "Ch·ªçn chi·∫øn l∆∞·ª£c:",
                        chat_id,
                        create_strategy_keyboard(),
                        self.telegram_bot_token, self.telegram_chat_id
                    )
                else:
                    user_state['bot_mode'] = 'dynamic'
                    user_state['step'] = 'waiting_strategy'
                    send_telegram(
                        "üéØ <b>ƒê√É CH·ªåN: BOT ƒê·ªòNG</b>\n\n"
                        f"ü§ñ H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông t√¨m <b>{user_state.get('bot_count', 1)} coin</b> t·ªët nh·∫•t\n"
                        f"üîÑ T·ª± t√¨m coin m·ªõi sau khi ƒë√≥ng l·ªánh\n"
                        f"üìà M·ªói chi·∫øn l∆∞·ª£c c√≥ danh s√°ch coin ri√™ng\n\n"
                        "Ch·ªçn chi·∫øn l∆∞·ª£c:",
                        chat_id,
                        create_strategy_keyboard(),
                        self.telegram_bot_token, self.telegram_chat_id
                    )

        elif current_step == 'waiting_strategy':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy th√™m bot", chat_id, create_main_menu(),
                            self.telegram_bot_token, self.telegram_chat_id)
            elif text in ["ü§ñ RSI/EMA Recursive", "üìä EMA Crossover", "üéØ Reverse 24h", 
                         "üìà Trend Following", "‚ö° Scalping", "üõ°Ô∏è Safe Grid", "üîÑ Bot ƒê·ªông Th√¥ng Minh"]:
                
                # Map t√™n hi·ªÉn th·ªã sang t√™n chi·∫øn l∆∞·ª£c th·ª±c t·∫ø
                strategy_map = {
                    "ü§ñ RSI/EMA Recursive": "RSI/EMA Recursive",
                    "üìä EMA Crossover": "EMA Crossover", 
                    "üéØ Reverse 24h": "Reverse 24h",
                    "üìà Trend Following": "Trend Following",
                    "‚ö° Scalping": "Scalping",
                    "üõ°Ô∏è Safe Grid": "Safe Grid",
                    "üîÑ Bot ƒê·ªông Th√¥ng Minh": "Smart Dynamic"
                }
                
                strategy = strategy_map[text]
                user_state['strategy'] = strategy
                user_state['step'] = 'waiting_exit_strategy'
                
                strategy_descriptions = {
                    "RSI/EMA Recursive": "Ph√¢n t√≠ch RSI + EMA ƒë·ªá quy",
                    "EMA Crossover": "Giao c·∫Øt EMA nhanh/ch·∫≠m", 
                    "Reverse 24h": "ƒê·∫£o chi·ªÅu bi·∫øn ƒë·ªông 24h",
                    "Trend Following": "Theo xu h∆∞·ªõng gi√°",
                    "Scalping": "Giao d·ªãch t·ªëc ƒë·ªô cao",
                    "Safe Grid": "Grid an to√†n",
                    "Smart Dynamic": "Bot ƒë·ªông th√¥ng minh ƒëa chi·∫øn l∆∞·ª£c"
                }
                
                description = strategy_descriptions.get(strategy, "")
                bot_count = user_state.get('bot_count', 1)
                
                send_telegram(
                    f"üéØ <b>ƒê√É CH·ªåN: {strategy}</b>\n"
                    f"ü§ñ S·ªë l∆∞·ª£ng: {bot_count} coin\n\n"
                    f"{description}\n\n"
                    f"Ch·ªçn chi·∫øn l∆∞·ª£c tho√°t l·ªánh:",
                    chat_id,
                    create_exit_strategy_keyboard(),
                    self.telegram_bot_token, self.telegram_chat_id
                )

        elif current_step == 'waiting_exit_strategy':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy th√™m bot", chat_id, create_main_menu(),
                            self.telegram_bot_token, self.telegram_chat_id)
            elif text == "üéØ Ch·ªâ TP/SL c·ªë ƒë·ªãnh":
                user_state['exit_strategy'] = 'traditional'
                self._continue_bot_creation(chat_id, user_state)

        elif current_step == 'waiting_threshold':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy th√™m bot", chat_id, create_main_menu(),
                            self.telegram_bot_token, self.telegram_chat_id)
            else:
                try:
                    threshold = float(text)
                    if threshold <= 0:
                        send_telegram("‚ö†Ô∏è Ng∆∞·ª°ng ph·∫£i l·ªõn h∆°n 0. Vui l√≤ng ch·ªçn l·∫°i:",
                                    chat_id, create_threshold_keyboard(),
                                    self.telegram_bot_token, self.telegram_chat_id)
                        return

                    user_state['threshold'] = threshold
                    user_state['step'] = 'waiting_leverage'
                    send_telegram(
                        f"üìà Ng∆∞·ª°ng bi·∫øn ƒë·ªông: {threshold}%\n\n"
                        f"Ch·ªçn ƒë√≤n b·∫©y:",
                        chat_id,
                        create_leverage_keyboard(),
                        self.telegram_bot_token, self.telegram_chat_id
                    )
                except ValueError:
                    send_telegram("‚ö†Ô∏è Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá cho ng∆∞·ª°ng:",
                                chat_id, create_threshold_keyboard(),
                                self.telegram_bot_token, self.telegram_chat_id)

        elif current_step == 'waiting_volatility':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy th√™m bot", chat_id, create_main_menu(),
                            self.telegram_bot_token, self.telegram_chat_id)
            else:
                try:
                    volatility = float(text)
                    if volatility <= 0:
                        send_telegram("‚ö†Ô∏è Bi·∫øn ƒë·ªông ph·∫£i l·ªõn h∆°n 0. Vui l√≤ng ch·ªçn l·∫°i:",
                                    chat_id, create_volatility_keyboard(),
                                    self.telegram_bot_token, self.telegram_chat_id)
                        return

                    user_state['volatility'] = volatility
                    user_state['step'] = 'waiting_leverage'
                    send_telegram(
                        f"‚ö° Bi·∫øn ƒë·ªông t·ªëi thi·ªÉu: {volatility}%\n\n"
                        f"Ch·ªçn ƒë√≤n b·∫©y:",
                        chat_id,
                        create_leverage_keyboard(),
                        self.telegram_bot_token, self.telegram_chat_id
                    )
                except ValueError:
                    send_telegram("‚ö†Ô∏è Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá cho bi·∫øn ƒë·ªông:",
                                chat_id, create_volatility_keyboard(),
                                self.telegram_bot_token, self.telegram_chat_id)

        elif current_step == 'waiting_grid_levels':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy th√™m bot", chat_id, create_main_menu(),
                            self.telegram_bot_token, self.telegram_chat_id)
            else:
                try:
                    grid_levels = int(text)
                    if grid_levels <= 0:
                        send_telegram("‚ö†Ô∏è S·ªë l·ªánh grid ph·∫£i l·ªõn h∆°n 0. Vui l√≤ng ch·ªçn l·∫°i:",
                                    chat_id, create_grid_levels_keyboard(),
                                    self.telegram_bot_token, self.telegram_chat_id)
                        return

                    user_state['grid_levels'] = grid_levels
                    user_state['step'] = 'waiting_leverage'
                    send_telegram(
                        f"üõ°Ô∏è S·ªë l·ªánh grid: {grid_levels}\n\n"
                        f"Ch·ªçn ƒë√≤n b·∫©y:",
                        chat_id,
                        create_leverage_keyboard(),
                        self.telegram_bot_token, self.telegram_chat_id
                    )
                except ValueError:
                    send_telegram("‚ö†Ô∏è Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá cho s·ªë l·ªánh grid:",
                                chat_id, create_grid_levels_keyboard(),
                                self.telegram_bot_token, self.telegram_chat_id)

        elif current_step == 'waiting_symbol':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy th√™m bot", chat_id, create_main_menu(),
                            self.telegram_bot_token, self.telegram_chat_id)
            else:
                user_state['symbol'] = text
                user_state['step'] = 'waiting_leverage'
                send_telegram(
                    f"üîó Coin: {text}\n\n"
                    f"Ch·ªçn ƒë√≤n b·∫©y:",
                    chat_id,
                    create_leverage_keyboard(),
                    self.telegram_bot_token, self.telegram_chat_id
                )

        elif current_step == 'waiting_leverage':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy th√™m bot", chat_id, create_main_menu(),
                            self.telegram_bot_token, self.telegram_chat_id)
            else:
                # X·ª≠ l√Ω ƒë√≤n b·∫©y
                if text.endswith('x'):
                    lev_text = text[:-1]
                else:
                    lev_text = text

                try:
                    leverage = int(lev_text)
                    if leverage <= 0 or leverage > 100:
                        send_telegram("‚ö†Ô∏è ƒê√≤n b·∫©y ph·∫£i t·ª´ 1 ƒë·∫øn 100. Vui l√≤ng ch·ªçn l·∫°i:",
                                    chat_id, create_leverage_keyboard(),
                                    self.telegram_bot_token, self.telegram_chat_id)
                        return

                    user_state['leverage'] = leverage
                    user_state['step'] = 'waiting_percent'
                    
                    # L·∫•y s·ªë d∆∞ hi·ªán t·∫°i ƒë·ªÉ hi·ªÉn th·ªã
                    balance = get_balance(self.api_key, self.api_secret)
                    balance_info = f"\nüí∞ S·ªë d∆∞ hi·ªán c√≥: {balance:.2f} USDT" if balance else ""
                    
                    send_telegram(
                        f"üí∞ ƒê√≤n b·∫©y: {leverage}x{balance_info}\n\n"
                        f"Ch·ªçn % s·ªë d∆∞ cho m·ªói l·ªánh:",
                        chat_id,
                        create_percent_keyboard(),
                        self.telegram_bot_token, self.telegram_chat_id
                    )
                except ValueError:
                    send_telegram("‚ö†Ô∏è Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá cho ƒë√≤n b·∫©y:",
                                chat_id, create_leverage_keyboard(),
                                self.telegram_bot_token, self.telegram_chat_id)

        elif current_step == 'waiting_percent':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy th√™m bot", chat_id, create_main_menu(),
                            self.telegram_bot_token, self.telegram_chat_id)
            else:
                try:
                    percent = float(text)
                    if percent <= 0 or percent > 100:
                        send_telegram("‚ö†Ô∏è % s·ªë d∆∞ ph·∫£i t·ª´ 0.1 ƒë·∫øn 100. Vui l√≤ng ch·ªçn l·∫°i:",
                                    chat_id, create_percent_keyboard(),
                                    self.telegram_bot_token, self.telegram_chat_id)
                        return

                    user_state['percent'] = percent
                    user_state['step'] = 'waiting_tp'
                    
                    # T√≠nh s·ªë ti·ªÅn th·ª±c t·∫ø s·∫Ω s·ª≠ d·ª•ng
                    balance = get_balance(self.api_key, self.api_secret)
                    actual_amount = balance * (percent / 100) if balance else 0
                    
                    send_telegram(
                        f"üìä % S·ªë d∆∞: {percent}%\n"
                        f"üíµ S·ªë ti·ªÅn m·ªói l·ªánh: ~{actual_amount:.2f} USDT\n\n"
                        f"Ch·ªçn Take Profit (%):",
                        chat_id,
                        create_tp_keyboard(),
                        self.telegram_bot_token, self.telegram_chat_id
                    )
                except ValueError:
                    send_telegram("‚ö†Ô∏è Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá cho % s·ªë d∆∞:",
                                chat_id, create_percent_keyboard(),
                                self.telegram_bot_token, self.telegram_chat_id)

        elif current_step == 'waiting_tp':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy th√™m bot", chat_id, create_main_menu(),
                            self.telegram_bot_token, self.telegram_chat_id)
            else:
                try:
                    tp = float(text)
                    if tp <= 0:
                        send_telegram("‚ö†Ô∏è Take Profit ph·∫£i l·ªõn h∆°n 0. Vui l√≤ng ch·ªçn l·∫°i:",
                                    chat_id, create_tp_keyboard(),
                                    self.telegram_bot_token, self.telegram_chat_id)
                        return

                    user_state['tp'] = tp
                    user_state['step'] = 'waiting_sl'
                    
                    send_telegram(
                        f"üéØ Take Profit: {tp}%\n\n"
                        f"Ch·ªçn Stop Loss (%):",
                        chat_id,
                        create_sl_keyboard(),
                        self.telegram_bot_token, self.telegram_chat_id
                    )
                except ValueError:
                    send_telegram("‚ö†Ô∏è Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá cho Take Profit:",
                                chat_id, create_tp_keyboard(),
                                self.telegram_bot_token, self.telegram_chat_id)

        elif current_step == 'waiting_sl':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy th√™m bot", chat_id, create_main_menu(),
                            self.telegram_bot_token, self.telegram_chat_id)
            else:
                try:
                    sl = float(text)
                    if sl < 0:
                        send_telegram("‚ö†Ô∏è Stop Loss ph·∫£i l·ªõn h∆°n ho·∫∑c b·∫±ng 0. Vui l√≤ng ch·ªçn l·∫°i:",
                                    chat_id, create_sl_keyboard(),
                                    self.telegram_bot_token, self.telegram_chat_id)
                        return

                    user_state['sl'] = sl
                    
                    # T·∫†O BOT V·ªöI T·∫§T C·∫¢ TH√îNG TIN
                    strategy = user_state.get('strategy')
                    bot_mode = user_state.get('bot_mode', 'static')
                    leverage = user_state.get('leverage')
                    percent = user_state.get('percent')
                    tp = user_state.get('tp')
                    sl = user_state.get('sl')
                    symbol = user_state.get('symbol')
                    bot_count = user_state.get('bot_count', 1)
                    exit_strategy = user_state.get('exit_strategy', 'traditional')
                    
                    # C√°c tham s·ªë ƒë·∫∑c bi·ªát
                    threshold = user_state.get('threshold')
                    volatility = user_state.get('volatility')
                    grid_levels = user_state.get('grid_levels')
                    
                    success = False
                    
                    if bot_mode == 'static':
                        success = self.add_bot(
                            symbol=symbol,
                            lev=leverage,
                            percent=percent,
                            tp=tp,
                            sl=sl,
                            strategy_type=strategy
                        )
                    else:
                        success = self.add_bot(
                            symbol=None,
                            lev=leverage,
                            percent=percent,
                            tp=tp,
                            sl=sl,
                            strategy_type=strategy,
                            bot_mode='dynamic',
                            bot_count=bot_count,
                            threshold=threshold,
                            volatility=volatility,
                            grid_levels=grid_levels
                        )
                    
                    if success:
                        success_msg = (
                            f"‚úÖ <b>ƒê√É T·∫†O BOT TH√ÄNH C√îNG</b>\n\n"
                            f"ü§ñ Chi·∫øn l∆∞·ª£c: {strategy}\n"
                            f"üîß Ch·∫ø ƒë·ªô: {bot_mode}\n"
                            f"üî¢ S·ªë l∆∞·ª£ng: {bot_count} coin\n"
                            f"üí∞ ƒê√≤n b·∫©y: {leverage}x\n"
                            f"üìä % S·ªë d∆∞: {percent}%\n"
                            f"üéØ TP: {tp}%\n"
                            f"üõ°Ô∏è SL: {sl}%"
                        )
                        if bot_mode == 'static':
                            success_msg += f"\nüîó Coin: {symbol}"
                        else:
                            if threshold:
                                success_msg += f"\nüìà Ng∆∞·ª°ng: {threshold}%"
                            if volatility:
                                success_msg += f"\n‚ö° Bi·∫øn ƒë·ªông: {volatility}%"
                            if grid_levels:
                                success_msg += f"\nüõ°Ô∏è Grid levels: {grid_levels}"
                        
                        success_msg += f"\n\nüéØ <b>M·ªói chi·∫øn l∆∞·ª£c c√≥ {bot_count} coin ri√™ng bi·ªát</b>"
                        if bot_mode == 'dynamic':
                            success_msg += f"\nüîÑ <b>H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông t√¨m {bot_count} coin t·ªët nh·∫•t</b>"
                        
                        send_telegram(success_msg, chat_id, create_main_menu(),
                                    self.telegram_bot_token, self.telegram_chat_id)
                    else:
                        send_telegram("‚ùå C√≥ l·ªói khi t·∫°o bot. Vui l√≤ng th·ª≠ l·∫°i.",
                                    chat_id, create_main_menu(),
                                    self.telegram_bot_token, self.telegram_chat_id)
                    
                    # X√≥a state
                    self.user_states[chat_id] = {}
                    
                except ValueError:
                    send_telegram("‚ö†Ô∏è Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá cho Stop Loss:",
                                chat_id, create_sl_keyboard(),
                                self.telegram_bot_token, self.telegram_chat_id)

        # X·ª¨ L√ù C√ÅC L·ªÜNH CH√çNH
        elif text == "‚ûï Th√™m Bot":
            self.user_states[chat_id] = {'step': 'waiting_bot_count'}
            balance = get_balance(self.api_key, self.api_secret)
            if balance is None:
                send_telegram("‚ùå <b>L·ªñI K·∫æT N·ªêI BINANCE</b>\nVui l√≤ng ki·ªÉm tra API Key!", chat_id,
                            bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
                return
            
            send_telegram(
                f"üéØ <b>CH·ªåN S·ªê L∆Ø·ª¢NG COIN CHO CHI·∫æN L∆Ø·ª¢C</b>\n\n"
                f"üí∞ S·ªë d∆∞ hi·ªán c√≥: <b>{balance:.2f} USDT</b>\n\n"
                f"Ch·ªçn s·ªë l∆∞·ª£ng coin b·∫°n mu·ªën cho chi·∫øn l∆∞·ª£c:",
                chat_id,
                create_bot_count_keyboard(),
                self.telegram_bot_token, self.telegram_chat_id
            )
        
        elif text == "üìä Danh s√°ch Bot":
            if not self.bots:
                send_telegram("ü§ñ Kh√¥ng c√≥ bot n√†o ƒëang ch·∫°y", chat_id,
                            bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
            else:
                message = "ü§ñ <b>DANH S√ÅCH BOT ƒêANG CH·∫†Y</b>\n\n"
                
                # Nh√≥m bot theo chi·∫øn l∆∞·ª£c
                strategy_groups = {}
                for bot_id, bot in self.bots.items():
                    strategy_name = bot.strategy_name
                    if strategy_name not in strategy_groups:
                        strategy_groups[strategy_name] = []
                    strategy_groups[strategy_name].append(bot)
                
                for strategy_name, bots in strategy_groups.items():
                    message += f"üéØ <b>{strategy_name}</b> ({len(bots)} bot):\n"
                    for bot in bots:
                        status = "üü¢ M·ªü" if bot.status == "open" else "üü° Ch·ªù"
                        mode = "Tƒ©nh"
                        if hasattr(bot, 'config_key') and bot.config_key:
                            mode = "ƒê·ªông"
                        
                        message += f"  üîπ {bot.symbol} | {status} | {mode} | ƒêB: {bot.lev}x\n"
                    message += "\n"
                
                total_bots = len(self.bots)
                dynamic_bots = sum(1 for bot in self.bots.values() if hasattr(bot, 'config_key') and bot.config_key)
                message += f"üìä T·ªïng s·ªë: {total_bots} bot | üîÑ ƒê·ªông: {dynamic_bots}"
                
                send_telegram(message, chat_id,
                            bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
        
        elif text == "‚õî D·ª´ng Bot":
            if not self.bots:
                send_telegram("ü§ñ Kh√¥ng c√≥ bot n√†o ƒëang ch·∫°y", chat_id,
                            bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
            else:
                message = "‚õî <b>CH·ªåN BOT ƒê·ªÇ D·ª™NG</b>\n\n"
                keyboard = []
                row = []
                
                for i, bot_id in enumerate(self.bots.keys()):
                    message += f"üîπ {bot_id}\n"
                    row.append({"text": f"‚õî {bot_id}"})
                    if len(row) == 2 or i == len(self.bots) - 1:
                        keyboard.append(row)
                        row = []
                
                keyboard.append([{"text": "‚ùå H·ªßy b·ªè"}])
                
                send_telegram(
                    message, 
                    chat_id, 
                    {"keyboard": keyboard, "resize_keyboard": True, "one_time_keyboard": True},
                    self.telegram_bot_token, self.telegram_chat_id
                )
        
        elif text.startswith("‚õî "):
            bot_id = text.replace("‚õî ", "").strip()
            if self.stop_bot(bot_id):
                send_telegram(f"‚õî ƒê√£ d·ª´ng bot {bot_id}", chat_id, create_main_menu(),
                            self.telegram_bot_token, self.telegram_chat_id)
            else:
                send_telegram(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y bot {bot_id}", chat_id, create_main_menu(),
                            self.telegram_bot_token, self.telegram_chat_id)
        
        elif text == "üí∞ S·ªë d∆∞":
            try:
                balance = get_balance(self.api_key, self.api_secret)
                if balance is None:
                    send_telegram("‚ùå <b>L·ªñI K·∫æT N·ªêI BINANCE</b>\nVui l√≤ng ki·ªÉm tra API Key!", chat_id,
                                bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
                else:
                    send_telegram(f"üí∞ <b>S·ªê D∆Ø KH·∫¢ D·ª§NG</b>: {balance:.2f} USDT", chat_id,
                                bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
            except Exception as e:
                send_telegram(f"‚ö†Ô∏è L·ªói l·∫•y s·ªë d∆∞: {str(e)}", chat_id,
                            bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
        
        elif text == "üìà V·ªã th·∫ø":
            try:
                positions = get_positions(api_key=self.api_key, api_secret=self.api_secret)
                if not positions:
                    send_telegram("üì≠ Kh√¥ng c√≥ v·ªã th·∫ø n√†o ƒëang m·ªü", chat_id,
                                bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
                    return
                
                message = "üìà <b>V·ªä TH·∫æ ƒêANG M·ªû</b>\n\n"
                for pos in positions:
                    position_amt = float(pos.get('positionAmt', 0))
                    if position_amt != 0:
                        symbol = pos.get('symbol', 'UNKNOWN')
                        entry = float(pos.get('entryPrice', 0))
                        side = "LONG" if position_amt > 0 else "SHORT"
                        pnl = float(pos.get('unRealizedProfit', 0))
                        
                        message += (
                            f"üîπ {symbol} | {side}\n"
                            f"üìä Kh·ªëi l∆∞·ª£ng: {abs(position_amt):.4f}\n"
                            f"üè∑Ô∏è Gi√° v√†o: {entry:.4f}\n"
                            f"üí∞ PnL: {pnl:.2f} USDT\n\n"
                        )
                
                send_telegram(message, chat_id,
                            bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
            except Exception as e:
                send_telegram(f"‚ö†Ô∏è L·ªói l·∫•y v·ªã th·∫ø: {str(e)}", chat_id,
                            bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
        
        elif text == "üéØ Chi·∫øn l∆∞·ª£c":
            strategy_info = (
                "üéØ <b>DANH S√ÅCH CHI·∫æN L∆Ø·ª¢C HO√ÄN CH·ªàNH</b>\n\n"
                
                "üîÑ <b>Bot ƒê·ªông Th√¥ng Minh</b>\n"
                "‚Ä¢ K·∫øt h·ª£p ƒëa chi·∫øn l∆∞·ª£c\n"
                "‚Ä¢ T·ª± ƒë·ªông t√¨m n coin t·ªët nh·∫•t\n"
                "‚Ä¢ T·ª± t√¨m coin m·ªõi sau khi ƒë√≥ng l·ªánh\n"
                "‚Ä¢ üîÑ M·ªói chi·∫øn l∆∞·ª£c c√≥ danh s√°ch coin ri√™ng\n\n"
                
                "üéØ <b>Reverse 24h</b> - T·ª∞ ƒê·ªòNG\n"
                "‚Ä¢ ƒê·∫£o chi·ªÅu bi·∫øn ƒë·ªông 24h\n"
                "‚Ä¢ T·ª± t√¨m n coin t·ª´ TO√ÄN B·ªò Binance\n"
                "‚Ä¢ T·ª± t√¨m coin m·ªõi sau khi ƒë√≥ng l·ªánh\n\n"
                
                "‚ö° <b>Scalping</b> - T·ª∞ ƒê·ªòNG\n"
                "‚Ä¢ Giao d·ªãch t·ªëc ƒë·ªô cao\n"
                "‚Ä¢ T·ª± t√¨m n coin bi·∫øn ƒë·ªông\n"
                "‚Ä¢ T·ª± t√¨m coin m·ªõi sau khi ƒë√≥ng l·ªánh\n\n"
                
                "üõ°Ô∏è <b>Safe Grid</b> - T·ª∞ ƒê·ªòNG\n"
                "‚Ä¢ Grid an to√†n\n"
                "‚Ä¢ T·ª± t√¨m n coin ·ªïn ƒë·ªãnh\n"
                "‚Ä¢ T·ª± t√¨m coin m·ªõi sau khi ƒë√≥ng l·ªánh\n"
                "‚Ä¢ Ph√¢n b·ªï r·ªßi ro th√¥ng minh\n\n"
                
                "üìà <b>Trend Following</b> - T·ª∞ ƒê·ªòNG\n"
                "‚Ä¢ Theo xu h∆∞·ªõng gi√°\n"
                "‚Ä¢ T·ª± t√¨m n coin trend r√µ\n"
                "‚Ä¢ T·ª± t√¨m coin m·ªõi sau khi ƒë√≥ng l·ªánh\n\n"
                
                "ü§ñ <b>RSI/EMA Recursive</b> - Tƒ®NH\n"
                "‚Ä¢ Ph√¢n t√≠ch RSI + EMA ƒë·ªá quy\n"
                "‚Ä¢ Coin c·ª• th·ªÉ do b·∫°n ch·ªçn\n\n"
                
                "üìä <b>EMA Crossover</b> - Tƒ®NH\n"
                "‚Ä¢ Giao c·∫Øt EMA nhanh/ch·∫≠m\n"
                "‚Ä¢ Coin c·ª• th·ªÉ do b·∫°n ch·ªçn\n\n"
                
                "üí° <b>H·ªá th·ªëng n coin/chi·∫øn l∆∞·ª£c</b>\n"
                "‚Ä¢ üéØ M·ªói chi·∫øn l∆∞·ª£c c√≥ n coin ri√™ng bi·ªát\n"
                "‚Ä¢ üîÑ T·ª± ƒë·ªông t√¨m n coin t·ªët nh·∫•t\n"
                "‚Ä¢ üìä Qu·∫£n l√Ω ƒë·ªôc l·∫≠p t·ª´ng chi·∫øn l∆∞·ª£c"
            )
            send_telegram(strategy_info, chat_id,
                        bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
        
        elif text == "‚öôÔ∏è C·∫•u h√¨nh":
            balance = get_balance(self.api_key, self.api_secret)
            api_status = "‚úÖ ƒê√£ k·∫øt n·ªëi" if balance is not None else "‚ùå L·ªói k·∫øt n·ªëi"
            
            dynamic_bots_count = sum(1 for bot in self.bots.values() 
                                   if hasattr(bot, 'config_key') and bot.config_key)
            
            # Th·ªëng k√™ theo chi·∫øn l∆∞·ª£c
            strategy_stats = {}
            for bot in self.bots.values():
                strategy_name = bot.strategy_name
                if strategy_name not in strategy_stats:
                    strategy_stats[strategy_name] = 0
                strategy_stats[strategy_name] += 1
            
            stats_text = "\n".join([f"  ‚Ä¢ {name}: {count} bot" for name, count in strategy_stats.items()])
            
            config_info = (
                "‚öôÔ∏è <b>C·∫§U H√åNH H·ªÜ TH·ªêNG n COIN/CHI·∫æN L∆Ø·ª¢C</b>\n\n"
                f"üîë Binance API: {api_status}\n"
                f"ü§ñ T·ªïng s·ªë bot: {len(self.bots)}\n"
                f"üîÑ Bot ƒë·ªông: {dynamic_bots_count}\n"
                f"üìä Chi·∫øn l∆∞·ª£c ƒëang ch·∫°y:\n{stats_text}\n"
                f"üéØ Auto scan: {len(self.auto_strategies)} c·∫•u h√¨nh\n"
                f"üåê WebSocket: {len(self.ws_manager.connections)} k·∫øt n·ªëi\n"
                f"‚è∞ Cooldown: {self.cooldown_period//60} ph√∫t"
            )
            send_telegram(config_info, chat_id,
                        bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
        
        elif text:
            self.send_main_menu(chat_id)

    def _continue_bot_creation(self, chat_id, user_state):
        """Ti·∫øp t·ª•c quy tr√¨nh t·∫°o bot sau khi ch·ªçn exit strategy"""
        strategy = user_state.get('strategy')
        bot_mode = user_state.get('bot_mode', 'static')
        bot_count = user_state.get('bot_count', 1)
        
        if bot_mode == 'dynamic' and strategy != "Smart Dynamic":
            # C√°c chi·∫øn l∆∞·ª£c ƒë·ªông kh√°c
            if strategy == "Reverse 24h":
                user_state['step'] = 'waiting_threshold'
                send_telegram(
                    f"üéØ <b>BOT ƒê·ªòNG: {strategy}</b>\n"
                    f"ü§ñ S·ªë l∆∞·ª£ng: {bot_count} coin\n\n"
                    f"ü§ñ H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông t√¨m {bot_count} coin t·ªët nh·∫•t\n"
                    f"üîÑ T·ª± t√¨m coin m·ªõi sau khi ƒë√≥ng l·ªánh\n"
                    f"üìä M·ªói chi·∫øn l∆∞·ª£c c√≥ danh s√°ch coin ri√™ng\n\n"
                    f"Ch·ªçn ng∆∞·ª°ng bi·∫øn ƒë·ªông (%):",
                    chat_id,
                    create_threshold_keyboard(),
                    self.telegram_bot_token, self.telegram_chat_id
                )
            elif strategy == "Scalping":
                user_state['step'] = 'waiting_volatility'
                send_telegram(
                    f"üéØ <b>BOT ƒê·ªòNG: {strategy}</b>\n"
                    f"ü§ñ S·ªë l∆∞·ª£ng: {bot_count} coin\n\n"
                    f"ü§ñ H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông t√¨m {bot_count} coin t·ªët nh·∫•t\n"
                    f"üîÑ T·ª± t√¨m coin m·ªõi sau khi ƒë√≥ng l·ªánh\n"
                    f"üìä M·ªói chi·∫øn l∆∞·ª£c c√≥ danh s√°ch coin ri√™ng\n\n"
                    f"Ch·ªçn bi·∫øn ƒë·ªông t·ªëi thi·ªÉu (%):",
                    chat_id,
                    create_volatility_keyboard(),
                    self.telegram_bot_token, self.telegram_chat_id
                )
            elif strategy == "Safe Grid":
                user_state['step'] = 'waiting_grid_levels'
                send_telegram(
                    f"üéØ <b>BOT ƒê·ªòNG: {strategy}</b>\n"
                    f"ü§ñ S·ªë l∆∞·ª£ng: {bot_count} coin\n\n"
                    f"ü§ñ H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông t√¨m {bot_count} coin t·ªët nh·∫•t\n"
                    f"üîÑ T·ª± t√¨m coin m·ªõi sau khi ƒë√≥ng l·ªánh\n"
                    f"üìä M·ªói chi·∫øn l∆∞·ª£c c√≥ danh s√°ch coin ri√™ng\n\n"
                    f"Ch·ªçn s·ªë l·ªánh grid:",
                    chat_id,
                    create_grid_levels_keyboard(),
                    self.telegram_bot_token, self.telegram_chat_id
                )
            else:
                user_state['step'] = 'waiting_leverage'
                send_telegram(
                    f"üéØ <b>BOT ƒê·ªòNG: {strategy}</b>\n"
                    f"ü§ñ S·ªë l∆∞·ª£ng: {bot_count} coin\n\n"
                    f"ü§ñ H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông t√¨m {bot_count} coin t·ªët nh·∫•t\n"
                    f"üîÑ T·ª± t√¨m coin m·ªõi sau khi ƒë√≥ng l·ªánh\n"
                    f"üìä M·ªói chi·∫øn l∆∞·ª£c c√≥ danh s√°ch coin ri√™ng\n\n"
                    f"Ch·ªçn ƒë√≤n b·∫©y:",
                    chat_id,
                    create_leverage_keyboard(strategy),
                    self.telegram_bot_token, self.telegram_chat_id
                )
        else:
            if bot_mode == 'static':
                user_state['step'] = 'waiting_symbol'
                send_telegram(
                    f"üéØ <b>BOT Tƒ®NH: {strategy}</b>\n"
                    f"ü§ñ S·ªë l∆∞·ª£ng: {bot_count} coin\n\n"
                    f"ü§ñ Bot s·∫Ω giao d·ªãch coin C·ªê ƒê·ªäNH\n\n"
                    f"Ch·ªçn c·∫∑p coin:",
                    chat_id,
                    create_symbols_keyboard(strategy),
                    self.telegram_bot_token, self.telegram_chat_id
                )
            else:
                user_state['step'] = 'waiting_leverage'
                send_telegram(
                    f"üéØ <b>BOT ƒê·ªòNG TH√îNG MINH</b>\n"
                    f"ü§ñ S·ªë l∆∞·ª£ng: {bot_count} coin\n\n"
                    f"ü§ñ H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông t√¨m {bot_count} coin t·ªët nh·∫•t\n"
                    f"üîÑ T·ª± t√¨m coin m·ªõi sau khi ƒë√≥ng l·ªánh\n"
                    f"üìä M·ªói chi·∫øn l∆∞·ª£c c√≥ danh s√°ch coin ri√™ng\n"
                    f"üìà T·ªëi ∆∞u h√≥a t·ª± ƒë·ªông\n\n"
                    f"Ch·ªçn ƒë√≤n b·∫©y:",
                    chat_id,
                    create_leverage_keyboard(strategy),
                    self.telegram_bot_token, self.telegram_chat_id
                )

# ========== KH·ªûI T·∫†O GLOBAL INSTANCES ==========
coin_manager = CoinManager()
