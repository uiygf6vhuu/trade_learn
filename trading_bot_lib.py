# trading_bot_volatile_coins_complete.py - HO√ÄN CH·ªàNH V·ªöI COIN BI·∫æN ƒê·ªòNG + T√çN HI·ªÜU KH·ªêI L∆Ø·ª¢NG
import json
import hmac
import hashlib
import time
import threading
import urllib.request
import urllib.parse
import numpy as np
import websocket
import logging
import requests
import os
import math
import traceback
import random
from datetime import datetime
from concurrent.futures import ThreadPoolExecutor
from concurrent.futures import ThreadPoolExecutor, as_completed
import time
import ssl

# ========== BYPASS SSL VERIFICATION ==========
ssl._create_default_https_context = ssl._create_unverified_context

def _last_closed_1m_quote_volume(symbol):
    data = binance_api_request(
        "https://fapi.binance.com/fapi/v1/klines",
        params={"symbol": symbol, "interval": "1m", "limit": 2}
    )
    if not data or len(data) < 2:
        return None
    k = data[-2]               # n·∫øn 1m ƒë√£ ƒë√≥ng g·∫ßn nh·∫•t
    return float(k[7])         # quoteVolume (USDT)

def _get_1h_volatility(symbol):
    """T√≠nh bi·∫øn ƒë·ªông gi√° 1 gi·ªù (high-low)/open * 100"""
    try:
        data = binance_api_request(
            "https://fapi.binance.com/fapi/v1/klines",
            params={"symbol": symbol, "interval": "1h", "limit": 1}
        )
        if not data or len(data) < 1:
            return None
        
        kline = data[0]
        open_price = float(kline[1])
        high_price = float(kline[2])
        low_price = float(kline[3])
        
        if open_price <= 0:
            return None
            
        volatility = ((high_price - low_price) / open_price) * 100
        return volatility
        
    except Exception as e:
        logger.error(f"L·ªói t√≠nh bi·∫øn ƒë·ªông {symbol}: {str(e)}")
        return None

# ========== C·∫§U H√åNH LOGGING ==========
def setup_logging():
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(module)s - %(message)s',
        handlers=[
            logging.StreamHandler(),
            logging.FileHandler('bot_errors.log')
        ]
    )
    return logging.getLogger()

logger = setup_logging()

# ========== H√ÄM TELEGRAM ==========
def send_telegram(message, chat_id=None, reply_markup=None, bot_token=None, default_chat_id=None):
    if not bot_token:
        logger.warning("Telegram Bot Token ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p")
        return
    
    chat_id = chat_id or default_chat_id
    if not chat_id:
        logger.warning("Telegram Chat ID ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p")
        return
    
    url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": message,
        "parse_mode": "HTML"
    }
    
    if reply_markup:
        payload["reply_markup"] = json.dumps(reply_markup)
    
    try:
        response = requests.post(url, json=payload, timeout=15)
        if response.status_code != 200:
            logger.error(f"L·ªói Telegram ({response.status_code}): {response.text}")
    except Exception as e:
        logger.error(f"L·ªói k·∫øt n·ªëi Telegram: {str(e)}")

# ========== MENU TELEGRAM HO√ÄN CH·ªàNH ==========
def create_cancel_keyboard():
    return {
        "keyboard": [[{"text": "‚ùå H·ªßy b·ªè"}]],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_strategy_keyboard():
    return {
        "keyboard": [
            [{"text": "üìä Global Market System"}],
            [{"text": "‚ùå H·ªßy b·ªè"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_exit_strategy_keyboard():
    return {
        "keyboard": [
            [{"text": "üéØ Ch·ªâ TP/SL c·ªë ƒë·ªãnh"}],
            [{"text": "‚ùå H·ªßy b·ªè"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_bot_mode_keyboard():
    return {
        "keyboard": [
            [{"text": "ü§ñ Bot Tƒ©nh - Coin c·ª• th·ªÉ"}, {"text": "üîÑ Bot ƒê·ªông - T·ª± t√¨m coin"}],
            [{"text": "‚ùå H·ªßy b·ªè"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_symbols_keyboard(strategy=None):
    try:
        symbols = get_all_usdt_pairs(limit=12)
        if not symbols:
            symbols = ["BTCUSDT", "ETHUSDT", "BNBUSDT", "ADAUSDT", "DOGEUSDT", "XRPUSDT", "DOTUSDT", "LINKUSDT"]
    except:
        symbols = ["BTCUSDT", "ETHUSDT", "BNBUSDT", "ADAUSDT", "DOGEUSDT", "XRPUSDT", "DOTUSDT", "LINKUSDT"]
    
    keyboard = []
    row = []
    for symbol in symbols:
        row.append({"text": symbol})
        if len(row) == 3:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    keyboard.append([{"text": "‚ùå H·ªßy b·ªè"}])
    
    return {
        "keyboard": keyboard,
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_main_menu():
    return {
        "keyboard": [
            [{"text": "üìä Danh s√°ch Bot"}, {"text": "üìä Th·ªëng k√™"}],
            [{"text": "‚ûï Th√™m Bot"}, {"text": "‚õî D·ª´ng Bot"}],
            [{"text": "üí∞ S·ªë d∆∞"}, {"text": "üìà V·ªã th·∫ø"}],
            [{"text": "‚öôÔ∏è C·∫•u h√¨nh"}, {"text": "üéØ Chi·∫øn l∆∞·ª£c"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": False
    }

def create_leverage_keyboard(strategy=None):
    leverages = ["3", "5", "10", "15", "20", "25", "50", "75", "100"]
    
    keyboard = []
    row = []
    for lev in leverages:
        row.append({"text": f"{lev}x"})
        if len(row) == 3:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    keyboard.append([{"text": "‚ùå H·ªßy b·ªè"}])
    
    return {
        "keyboard": keyboard,
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_percent_keyboard():
    return {
        "keyboard": [
            [{"text": "1"}, {"text": "3"}, {"text": "5"}, {"text": "10"}],
            [{"text": "15"}, {"text": "20"}, {"text": "25"}, {"text": "50"}],
            [{"text": "‚ùå H·ªßy b·ªè"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_tp_keyboard():
    return {
        "keyboard": [
            [{"text": "50"}, {"text": "100"}, {"text": "200"}],
            [{"text": "300"}, {"text": "500"}, {"text": "1000"}],
            [{"text": "‚ùå H·ªßy b·ªè"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_sl_keyboard():
    return {
        "keyboard": [
            [{"text": "0"}, {"text": "50"}, {"text": "100"}],
            [{"text": "150"}, {"text": "200"}, {"text": "500"}],
            [{"text": "‚ùå H·ªßy b·ªè"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_bot_count_keyboard():
    return {
        "keyboard": [
            [{"text": "1"}, {"text": "2"}, {"text": "3"}],
            [{"text": "5"}, {"text": "10"}],
            [{"text": "‚ùå H·ªßy b·ªè"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_roi_trigger_keyboard():
    return {
        "keyboard": [
            [{"text": "30"}, {"text": "50"}, {"text": "100"}],
            [{"text": "150"}, {"text": "200"}, {"text": "300"}],
            [{"text": "‚ùå T·∫Øt t√≠nh nƒÉng"}],
            [{"text": "‚ùå H·ªßy b·ªè"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

# ========== API BINANCE - ƒê√É S·ª¨A L·ªñI 451 ==========
def sign(query, api_secret):
    try:
        return hmac.new(api_secret.encode(), query.encode(), hashlib.sha256).hexdigest()
    except Exception as e:
        logger.error(f"L·ªói t·∫°o ch·ªØ k√Ω: {str(e)}")
        return ""

def binance_api_request(url, method='GET', params=None, headers=None):
    max_retries = 3
    for attempt in range(max_retries):
        try:
            # Th√™m User-Agent ƒë·ªÉ tr√°nh b·ªã ch·∫∑n
            if headers is None:
                headers = {}
            
            if 'User-Agent' not in headers:
                headers['User-Agent'] = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            
            if method.upper() == 'GET':
                if params:
                    query = urllib.parse.urlencode(params)
                    url = f"{url}?{query}"
                req = urllib.request.Request(url, headers=headers)
            else:
                data = urllib.parse.urlencode(params).encode() if params else None
                req = urllib.request.Request(url, data=data, headers=headers, method=method)
            
            # TƒÉng timeout v√† th√™m retry logic
            with urllib.request.urlopen(req, timeout=30) as response:
                if response.status == 200:
                    return json.loads(response.read().decode())
                else:
                    error_content = response.read().decode()
                    logger.error(f"L·ªói API ({response.status}): {error_content}")
                    if response.status == 401:
                        return None
                    if response.status == 429:
                        time.sleep(2 ** attempt)
                    elif response.status >= 500:
                        time.sleep(1)
                    continue
                    
        except urllib.error.HTTPError as e:
            if e.code == 451:
                logger.error(f"‚ùå L·ªói 451: Truy c·∫≠p b·ªã ch·∫∑n - C√≥ th·ªÉ do h·∫°n ch·∫ø ƒë·ªãa l√Ω. Vui l√≤ng ki·ªÉm tra VPN/proxy.")
                # Th·ª≠ s·ª≠ d·ª•ng endpoint thay th·∫ø
                if "fapi.binance.com" in url:
                    new_url = url.replace("fapi.binance.com", "fapi.binance.com")
                    logger.info(f"Th·ª≠ URL thay th·∫ø: {new_url}")
                    # Kh√¥ng retry l·∫°i ngay m√† ƒë·ªÉ l·∫ßn sau
                return None
            else:
                logger.error(f"L·ªói HTTP ({e.code}): {e.reason}")
            
            if e.code == 401:
                return None
            if e.code == 429:
                time.sleep(2 ** attempt)
            elif e.code >= 500:
                time.sleep(1)
            continue
                
        except Exception as e:
            logger.error(f"L·ªói k·∫øt n·ªëi API (l·∫ßn {attempt + 1}): {str(e)}")
            time.sleep(1)
    
    logger.error(f"Kh√¥ng th·ªÉ th·ª±c hi·ªán y√™u c·∫ßu API sau {max_retries} l·∫ßn th·ª≠")
    return None

def get_all_usdt_pairs(limit=600):
    try:
        url = "https://fapi.binance.com/fapi/v1/exchangeInfo"
        data = binance_api_request(url)
        if not data:
            logger.warning("Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu t·ª´ Binance, tr·∫£ v·ªÅ danh s√°ch r·ªóng")
            return []
        
        usdt_pairs = []
        for symbol_info in data.get('symbols', []):
            symbol = symbol_info.get('symbol', '')
            if symbol.endswith('USDT') and symbol_info.get('status') == 'TRADING':
                usdt_pairs.append(symbol)
        
        logger.info(f"‚úÖ L·∫•y ƒë∆∞·ª£c {len(usdt_pairs)} coin USDT t·ª´ Binance")
        return usdt_pairs[:limit] if limit else usdt_pairs
        
    except Exception as e:
        logger.error(f"‚ùå L·ªói l·∫•y danh s√°ch coin t·ª´ Binance: {str(e)}")
        return []

def get_top_volume_symbols(limit=100):
    """Top {limit} USDT pairs theo quoteVolume c·ªßa N·∫æN 1M ƒë√£ ƒë√≥ng (ƒëa lu·ªìng)."""
    try:
        universe = get_all_usdt_pairs(limit=600) or []
        if not universe:
            logger.warning("‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c danh s√°ch coin USDT")
            return []

        scored, failed = [], 0
        max_workers = 8  # Gi·∫£m workers ƒë·ªÉ tr√°nh b·ªã ch·∫∑n
        with ThreadPoolExecutor(max_workers=max_workers) as ex:
            futmap = {ex.submit(_last_closed_1m_quote_volume, s): s for s in universe}
            for fut in as_completed(futmap):
                sym = futmap[fut]
                try:
                    qv = fut.result()
                    if qv is not None:
                        scored.append((sym, qv))
                except Exception:
                    failed += 1
                time.sleep(0.5)  # TƒÉng th·ªùi gian ch·ªù ƒë·ªÉ tr√°nh 429

        scored.sort(key=lambda x: x[1], reverse=True)
        top_syms = [s for s, _ in scored[:limit]]
        logger.info(f"‚úÖ Top {len(top_syms)} theo 1m quoteVolume (ph√¢n t√≠ch: {len(scored)}, l·ªói: {failed})")
        return top_syms

    except Exception as e:
        logger.error(f"‚ùå L·ªói l·∫•y top volume 1 ph√∫t (ƒëa lu·ªìng): {str(e)}")
        return []

def get_top_volatile_symbols(limit=30):
    """Top {limit} USDT pairs theo bi·∫øn ƒë·ªông gi√° 1 gi·ªù"""
    try:
        universe = get_all_usdt_pairs(limit=300)  # Gi·∫£m xu·ªëng 300 coin
        if not universe:
            logger.warning("‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c danh s√°ch coin USDT")
            return []

        volatile_symbols = []
        max_workers = 5  # Gi·∫£m workers ƒë·ªÉ tr√°nh b·ªã ch·∫∑n
        
        with ThreadPoolExecutor(max_workers=max_workers) as ex:
            future_to_symbol = {ex.submit(_get_1h_volatility, symbol): symbol for symbol in universe[:100]}  # Ch·ªâ x√©t 100 coin
            
            for future in as_completed(future_to_symbol):
                symbol = future_to_symbol[future]
                try:
                    volatility = future.result()
                    if volatility is not None and volatility > 0:
                        volatile_symbols.append((symbol, volatility))
                except Exception as e:
                    logger.error(f"L·ªói t√≠nh bi·∫øn ƒë·ªông {symbol}: {str(e)}")
                time.sleep(0.3)  # Th√™m delay

        # S·∫Øp x·∫øp theo bi·∫øn ƒë·ªông gi·∫£m d·∫ßn
        volatile_symbols.sort(key=lambda x: x[1], reverse=True)
        top_symbols = [s for s, _ in volatile_symbols[:limit]]
        
        if top_symbols:
            logger.info(f"‚úÖ Top {len(top_symbols)} coin bi·∫øn ƒë·ªông m·∫°nh nh·∫•t 1h: {top_symbols[:5]}...")
        else:
            logger.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y coin bi·∫øn ƒë·ªông m·∫°nh")
            
        return top_symbols

    except Exception as e:
        logger.error(f"‚ùå L·ªói l·∫•y top bi·∫øn ƒë·ªông 1h: {str(e)}")
        return []

def get_max_leverage(symbol, api_key, api_secret):
    """L·∫•y ƒë√≤n b·∫©y t·ªëi ƒëa cho m·ªôt symbol"""
    try:
        url = "https://fapi.binance.com/fapi/v1/exchangeInfo"
        data = binance_api_request(url)
        if not data:
            return 100  # M·∫∑c ƒë·ªãnh n·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c
        
        for s in data['symbols']:
            if s['symbol'] == symbol.upper():
                # T√¨m th√¥ng tin ƒë√≤n b·∫©y t·ª´ filters
                for f in s['filters']:
                    if f['filterType'] == 'LEVERAGE':
                        if 'maxLeverage' in f:
                            return int(f['maxLeverage'])
                break
        return 100  # M·∫∑c ƒë·ªãnh
    except Exception as e:
        logger.error(f"L·ªói l·∫•y ƒë√≤n b·∫©y t·ªëi ƒëa {symbol}: {str(e)}")
        return 100

def get_step_size(symbol, api_key, api_secret):
    if not symbol:
        logger.error("‚ùå L·ªói: Symbol l√† None khi l·∫•y step size")
        return 0.001
    url = "https://fapi.binance.com/fapi/v1/exchangeInfo"
    try:
        data = binance_api_request(url)
        if not data:
            return 0.001
        for s in data['symbols']:
            if s['symbol'] == symbol.upper():
                for f in s['filters']:
                    if f['filterType'] == 'LOT_SIZE':
                        return float(f['stepSize'])
    except Exception as e:
        logger.error(f"L·ªói l·∫•y step size: {str(e)}")
    return 0.001

def set_leverage(symbol, lev, api_key, api_secret):
    if not symbol:
        logger.error("‚ùå L·ªói: Symbol l√† None khi set leverage")
        return False
    try:
        ts = int(time.time() * 1000)
        params = {
            "symbol": symbol.upper(),
            "leverage": lev,
            "timestamp": ts
        }
        query = urllib.parse.urlencode(params)
        sig = sign(query, api_secret)
        url = f"https://fapi.binance.com/fapi/v1/leverage?{query}&signature={sig}"
        headers = {'X-MBX-APIKEY': api_key}
        
        response = binance_api_request(url, method='POST', headers=headers)
        if response is None:
            return False
        if response and 'leverage' in response:
            return True
        return False
    except Exception as e:
        logger.error(f"L·ªói thi·∫øt l·∫≠p ƒë√≤n b·∫©y: {str(e)}")
        return False

def get_balance(api_key, api_secret):
    """L·∫•y s·ªë d∆∞ KH·∫¢ D·ª§NG (availableBalance) ƒë·ªÉ t√≠nh to√°n kh·ªëi l∆∞·ª£ng"""
    try:
        ts = int(time.time() * 1000)
        params = {"timestamp": ts}
        query = urllib.parse.urlencode(params)
        sig = sign(query, api_secret)
        url = f"https://fapi.binance.com/fapi/v2/account?{query}&signature={sig}"
        headers = {'X-MBX-APIKEY': api_key}
        
        data = binance_api_request(url, headers=headers)
        if not data:
            logger.error("‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c s·ªë d∆∞ t·ª´ Binance")
            return None
            
        for asset in data['assets']:
            if asset['asset'] == 'USDT':
                available_balance = float(asset['availableBalance'])
                total_balance = float(asset['walletBalance'])
                
                logger.info(f"üí∞ S·ªë d∆∞ - Kh·∫£ d·ª•ng: {available_balance:.2f} USDT, T·ªïng: {total_balance:.2f} USDT")
                return available_balance
        return 0
    except Exception as e:
        logger.error(f"L·ªói l·∫•y s·ªë d∆∞: {str(e)}")
        return None

def place_order(symbol, side, qty, api_key, api_secret):
    if not symbol:
        logger.error("‚ùå Kh√¥ng th·ªÉ ƒë·∫∑t l·ªánh: symbol l√† None")
        return None
    try:
        ts = int(time.time() * 1000)
        params = {
            "symbol": symbol.upper(),
            "side": side,
            "type": "MARKET",
            "quantity": qty,
            "timestamp": ts
        }
        query = urllib.parse.urlencode(params)
        sig = sign(query, api_secret)
        url = f"https://fapi.binance.com/fapi/v1/order?{query}&signature={sig}"
        headers = {'X-MBX-APIKEY': api_key}
        
        return binance_api_request(url, method='POST', headers=headers)
    except Exception as e:
        logger.error(f"L·ªói ƒë·∫∑t l·ªánh: {str(e)}")
    return None

def cancel_all_orders(symbol, api_key, api_secret):
    if not symbol:
        logger.error("‚ùå Kh√¥ng th·ªÉ h·ªßy l·ªánh: symbol l√† None")
        return False
    try:
        ts = int(time.time() * 1000)
        params = {"symbol": symbol.upper(), "timestamp": ts}
        query = urllib.parse.urlencode(params)
        sig = sign(query, api_secret)
        url = f"https://fapi.binance.com/fapi/v1/allOpenOrders?{query}&signature={sig}"
        headers = {'X-MBX-APIKEY': api_key}
        
        binance_api_request(url, method='DELETE', headers=headers)
        return True
    except Exception as e:
        logger.error(f"L·ªói h·ªßy l·ªánh: {str(e)}")
    return False

def get_current_price(symbol):
    if not symbol:
        logger.error("üí∞ L·ªói: Symbol l√† None khi l·∫•y gi√°")
        return 0
    try:
        url = f"https://fapi.binance.com/fapi/v1/ticker/price?symbol={symbol.upper()}"
        data = binance_api_request(url)
        if data and 'price' in data:
            price = float(data['price'])
            if price > 0:
                return price
            else:
                logger.error(f"üí∞ Gi√° {symbol} = 0")
        return 0
    except Exception as e:
        logger.error(f"üí∞ L·ªói l·∫•y gi√° {symbol}: {str(e)}")
    return 0

def get_positions(symbol=None, api_key=None, api_secret=None):
    try:
        ts = int(time.time() * 1000)
        params = {"timestamp": ts}
        if symbol:
            params["symbol"] = symbol.upper()
        query = urllib.parse.urlencode(params)
        sig = sign(query, api_secret)
        url = f"https://fapi.binance.com/fapi/v2/positionRisk?{query}&signature={sig}"
        headers = {'X-MBX-APIKEY': api_key}
        
        positions = binance_api_request(url, headers=headers)
        if not positions:
            return []
        if symbol:
            for pos in positions:
                if pos['symbol'] == symbol.upper():
                    return [pos]
        return positions
    except Exception as e:
        logger.error(f"L·ªói l·∫•y v·ªã th·∫ø: {str(e)}")
    return []

# ========== COIN MANAGER ==========
class CoinManager:
    def __init__(self):
        self.active_coins = set()
        self._lock = threading.Lock()
    
    def register_coin(self, symbol):
        if not symbol:
            return
        with self._lock:
            self.active_coins.add(symbol.upper())
    
    def unregister_coin(self, symbol):
        if not symbol:
            return
        with self._lock:
            self.active_coins.discard(symbol.upper())
    
    def is_coin_active(self, symbol):
        if not symbol:
            return False
        with self._lock:
            return symbol.upper() in self.active_coins
    
    def get_active_coins(self):
        with self._lock:
            return list(self.active_coins)

# ========== GLOBAL MARKET ANALYZER ==========
class GlobalMarketAnalyzer:
    def __init__(self, api_key, api_secret):
        self.api_key = api_key
        self.api_secret = api_secret
        self.last_analysis_time = 0
        self.analysis_interval = 30  # TƒÉng l√™n 30 gi√¢y ƒë·ªÉ gi·∫£m request
        self.current_market_signal = "NEUTRAL"
        self.last_green_count = 0
        self.last_red_count = 0
        self.last_neutral_count = 0
        self.previous_green_count = 0
        self.previous_red_count = 0
        self.previous_neutral_count = 0
        
    def analyze_global_market(self):
        """Ph√¢n t√≠ch to√†n th·ªã tr∆∞·ªùng - D√ôNG 100 COIN KH·ªêI L∆Ø·ª¢NG CAO NH·∫§T"""
        try:
            current_time = time.time()
            if current_time - self.last_analysis_time < self.analysis_interval:
                return self.current_market_signal
    
            # L·∫•y danh s√°ch 100 coin volume cao nh·∫•t ƒë·ªÉ ph√¢n t√≠ch h∆∞·ªõng
            top_symbols = get_top_volume_symbols(limit=100)
            if not top_symbols or len(top_symbols) < 50:
                logger.warning(f"‚ö†Ô∏è Kh√¥ng ƒë·ªß coin volume cao: {len(top_symbols) if top_symbols else 0}/100")
                return "NEUTRAL"
    
            prev_green = prev_red = prev_neutral = 0
            curr_green = curr_red = curr_neutral = 0
            failed_symbols = 0
            sample_count = 0
    
            for symbol in top_symbols[:100]:  # Ph√¢n t√≠ch 100 coin volume cao
                try:
                    klines = self.get_klines(symbol, '1m', limit=3)
                    if not klines or len(klines) < 3:
                        failed_symbols += 1
                        continue
    
                    prev_candle = klines[-3]
                    curr_candle = klines[-2]
    
                    po, pc = float(prev_candle[1]), float(prev_candle[4])
                    co, cc = float(curr_candle[1]), float(curr_candle[4])
    
                    # ƒê·∫øm m√†u ph√∫t TR∆Ø·ªöC
                    if pc > po:      prev_green += 1
                    elif pc < po:    prev_red   += 1
                    else:            prev_neutral += 1
    
                    # ƒê·∫øm m√†u ph√∫t HI·ªÜN T·∫†I
                    if cc > co:      curr_green += 1
                    elif cc < co:    curr_red   += 1
                    else:            curr_neutral += 1
    
                    sample_count += 1
                    time.sleep(0.05)  # Gi·∫£m delay ƒë·ªÉ tƒÉng t·ªëc ƒë·ªô

                except Exception:
                    failed_symbols += 1
                    continue
    
            if sample_count < 50:
                logger.warning(f"‚ö†Ô∏è Ph√¢n t√≠ch kh√¥ng ƒë·ªß s√¢u: {sample_count}/100 coin")
                return "NEUTRAL"
    
            green_change = ((curr_green - prev_green) / max(1, prev_green)) * 100.0
            red_change   = ((curr_red   - prev_red)   / max(1, prev_red))   * 100.0
    
            logger.info(
                f"üìä TO√ÄN TH·ªä TR∆Ø·ªúNG (100 coin) | "
                f"Prev üü¢{prev_green} üî¥{prev_red}  ‚Üí  "
                f"Curr üü¢{curr_green} üî¥{curr_red} | "
                f"Œîüü¢ {green_change:+.1f}% | Œîüî¥ {red_change:+.1f}%"
            )
    
            signal = "NEUTRAL"
            if green_change >= 10:
                signal = "BUY"
                logger.info(f"üéØ T√çN HI·ªÜU BUY TO√ÄN TH·ªä TR∆Ø·ªúNG: N·∫øn xanh tƒÉng {green_change:.1f}%")
            elif red_change >= 10:
                signal = "SELL"
                logger.info(f"üéØ T√çN HI·ªÜU SELL TO√ÄN TH·ªä TR∆Ø·ªúNG: N·∫øn ƒë·ªè tƒÉng {red_change:.1f}%")
            else:
                signal = self.current_market_signal
    
            self.previous_green_count = prev_green
            self.previous_red_count = prev_red
            self.previous_neutral_count = prev_neutral
    
            self.current_market_signal = signal
            self.last_analysis_time = current_time
            self.last_green_count = curr_green
            self.last_red_count = curr_red
            self.last_neutral_count = curr_neutral
    
            logger.info(
                f"üìä T√çN HI·ªÜU TO√ÄN TH·ªä TR∆Ø·ªúNG: {signal} | "
                f"HI·ªÜN: üü¢ {curr_green} | üî¥ {curr_red} | "
                f"TR∆Ø·ªöC: üü¢ {prev_green} | üî¥ {prev_red}"
            )
    
            return signal
    
        except Exception as e:
            logger.error(f"‚ùå L·ªói ph√¢n t√≠ch to√†n th·ªã tr∆∞·ªùng: {str(e)}")
            return "NEUTRAL"

    
    def get_klines(self, symbol, interval, limit=2):
        """L·∫•y d·ªØ li·ªáu n·∫øn t·ª´ Binance"""
        max_retries = 2
        for attempt in range(max_retries):
            try:
                url = "https://fapi.binance.com/fapi/v1/klines"
                params = {
                    'symbol': symbol.upper(),
                    'interval': interval,
                    'limit': limit
                }
                data = binance_api_request(url, params=params)
                if data and len(data) >= limit:
                    return data
                elif attempt < max_retries - 1:
                    time.sleep(0.3)
                    continue
            except Exception as e:
                if attempt < max_retries - 1:
                    time.sleep(0.3)
                    continue
        return None

# ========== SMART COIN FINDER ƒê√É S·ª¨A ==========
class SmartCoinFinder:
    def __init__(self, api_key, api_secret):
        self.api_key = api_key
        self.api_secret = api_secret
        self.global_analyzer = GlobalMarketAnalyzer(api_key, api_secret)
        
    def get_global_market_signal(self):
        """Ch·ªâ s·ª≠ d·ª•ng t√≠n hi·ªáu t·ª´ ph√¢n t√≠ch to√†n th·ªã tr∆∞·ªùng (100 coin volume cao)"""
        return self.global_analyzer.analyze_global_market()
    
    def get_symbol_leverage(self, symbol):
        """L·∫•y ƒë√≤n b·∫©y t·ªëi ƒëa c·ªßa symbol"""
        return get_max_leverage(symbol, self.api_key, self.api_secret)
    
    def find_best_coin(self, target_direction, excluded_coins=None):
        """T√¨m coin t·ªët nh·∫•t - D√ôNG COIN BI·∫æN ƒê·ªòNG M·∫†NH NH·∫§T"""
        try:
            # L·∫•y top coin bi·∫øn ƒë·ªông m·∫°nh nh·∫•t 1 gi·ªù
            volatile_symbols = get_top_volatile_symbols(limit=30)
            
            if not volatile_symbols:
                logger.warning("‚ùå Kh√¥ng t√¨m th·∫•y coin bi·∫øn ƒë·ªông m·∫°nh")
                return None
            
            # Th·ª≠ c√°c coin bi·∫øn ƒë·ªông m·∫°nh nh·∫•t tr∆∞·ªõc
            for symbol in volatile_symbols:
                if excluded_coins and symbol in excluded_coins:
                    continue
                
                max_lev = self.get_symbol_leverage(symbol)
                if max_lev < 10:  # Ch·ªâ ch·ªçn coin c√≥ ƒë√≤n b·∫©y >= 10x
                    continue
                
                current_price = get_current_price(symbol)
                if current_price <= 0:
                    continue
                    
                logger.info(f"‚úÖ T√¨m th·∫•y coin bi·∫øn ƒë·ªông: {symbol} - ƒê√≤n b·∫©y: {max_lev}x")
                return symbol
            
            return None
            
        except Exception as e:
            logger.error(f"L·ªói t√¨m coin: {str(e)}")
            return None

# ========== WEBSOCKET MANAGER ==========
class WebSocketManager:
    def __init__(self):
        self.connections = {}
        self.executor = ThreadPoolExecutor(max_workers=10)
        self._lock = threading.Lock()
        self._stop_event = threading.Event()
        
    def add_symbol(self, symbol, callback):
        if not symbol:
            return
        symbol = symbol.upper()
        with self._lock:
            if symbol not in self.connections:
                self._create_connection(symbol, callback)
                
    def _create_connection(self, symbol, callback):
        if self._stop_event.is_set():
            return
        stream = f"{symbol.lower()}@trade"
        url = f"wss://fstream.binance.com/ws/{stream}"
        
        def on_message(ws, message):
            try:
                data = json.loads(message)
                if 'p' in data:
                    price = float(data['p'])
                    self.executor.submit(callback, price)
            except Exception as e:
                logger.error(f"L·ªói x·ª≠ l√Ω tin nh·∫Øn WebSocket {symbol}: {str(e)}")
                
        def on_error(ws, error):
            logger.error(f"L·ªói WebSocket {symbol}: {str(error)}")
            if not self._stop_event.is_set():
                time.sleep(5)
                self._reconnect(symbol, callback)
            
        def on_close(ws, close_status_code, close_msg):
            logger.info(f"WebSocket ƒë√≥ng {symbol}: {close_status_code} - {close_msg}")
            if not self._stop_event.is_set() and symbol in self.connections:
                time.sleep(5)
                self._reconnect(symbol, callback)
                
        ws = websocket.WebSocketApp(
            url,
            on_message=on_message,
            on_error=on_error,
            on_close=on_close
        )
        
        thread = threading.Thread(target=ws.run_forever, daemon=True)
        thread.start()
        
        self.connections[symbol] = {
            'ws': ws,
            'thread': thread,
            'callback': callback
        }
        logger.info(f"WebSocket b·∫Øt ƒë·∫ßu cho {symbol}")
        
    def _reconnect(self, symbol, callback):
        logger.info(f"K·∫øt n·ªëi l·∫°i WebSocket cho {symbol}")
        self.remove_symbol(symbol)
        self._create_connection(symbol, callback)
        
    def remove_symbol(self, symbol):
        if not symbol:
            return
        symbol = symbol.upper()
        with self._lock:
            if symbol in self.connections:
                try:
                    self.connections[symbol]['ws'].close()
                except Exception as e:
                    logger.error(f"L·ªói ƒë√≥ng WebSocket {symbol}: {str(e)}")
                del self.connections[symbol]
                logger.info(f"WebSocket ƒë√£ x√≥a cho {symbol}")
                
    def stop(self):
        self._stop_event.set()
        for symbol in list(self.connections.keys()):
            self.remove_symbol(symbol)

# ========== BASE BOT ƒê√É S·ª¨A ==========
class BaseBot:
    def __init__(self, symbol, lev, percent, tp, sl, roi_trigger, ws_manager, api_key, api_secret, 
                 telegram_bot_token, telegram_chat_id, strategy_name, config_key=None, bot_id=None):
        
        self.symbol = symbol.upper() if symbol else None
        self.lev = lev
        self.percent = percent
        self.tp = tp
        self.sl = sl
        self.roi_trigger = roi_trigger
        self.ws_manager = ws_manager
        self.api_key = api_key
        self.api_secret = api_secret
        self.telegram_bot_token = telegram_bot_token
        self.telegram_chat_id = telegram_chat_id
        self.strategy_name = strategy_name
        self.config_key = config_key
        self.bot_id = bot_id or f"{strategy_name}_{int(time.time())}_{random.randint(1000, 9999)}"
        
        self.status = "searching"
        self.side = ""
        self.qty = 0
        self.entry = 0
        self.prices = []
        self.current_price = 0
        self.position_open = False
        self._stop = False
        
        self.last_trade_time = 0
        self.last_close_time = 0
        self.last_position_check = 0
        self.last_error_log_time = 0
        
        self.cooldown_period = 3
        self.position_check_interval = 30
        
        self._close_attempted = False
        self._last_close_attempt = 0
        
        self.should_be_removed = False
        
        self.coin_manager = CoinManager()
        self.coin_finder = SmartCoinFinder(api_key, api_secret)
        
        self.current_target_direction = None
        self.last_find_time = 0
        self.find_interval = 30
        
        # Bi·∫øn qu·∫£n l√Ω nh·ªìi l·ªánh Fibonacci
        self.entry_base = 0
        self.average_down_count = 0
        self.last_average_down_time = 0
        self.average_down_cooldown = 60
        self.max_average_down_count = 7
        
        # Bi·∫øn theo d√µi n·∫øn v√† ROI
        self.entry_green_count = 0
        self.entry_red_count = 0
        self.high_water_mark_roi = 0
        self.roi_check_activated = False
        
        # BI·∫æN M·ªöI: H∆∞·ªõng cho l·ªánh ti·∫øp theo (ng∆∞·ª£c v·ªõi l·ªánh v·ª´a ƒë√≥ng)
        self.next_side = None
        
        # BI·∫æN M·ªöI: th·ªùi gian b·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng coin
        self.coin_start_time = 0
        self.coin_max_duration = 3600  # 1 gi·ªù = 3600 gi√¢y
        
        self.check_position_status()
        if self.symbol:
            self.ws_manager.add_symbol(self.symbol, self._handle_price_update)
        
        self.thread = threading.Thread(target=self._run, daemon=True)
        self.thread.start()
        
        roi_info = f" | üéØ ROI Trigger: {roi_trigger}%" if roi_trigger else " | üéØ ROI Trigger: T·∫Øt"
        
        if self.symbol:
            self.log(f"üü¢ Bot {strategy_name} kh·ªüi ƒë·ªông | {self.symbol} | ƒêB: {lev}x | V·ªën: {percent}% | TP/SL: {tp}%/{sl}%{roi_info}")
        else:
            self.log(f"üü¢ Bot {strategy_name} kh·ªüi ƒë·ªông | ƒêang t√¨m coin... | ƒêB: {lev}x | V·ªën: {percent}% | TP/SL: {tp}%/{sl}%{roi_info}")

    def check_position_status(self):
        if not self.symbol:
            return
            
        try:
            positions = get_positions(self.symbol, self.api_key, self.api_secret)
            if not positions:
                self._reset_position()
                return
            
            position_found = False
            for pos in positions:
                if pos['symbol'] == self.symbol:
                    position_amt = float(pos.get('positionAmt', 0))
                    if abs(position_amt) > 0:
                        position_found = True
                        self.position_open = True
                        self.status = "open"
                        self.side = "BUY" if position_amt > 0 else "SELL"
                        self.qty = position_amt
                        self.entry = float(pos.get('entryPrice', 0))
                        break
                    else:
                        position_found = True
                        self._reset_position()
                        break
            
            if not position_found:
                self._reset_position()
                
        except Exception as e:
            if time.time() - self.last_error_log_time > 10:
                self.log(f"‚ùå L·ªói ki·ªÉm tra v·ªã th·∫ø: {str(e)}")
                self.last_error_log_time = time.time()

    def _reset_position(self):
        """Reset tr·∫°ng th√°i v·ªã th·∫ø nh∆∞ng gi·ªØ nguy√™n symbol"""
        self.position_open = False
        self.status = "waiting"  # Thay v√¨ "searching" ƒë·ªÉ ch·ªù m·ªü l·ªánh ng∆∞·ª£c l·∫°i
        self.side = ""
        self.qty = 0
        self.entry = 0
        self._close_attempted = False
        self._last_close_attempt = 0
        # Reset th√¥ng tin nh·ªìi l·ªánh
        self.entry_base = 0
        self.average_down_count = 0
        # Reset th√¥ng tin theo d√µi n·∫øn v√† ROI
        self.entry_green_count = 0
        self.entry_red_count = 0
        self.high_water_mark_roi = 0
        self.roi_check_activated = False
        # KH√îNG reset symbol: self.symbol = None

    def find_and_set_coin(self):
        """T√¨m v√† thi·∫øt l·∫≠p coin m·ªõi cho bot - D√ôNG COIN BI·∫æN ƒê·ªòNG M·∫†NH"""
        try:
            current_time = time.time()
            if current_time - self.last_find_time < self.find_interval:
                return False
            
            self.last_find_time = current_time
            
            # B∆∞·ªõc 1: X√°c ƒë·ªãnh h∆∞·ªõng ∆∞u ti√™n t·ª´ T√çN HI·ªÜU TO√ÄN TH·ªä TR∆Ø·ªúNG (100 coin volume cao)
            target_direction = self.coin_finder.get_global_market_signal()
            if target_direction == "NEUTRAL":
                # N·∫øu th·ªã tr∆∞·ªùng c√¢n b·∫±ng, ch·ªçn ng·∫´u nhi√™n
                target_direction = random.choice(["BUY", "SELL"])
            
            # L·∫•y danh s√°ch coin ƒëang active ƒë·ªÉ tr√°nh tr√πng l·∫∑p
            active_coins = self.coin_manager.get_active_coins()
            
            # B∆∞·ªõc 2: T√¨m coin bi·∫øn ƒë·ªông m·∫°nh ph√π h·ª£p
            new_symbol = self.coin_finder.find_best_coin(
                target_direction, 
                excluded_coins=active_coins
            )
            
            if new_symbol:
                # Ki·ªÉm tra ƒë√≤n b·∫©y m·ªôt l·∫ßn n·ªØa
                max_lev = self.coin_finder.get_symbol_leverage(new_symbol)
                if max_lev >= self.lev:
                    # ƒêƒÉng k√Ω coin m·ªõi
                    self.coin_manager.register_coin(new_symbol)
                    
                    # C·∫≠p nh·∫≠t symbol cho bot
                    if self.symbol:
                        self.ws_manager.remove_symbol(self.symbol)
                        self.coin_manager.unregister_coin(self.symbol)
                    
                    self.symbol = new_symbol
                    self.ws_manager.add_symbol(new_symbol, self._handle_price_update)
                    self.status = "waiting"
                    
                    # RESET th·ªùi gian s·ª≠ d·ª•ng coin
                    self.coin_start_time = time.time()
                    
                    # ƒê·∫∑t h∆∞·ªõng cho l·ªánh ƒë·∫ßu ti√™n
                    self.next_side = target_direction
                    
                    self.log(f"üéØ ƒê√£ t√¨m th·∫•y coin bi·∫øn ƒë·ªông: {new_symbol} - H∆∞·ªõng ∆∞u ti√™n: {target_direction}")
                    return True
            
            return False
            
        except Exception as e:
            self.log(f"‚ùå L·ªói t√¨m coin: {str(e)}")
            return False

    def verify_leverage_and_switch(self):
        """Ki·ªÉm tra v√† chuy·ªÉn ƒë·ªïi ƒë√≤n b·∫©y n·∫øu c·∫ßn"""
        if not self.symbol:
            return True
            
        try:
            current_leverage = self.coin_finder.get_symbol_leverage(self.symbol)
            if current_leverage >= self.lev:
                # Thi·∫øt l·∫≠p ƒë√≤n b·∫©y mong mu·ªën
                if set_leverage(self.symbol, self.lev, self.api_key, self.api_secret):
                    return True
            return False
        except Exception as e:
            self.log(f"‚ùå L·ªói ki·ªÉm tra ƒë√≤n b·∫©y: {str(e)}")
            return False

    def _run(self):
        while not self._stop:
            try:
                current_time = time.time()
                
                # KI·ªÇM TRA TH·ªúI GIAN S·ª¨ D·ª§NG COIN (1 GI·ªú)
                if (self.symbol and self.coin_start_time > 0 and 
                    current_time - self.coin_start_time > self.coin_max_duration):
                    self.log(f"üïí ƒê√£ h·∫øt 1 gi·ªù s·ª≠ d·ª•ng {self.symbol}, t√¨m coin m·ªõi...")
                    if self.position_open:
                        self.close_position("H·∫øt th·ªùi gian s·ª≠ d·ª•ng coin")
                    self._cleanup_symbol()
                    continue
                
                # KI·ªÇM TRA ƒê√íN B·∫®Y ƒê·ªäNH K·ª≤
                if current_time - getattr(self, '_last_leverage_check', 0) > 60:
                    if not self.verify_leverage_and_switch():
                        if self.symbol:
                            self.ws_manager.remove_symbol(self.symbol)
                            self.coin_manager.unregister_coin(self.symbol)
                            self.symbol = None
                        time.sleep(1)
                        continue
                    self._last_leverage_check = current_time
                
                if current_time - self.last_position_check > self.position_check_interval:
                    self.check_position_status()
                    self.last_position_check = current_time
                
                # KI·ªÇM TRA NH·ªíI L·ªÜNH KHI C√ì V·ªä TH·∫æ
                if self.position_open and self.entry_base > 0:
                    self.check_averaging_down()
                              
                if not self.position_open:
                    # QUAN TR·ªåNG: N·∫øu kh√¥ng c√≥ symbol, t√¨m coin m·ªõi NGAY
                    if not self.symbol:
                        if self.find_and_set_coin():
                            self.log("‚úÖ ƒê√£ t√¨m th·∫•y coin bi·∫øn ƒë·ªông m·ªõi, ch·ªù t√≠n hi·ªáu...")
                        time.sleep(1)
                        continue
                    
                    # N·∫æU C√ì SYMBOL V√Ä C√ì H∆Ø·ªöNG CHO L·ªÜNH TI·∫æP THEO - M·ªû L·ªÜNH NGAY
                    if self.symbol and self.next_side:
                        if current_time - self.last_trade_time > 3 and current_time - self.last_close_time > self.cooldown_period:
                            if self.open_position(self.next_side):
                                self.last_trade_time = current_time
                                self.next_side = None  # Reset sau khi m·ªü l·ªánh th√†nh c√¥ng
                            else:
                                time.sleep(1)
                        else:
                            time.sleep(1)
                    else:
                        # Ph√¢n t√≠ch t√≠n hi·ªáu cho l·ªánh ƒë·∫ßu ti√™n
                        signal = self.get_signal()
                        
                        if signal and signal != "NEUTRAL":
                            if current_time - self.last_trade_time > 3 and current_time - self.last_close_time > self.cooldown_period:
                                if self.open_position(signal):
                                    self.last_trade_time = current_time
                                else:
                                    time.sleep(1)
                            else:
                                time.sleep(1)
                        else:
                            time.sleep(1)
                
                if self.position_open and not self._close_attempted:
                    self.check_tp_sl()
                    
                time.sleep(1)
            
            except Exception as e:
                if time.time() - self.last_error_log_time > 10:
                    self.log(f"‚ùå L·ªói h·ªá th·ªëng: {str(e)}")
                    self.last_error_log_time = time.time()
                time.sleep(1)

    def get_signal(self):
        """Ph∆∞∆°ng th·ª©c n√†y s·∫Ω ƒë∆∞·ª£c override b·ªüi c√°c bot chi·∫øn l∆∞·ª£c c·ª• th·ªÉ"""
        return "NEUTRAL"

    def _handle_price_update(self, price):
        """X·ª≠ l√Ω c·∫≠p nh·∫≠t gi√° realtime"""
        self.current_price = price
        self.prices.append(price)
        
        # Gi·ªØ l·ªãch s·ª≠ gi√° trong gi·ªõi h·∫°n
        if len(self.prices) > 100:
            self.prices.pop(0)

    def stop(self):
        self._stop = True
        if self.symbol:
            self.ws_manager.remove_symbol(self.symbol)
        if self.symbol:
            self.coin_manager.unregister_coin(self.symbol)
        if self.symbol:
            cancel_all_orders(self.symbol, self.api_key, self.api_secret)
        self.log(f"üî¥ Bot d·ª´ng")

    def open_position(self, side):
        if side not in ["BUY", "SELL"]:
            self.log(f"‚ùå Side kh√¥ng h·ª£p l·ªá: {side}")
            self._cleanup_symbol()
            return False
            
        try:
            # Ki·ªÉm tra v·ªã th·∫ø hi·ªán t·∫°i
            self.check_position_status()
            
            if self.position_open:
                self.log(f"‚ö†Ô∏è ƒê√£ c√≥ v·ªã th·∫ø {self.side}, b·ªè qua t√≠n hi·ªáu {side}")
                return False
    
            if self.should_be_removed:
                self.log("‚ö†Ô∏è Bot ƒë√£ ƒë∆∞·ª£c ƒë√°nh d·∫•u x√≥a, kh√¥ng m·ªü l·ªánh m·ªõi")
                return False
    
            # KI·ªÇM TRA L·∫†I ƒê√íN B·∫®Y TR∆Ø·ªöC KHI M·ªû L·ªÜNH
            current_leverage = self.coin_finder.get_symbol_leverage(self.symbol)
            if current_leverage < self.lev:
                self.log(f"‚ùå Coin {self.symbol} ch·ªâ h·ªó tr·ª£ ƒë√≤n b·∫©y {current_leverage}x < {self.lev}x -> T√åM COIN KH√ÅC")
                self._cleanup_symbol()
                return False
    
            # Thi·∫øt l·∫≠p ƒë√≤n b·∫©y
            if not set_leverage(self.symbol, self.lev, self.api_key, self.api_secret):
                self.log(f"‚ùå Kh√¥ng th·ªÉ ƒë·∫∑t ƒë√≤n b·∫©y {self.lev}x -> T√åM COIN KH√ÅC")
                self._cleanup_symbol()
                return False
    
            # Ki·ªÉm tra s·ªë d∆∞
            balance = get_balance(self.api_key, self.api_secret)
            if balance is None or balance <= 0:
                self.log("‚ùå Kh√¥ng ƒë·ªß s·ªë d∆∞")
                return False
    
            # L·∫•y gi√° hi·ªán t·∫°i - TH√äM KI·ªÇM TRA L·ªñI
            current_price = get_current_price(self.symbol)
            if current_price <= 0:
                self.log(f"‚ùå L·ªói l·∫•y gi√° {self.symbol}: {current_price} -> T√åM COIN KH√ÅC")
                self._cleanup_symbol()
                return False
    
            # T√≠nh to√°n kh·ªëi l∆∞·ª£ng
            step_size = get_step_size(self.symbol, self.api_key, self.api_secret)
            usd_amount = balance * (self.percent / 100)
            qty = (usd_amount * self.lev) / current_price
            
            if step_size > 0:
                qty = math.floor(qty / step_size) * step_size
                qty = round(qty, 8)
    
            if qty <= 0 or qty < step_size:
                self.log(f"‚ùå Kh·ªëi l∆∞·ª£ng kh√¥ng h·ª£p l·ªá: {qty} (step: {step_size}) -> T√åM COIN KH√ÅC")
                self._cleanup_symbol()
                return False
    
            self.log(f"üìä ƒêang ƒë·∫∑t l·ªánh {side} - SL: {step_size}, Qty: {qty}, Gi√°: {current_price}")
            
            # H·ªßy m·ªçi l·ªánh ch·ªù tr∆∞·ªõc ƒë√≥
            cancel_all_orders(self.symbol, self.api_key, self.api_secret)
            time.sleep(0.2)
            
            # ƒê·∫∑t l·ªánh
            result = place_order(self.symbol, side, qty, self.api_key, self.api_secret)
            
            if result and 'orderId' in result:
                executed_qty = float(result.get('executedQty', 0))
                avg_price = float(result.get('avgPrice', current_price))
                
                if executed_qty >= 0:
                    # C·∫¨P NH·∫¨T TH·ªúI GIAN B·∫ÆT ƒê·∫¶U S·ª¨ D·ª§NG COIN (n·∫øu ch∆∞a c√≥)
                    if self.coin_start_time == 0:
                        self.coin_start_time = time.time()
                    
                    self.entry = avg_price
                    self.entry_base = avg_price
                    self.average_down_count = 0
                    self.side = side
                    self.qty = executed_qty if side == "BUY" else -executed_qty
                    self.position_open = True
                    self.status = "open"
                    
                    # L∆ØU S·ªê N·∫æN T·∫†I TH·ªúI ƒêI·ªÇM V√ÄO L·ªÜNH
                    self.entry_green_count = self.coin_finder.global_analyzer.last_green_count
                    self.entry_red_count = self.coin_finder.global_analyzer.last_red_count
                    self.high_water_mark_roi = 0
                    self.roi_check_activated = False
                    
                    roi_trigger_info = f" | üéØ ROI Trigger: {self.roi_trigger}%" if self.roi_trigger else ""
                    
                    message = (
                        f"‚úÖ <b>ƒê√É M·ªû V·ªä TH·∫æ {self.symbol}</b>\n"
                        f"ü§ñ Chi·∫øn l∆∞·ª£c: {self.strategy_name}\n"
                        f"üìå H∆∞·ªõng: {side}\n"
                        f"üè∑Ô∏è Gi√° v√†o: {self.entry:.4f}\n"
                        f"üìä Kh·ªëi l∆∞·ª£ng: {executed_qty:.4f}\n"
                        f"üíµ Gi√° tr·ªã: {executed_qty * self.entry:.2f} USDT\n"
                        f"üí∞ ƒê√≤n b·∫©y: {self.lev}x\n"
                        f"üéØ TP: {self.tp}% | üõ°Ô∏è SL: {self.sl}%{roi_trigger_info}\n"
                        f"üìä N·∫øn t·∫°i entry: üü¢ {self.entry_green_count} | üî¥ {self.entry_red_count}\n"
                        f"‚è∞ Th·ªùi gian s·ª≠ d·ª•ng coin: 1 gi·ªù"
                    )
                    
                    if self.roi_trigger:
                        message += f"\nüéØ <b>C∆° ch·∫ø ch·ªët l·ªánh ROI {self.roi_trigger}% ƒë√£ k√≠ch ho·∫°t</b>"
                    
                    self.log(message)
                    return True
                else:
                    self.log(f"‚ùå L·ªánh kh√¥ng kh·ªõp - S·ªë l∆∞·ª£ng: {qty} -> T√åM COIN KH√ÅC")
                    self._cleanup_symbol()
                    return False
            else:
                error_msg = result.get('msg', 'Unknown error') if result else 'No response'
                self.log(f"‚ùå L·ªói ƒë·∫∑t l·ªánh {side}: {error_msg} -> T√åM COIN KH√ÅC")
                
                if result and 'code' in result:
                    self.log(f"üìã M√£ l·ªói Binance: {result['code']} - {result.get('msg', '')}")
                
                self._cleanup_symbol()
                return False
                        
        except Exception as e:
            self.log(f"‚ùå L·ªói m·ªü l·ªánh: {str(e)} -> T√åM COIN KH√ÅC")
            self._cleanup_symbol()
            return False
    
    def _cleanup_symbol(self):
        """D·ªçn d·∫πp symbol hi·ªán t·∫°i v√† chuy·ªÉn v·ªÅ tr·∫°ng th√°i t√¨m ki·∫øm"""
        if self.symbol:
            try:
                self.ws_manager.remove_symbol(self.symbol)
                self.coin_manager.unregister_coin(self.symbol)
                self.log(f"üßπ ƒê√£ d·ªçn d·∫πp symbol {self.symbol}")
            except Exception as e:
                self.log(f"‚ö†Ô∏è L·ªói khi d·ªçn d·∫πp symbol: {str(e)}")
            
            self.symbol = None
        
        # Reset ho√†n to√†n tr·∫°ng th√°i
        self.status = "searching"
        self.position_open = False
        self.side = ""
        self.qty = 0
        self.entry = 0
        self.entry_base = 0
        self.average_down_count = 0
        self.entry_green_count = 0
        self.entry_red_count = 0
        self.high_water_mark_roi = 0
        self.roi_check_activated = False
        self.next_side = None  # Reset h∆∞·ªõng ti·∫øp theo
        self.coin_start_time = 0  # Reset th·ªùi gian s·ª≠ d·ª•ng coin
        
        self.log("üîÑ ƒê√£ reset bot, s·∫µn s√†ng t√¨m coin bi·∫øn ƒë·ªông m·ªõi")

    def close_position(self, reason=""):
        try:
            self.check_position_status()
            
            if not self.position_open or abs(self.qty) <= 0:
                self.log(f"‚ö†Ô∏è Kh√¥ng c√≥ v·ªã th·∫ø ƒë·ªÉ ƒë√≥ng: {reason}")
                return False

            current_time = time.time()
            if self._close_attempted and current_time - self._last_close_attempt < 30:
                self.log(f"‚ö†Ô∏è ƒêang th·ª≠ ƒë√≥ng l·ªánh l·∫ßn tr∆∞·ªõc, ch·ªù...")
                return False
            
            self._close_attempted = True
            self._last_close_attempt = current_time

            close_side = "SELL" if self.side == "BUY" else "BUY"
            close_qty = abs(self.qty)
            
            cancel_all_orders(self.symbol, self.api_key, self.api_secret)
            time.sleep(0.5)
            
            result = place_order(self.symbol, close_side, close_qty, self.api_key, self.api_secret)
            if result and 'orderId' in result:
                current_price = get_current_price(self.symbol)
                pnl = 0
                if self.entry > 0:
                    if self.side == "BUY":
                        pnl = (current_price - self.entry) * abs(self.qty)
                    else:
                        pnl = (self.entry - current_price) * abs(self.qty)
                
                # TH√äM TH√îNG TIN N·∫æN V√ÄO MESSAGE
                current_green = self.coin_finder.global_analyzer.last_green_count
                current_red = self.coin_finder.global_analyzer.last_red_count
                
                message = (
                    f"‚õî <b>ƒê√É ƒê√ìNG V·ªä TH·∫æ {self.symbol}</b>\n"
                    f"ü§ñ Chi·∫øn l∆∞·ª£c: {self.strategy_name}\n"
                    f"üìå L√Ω do: {reason}\n"
                    f"üè∑Ô∏è Gi√° ra: {current_price:.4f}\n"
                    f"üìä Kh·ªëi l∆∞·ª£ng: {close_qty:.4f}\n"
                    f"üí∞ PnL: {pnl:.2f} USDT\n"
                    f"üìà S·ªë l·∫ßn nh·ªìi: {self.average_down_count}\n"
                    f"üìä N·∫øn t·∫°i entry: üü¢ {self.entry_green_count} | üî¥ {self.entry_red_count}\n"
                    f"üìä N·∫øn t·∫°i close: üü¢ {current_green} | üî¥ {current_red}"
                )
                self.log(message)
                
                # QUAN TR·ªåNG: ƒê·∫∂T H∆Ø·ªöNG CHO L·ªÜNH TI·∫æP THEO L√Ä NG∆Ø·ª¢C L·∫†I
                self.next_side = "BUY" if self.side == "SELL" else "SELL"
                
                # Reset position nh∆∞ng GI·ªÆ NGUY√äN SYMBOL
                self._reset_position()
                self.last_close_time = time.time()
                
                time.sleep(2)
                self.check_position_status()
                
                return True
            else:
                error_msg = result.get('msg', 'Unknown error') if result else 'No response'
                self.log(f"‚ùå L·ªói ƒë√≥ng l·ªánh: {error_msg}")
                self._close_attempted = False
                return False
                
        except Exception as e:
            self.log(f"‚ùå L·ªói ƒë√≥ng l·ªánh: {str(e)}")
            self._close_attempted = False
            return False

    def check_tp_sl(self):
        if not self.symbol or not self.position_open or self.entry <= 0 or self._close_attempted:
            return

        current_price = get_current_price(self.symbol)
        if current_price <= 0:
            return

        if self.side == "BUY":
            profit = (current_price - self.entry) * abs(self.qty)
        else:
            profit = (self.entry - current_price) * abs(self.qty)
            
        invested = self.entry * abs(self.qty) / self.lev
        if invested <= 0:
            return
            
        roi = (profit / invested) * 100

        # C·∫¨P NH·∫¨T ROI CAO NH·∫§T
        if roi > self.high_water_mark_roi:
            self.high_water_mark_roi = roi

        # KI·ªÇM TRA ƒêI·ªÄU KI·ªÜN ROI TRIGGER (do ng∆∞·ªùi d√πng nh·∫≠p) - LOGIC CH·ªêT L·ªÜNH M·ªöI
        if self.roi_trigger is not None and self.high_water_mark_roi >= self.roi_trigger and not self.roi_check_activated:
            self.roi_check_activated = True
            self.log(f"üéØ ƒê√É ƒê·∫†T ROI {self.roi_trigger}% - K√çCH HO·∫†T C∆† CH·∫æ CH·ªêT L·ªÜNH THEO N·∫æN")
        
        # N·∫æU ƒê√É K√çCH HO·∫†T KI·ªÇM TRA ROI TRIGGER, TH√å KI·ªÇM TRA ƒêI·ªÄU KI·ªÜN CH·ªêT L·ªÜNH
        if self.roi_check_activated:
            current_green = self.coin_finder.global_analyzer.last_green_count
            current_red = self.coin_finder.global_analyzer.last_red_count
            
            if self.side == "BUY":
                # N·∫øu s·ªë n·∫øn xanh hi·ªán t·∫°i GI·∫¢M 30% so v·ªõi l√∫c v√†o l·ªánh
                if current_green <= self.entry_green_count * 0.7:
                    self.close_position(f"‚úÖ ROI ƒë·∫°t {roi:.2f}% v√† n·∫øn xanh gi·∫£m 30% (t·ª´ {self.entry_green_count} xu·ªëng {current_green})")
                    return
            elif self.side == "SELL":
                # N·∫øu s·ªë n·∫øn ƒë·ªè hi·ªán t·∫°i GI·∫¢M 30% so v·ªõi l√∫c v√†o l·ªánh
                if current_red <= self.entry_red_count * 0.7:
                    self.close_position(f"‚úÖ ROI ƒë·∫°t {roi:.2f}% v√† n·∫øn ƒë·ªè gi·∫£m 30% (t·ª´ {self.entry_red_count} xu·ªëng {current_red})")
                    return

        # TP/SL TRUY·ªÄN TH·ªêNG (v·∫´n ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng)
        if self.tp is not None and roi >= self.tp:
            self.close_position(f"‚úÖ ƒê·∫°t TP {self.tp}% (ROI: {roi:.2f}%)")
        elif self.sl is not None and self.sl > 0 and roi <= -self.sl:
            self.close_position(f"‚ùå ƒê·∫°t SL {self.sl}% (ROI: {roi:.2f}%)")

    def check_averaging_down(self):
        """B∆∞·ªõc 4: Ki·ªÉm tra v√† th·ª±c hi·ªán nh·ªìi l·ªánh Fibonacci khi l·ªó"""
        if not self.position_open or not self.entry_base or self.average_down_count >= self.max_average_down_count:
            return
            
        try:
            current_time = time.time()
            if current_time - self.last_average_down_time < self.average_down_cooldown:
                return
                
            current_price = get_current_price(self.symbol)
            if current_price <= 0:
                return
                
            # T√≠nh % l·ªó so v·ªõi gi√° v√†o g·ªëc
            if self.side == "BUY":
                drawdown_pct = (self.entry_base - current_price) / self.entry_base * 100
            else:
                drawdown_pct = (current_price - self.entry_base) / self.entry_base * 100
                
            # C√°c m·ªëc Fibonacci ƒë·ªÉ nh·ªìi l·ªánh
            fib_levels = [2.0, 3.0, 5.0, 8.0, 13.0, 21.0, 34.0]
            
            if self.average_down_count < len(fib_levels):
                current_fib_level = fib_levels[self.average_down_count]
                
                if drawdown_pct >= current_fib_level:
                    # Th·ª±c hi·ªán nh·ªìi l·ªánh
                    if self.execute_average_down_order():
                        self.last_average_down_time = current_time
                        self.average_down_count += 1
                        
        except Exception as e:
            self.log(f"‚ùå L·ªói ki·ªÉm tra nh·ªìi l·ªánh: {str(e)}")

    def execute_average_down_order(self):
        """Th·ª±c hi·ªán l·ªánh nh·ªìi theo Fibonacci"""
        try:
            # T√≠nh kh·ªëi l∆∞·ª£ng nh·ªìi l·ªánh (c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh %)
            balance = get_balance(self.api_key, self.api_secret)
            if balance is None or balance <= 0:
                return False
                
            current_price = get_current_price(self.symbol)
            if current_price <= 0:
                return False
                
            # Kh·ªëi l∆∞·ª£ng nh·ªìi = % s·ªë d∆∞ * (s·ªë l·∫ßn nh·ªìi + 1) ƒë·ªÉ tƒÉng d·∫ßn
            additional_percent = self.percent * (self.average_down_count + 1)
            usd_amount = balance * (additional_percent / 100)
            qty = (usd_amount * self.lev) / current_price
            
            step_size = get_step_size(self.symbol, self.api_key, self.api_secret)
            if step_size > 0:
                qty = math.floor(qty / step_size) * step_size
                qty = round(qty, 8)
            
            if qty < step_size:
                return False
                
            # ƒê·∫∑t l·ªánh c√πng h∆∞·ªõng v·ªõi v·ªã th·∫ø hi·ªán t·∫°i
            result = place_order(self.symbol, self.side, qty, self.api_key, self.api_secret)
            
            if result and 'orderId' in result:
                executed_qty = float(result.get('executedQty', 0))
                avg_price = float(result.get('avgPrice', current_price))
                
                if executed_qty >= 0:
                    # C·∫≠p nh·∫≠t gi√° trung b√¨nh v√† kh·ªëi l∆∞·ª£ng
                    total_qty = abs(self.qty) + executed_qty
                    self.entry = (abs(self.qty) * self.entry + executed_qty * avg_price) / total_qty
                    self.qty = total_qty if self.side == "BUY" else -total_qty
                    
                    message = (
                        f"üìà <b>ƒê√É NH·ªíI L·ªÜNH FIBONACCI {self.symbol}</b>\n"
                        f"üî¢ L·∫ßn nh·ªìi: {self.average_down_count + 1}\n"
                        f"üìä Kh·ªëi l∆∞·ª£ng th√™m: {executed_qty:.4f}\n"
                        f"üè∑Ô∏è Gi√° nh·ªìi: {avg_price:.4f}\n"
                        f"üìà Gi√° trung b√¨nh m·ªõi: {self.entry:.4f}\n"
                        f"üí∞ T·ªïng kh·ªëi l∆∞·ª£ng: {total_qty:.4f}"
                    )
                    self.log(message)
                    return True
                    
            return False
            
        except Exception as e:
            self.log(f"‚ùå L·ªói nh·ªìi l·ªánh: {str(e)}")
            return False

    def log(self, message):
        logger.info(f"[{self.bot_id}] {message}")
        if self.telegram_bot_token and self.telegram_chat_id:
            send_telegram(f"<b>{self.bot_id}</b>: {message}", 
                         bot_token=self.telegram_bot_token, 
                         default_chat_id=self.telegram_chat_id)

# ========== BOT GLOBAL MARKET V·ªöI COIN BI·∫æN ƒê·ªòNG ==========
class GlobalMarketBot(BaseBot):
    def __init__(self, symbol, lev, percent, tp, sl, roi_trigger, ws_manager, api_key, api_secret, 
                 telegram_bot_token, telegram_chat_id, bot_id=None):
        super().__init__(symbol, lev, percent, tp, sl, roi_trigger, ws_manager, api_key, api_secret,
                        telegram_bot_token, telegram_chat_id, "Global-Market-Volatile", bot_id=bot_id)
    
    def get_signal(self):
        """S·ª≠ d·ª•ng t√≠n hi·ªáu t·ª´ ph√¢n t√≠ch to√†n th·ªã tr∆∞·ªùng (100 coin volume cao)"""
        return self.coin_finder.get_global_market_signal()

# ========== BOT MANAGER HO√ÄN CH·ªàNH ==========
class BotManager:
    def __init__(self, api_key=None, api_secret=None, telegram_bot_token=None, telegram_chat_id=None):
        self.ws_manager = WebSocketManager()
        self.bots = {}
        self.running = True
        self.start_time = time.time()
        self.user_states = {}
        
        self.api_key = api_key
        self.api_secret = api_secret
        self.telegram_bot_token = telegram_bot_token
        self.telegram_chat_id = telegram_chat_id
        
        if api_key and api_secret:
            self._verify_api_connection()
            self.log("üü¢ H·ªÜ TH·ªêNG BOT COIN BI·∫æN ƒê·ªòNG + T√çN HI·ªÜU KH·ªêI L∆Ø·ª¢NG ƒê√É KH·ªûI ƒê·ªòNG")
            
            self.telegram_thread = threading.Thread(target=self._telegram_listener, daemon=True)
            self.telegram_thread.start()
            
            if self.telegram_chat_id:
                self.send_main_menu(self.telegram_chat_id)
        else:
            self.log("‚ö° BotManager kh·ªüi ƒë·ªông ·ªü ch·∫ø ƒë·ªô kh√¥ng config")

    def _verify_api_connection(self):
        """Ki·ªÉm tra k·∫øt n·ªëi API - X·ª¨ L√ù L·ªñI 451"""
        try:
            balance = get_balance(self.api_key, self.api_secret)
            if balance is None:
                self.log("‚ùå L·ªñI: Kh√¥ng th·ªÉ k·∫øt n·ªëi Binance API. Ki·ªÉm tra:")
                self.log("   - API Key v√† Secret c√≥ ƒë√∫ng kh√¥ng?")
                self.log("   - C√≥ th·ªÉ b·ªã ch·∫∑n IP (l·ªói 451), th·ª≠ d√πng VPN")
                self.log("   - Ki·ªÉm tra k·∫øt n·ªëi internet")
                return False
            else:
                self.log(f"‚úÖ K·∫øt n·ªëi Binance th√†nh c√¥ng! S·ªë d∆∞: {balance:.2f} USDT")
                return True
        except Exception as e:
            self.log(f"‚ùå L·ªói ki·ªÉm tra k·∫øt n·ªëi: {str(e)}")
            return False

    def get_position_summary(self):
        """L·∫•y th·ªëng k√™ t·ªïng quan"""
        try:
            all_positions = get_positions(api_key=self.api_key, api_secret=self.api_secret)
            
            binance_buy_count = 0
            binance_sell_count = 0
            binance_positions = []
            
            # ƒê·∫øm v·ªã th·∫ø t·ª´ Binance
            for pos in all_positions:
                position_amt = float(pos.get('positionAmt', 0))
                if position_amt != 0:
                    symbol = pos.get('symbol', 'UNKNOWN')
                    entry_price = float(pos.get('entryPrice', 0))
                    leverage = float(pos.get('leverage', 1))
                    position_value = abs(position_amt) * entry_price / leverage
                    
                    if position_amt > 0:
                        binance_buy_count += 1
                        binance_positions.append({
                            'symbol': symbol,
                            'side': 'LONG',
                            'leverage': leverage,
                            'size': abs(position_amt),
                            'entry': entry_price,
                            'value': position_value
                        })
                    else:
                        binance_sell_count += 1
                        binance_positions.append({
                            'symbol': symbol, 
                            'side': 'SHORT',
                            'leverage': leverage,
                            'size': abs(position_amt),
                            'entry': entry_price,
                            'value': position_value
                        })
        
            # Th·ªëng k√™ bot
            bot_details = []
            searching_bots = 0
            waiting_bots = 0
            trading_bots = 0
            
            for bot_id, bot in self.bots.items():
                bot_info = {
                    'bot_id': bot_id,
                    'symbol': bot.symbol or 'ƒêang t√¨m...',
                    'status': bot.status,
                    'side': bot.side,
                    'leverage': bot.lev,
                    'percent': bot.percent,
                    'tp': bot.tp,
                    'sl': bot.sl,
                    'roi_trigger': bot.roi_trigger
                }
                bot_details.append(bot_info)
                
                if bot.status == "searching":
                    searching_bots += 1
                elif bot.status == "waiting":
                    waiting_bots += 1
                elif bot.status == "open":
                    trading_bots += 1
            
            # T·∫°o b√°o c√°o chi ti·∫øt
            summary = "üìä **TH·ªêNG K√ä CHI TI·∫æT H·ªÜ TH·ªêNG**\n\n"
            
            # Ph·∫ßn 1: S·ªë d∆∞
            balance = get_balance(self.api_key, self.api_secret)
            if balance is not None:
                summary += f"üí∞ **S·ªê D∆Ø**: {balance:.2f} USDT\n\n"
            else:
                summary += f"üí∞ **S·ªê D∆Ø**: ‚ùå L·ªói k·∫øt n·ªëi\n\n"
            
            # Ph·∫ßn 2: Bot h·ªá th·ªëng
            summary += f"ü§ñ **BOT H·ªÜ TH·ªêNG**: {len(self.bots)} bots\n"
            summary += f"   üîç ƒêang t√¨m coin: {searching_bots}\n"
            summary += f"   üü° ƒêang ch·ªù: {waiting_bots}\n" 
            summary += f"   üìà ƒêang trade: {trading_bots}\n\n"
            
            # Ph·∫ßn 3: Chi ti·∫øt t·ª´ng bot
            if bot_details:
                summary += "üìã **CHI TI·∫æT T·ª™NG BOT**:\n"
                for bot in bot_details[:8]:
                    symbol_info = bot['symbol'] if bot['symbol'] != 'ƒêang t√¨m...' else 'üîç ƒêang t√¨m'
                    status_map = {
                        "searching": "üîç T√¨m coin",
                        "waiting": "üü° Ch·ªù t√≠n hi·ªáu", 
                        "open": "üü¢ ƒêang trade"
                    }
                    status = status_map.get(bot['status'], bot['status'])
                    
                    roi_info = f" | üéØ ROI: {bot['roi_trigger']}%" if bot['roi_trigger'] else ""
                    
                    summary += f"   üîπ {bot['bot_id'][:15]}...\n"
                    summary += f"      üìä {symbol_info} | {status}\n"
                    summary += f"      üí∞ ƒêB: {bot['leverage']}x | V·ªën: {bot['percent']}%{roi_info}\n"
                    if bot['tp'] is not None and bot['sl'] is not None:
                        summary += f"      üéØ TP: {bot['tp']}% | üõ°Ô∏è SL: {bot['sl']}%\n"
                    summary += "\n"
                
                if len(bot_details) > 8:
                    summary += f"   ... v√† {len(bot_details) - 8} bot kh√°c\n\n"
            
            return summary
                    
        except Exception as e:
            return f"‚ùå L·ªói th·ªëng k√™: {str(e)}"

    def log(self, message):
        logger.info(f"[SYSTEM] {message}")
        if self.telegram_bot_token and self.telegram_chat_id:
            send_telegram(f"<b>SYSTEM</b>: {message}", 
                         bot_token=self.telegram_bot_token, 
                         default_chat_id=self.telegram_chat_id)

    def send_main_menu(self, chat_id):
        welcome = (
            "ü§ñ <b>BOT GIAO D·ªäCH FUTURES ƒêA LU·ªíNG</b>\n\n"
            "üéØ <b>H·ªÜ TH·ªêNG COIN BI·∫æN ƒê·ªòNG + T√çN HI·ªÜU KH·ªêI L∆Ø·ª¢NG</b>\n\n"
            "üìà <b>C∆† CH·∫æ CH·ªåN COIN:</b>\n"
            "‚Ä¢ T√¨m top 30 coin BI·∫æN ƒê·ªòNG M·∫†NH NH·∫§T 1 gi·ªù\n"
            "‚Ä¢ ƒê√≤n b·∫©y t·ªëi thi·ªÉu 10x\n"
            "‚Ä¢ T·ª± ƒë·ªông ƒë·ªïi coin sau 1 gi·ªù\n\n"
            "üìä <b>C∆† CH·∫æ T√çN HI·ªÜU TO√ÄN TH·ªä TR∆Ø·ªúNG:</b>\n"
            "‚Ä¢ Ph√¢n t√≠ch 100 coin KH·ªêI L∆Ø·ª¢NG CAO nh·∫•t\n"
            "‚Ä¢ So s√°nh 2 n·∫øn 1 PH√öT li√™n ti·∫øp\n"
            "‚Ä¢ N·∫øn xanh tƒÉng ‚â•10% ‚Üí T√çN HI·ªÜU BUY\n"
            "‚Ä¢ N·∫øn ƒë·ªè tƒÉng ‚â•10% ‚Üí T√çN HI·ªÜU SELL\n\n"
            "üîÑ <b>C∆† CH·∫æ M·ªû L·ªÜNH NG∆Ø·ª¢C L·∫†I:</b>\n"
            "‚Ä¢ Sau khi ƒë√≥ng l·ªánh, bot t·ª± ƒë·ªông m·ªü l·ªánh ng∆∞·ª£c l·∫°i\n"
            "‚Ä¢ Gi·ªØ nguy√™n coin, gi·ªØ nguy√™n s·ªë ti·ªÅn ƒë·∫ßu t∆∞\n"
            "‚Ä¢ Ti·∫øp t·ª•c lu√¢n phi√™n BUY/SELL tr√™n c√πng coin\n"
            "‚Ä¢ T·ª± ƒë·ªông ƒë·ªïi coin m·ªõi sau 1 gi·ªù"
        )
        send_telegram(welcome, chat_id, create_main_menu(),
                     bot_token=self.telegram_bot_token, 
                     default_chat_id=self.telegram_chat_id)

    def add_bot(self, symbol, lev, percent, tp, sl, roi_trigger, strategy_type, bot_count=1, **kwargs):
        if sl == 0:
            sl = None
            
        if not self.api_key or not self.api_secret:
            self.log("‚ùå Ch∆∞a thi·∫øt l·∫≠p API Key trong BotManager")
            return False
        
        # Ki·ªÉm tra k·∫øt n·ªëi tr∆∞·ªõc khi t·∫°o bot
        if not self._verify_api_connection():
            self.log("‚ùå KH√îNG TH·ªÇ K·∫æT N·ªêI BINANCE - KH√îNG TH·ªÇ T·∫†O BOT")
            return False
        
        bot_mode = kwargs.get('bot_mode', 'static')
        created_count = 0
        
        for i in range(bot_count):
            try:
                if bot_mode == 'static' and symbol:
                    bot_id = f"{symbol}_{strategy_type}_{i}_{int(time.time())}"
                    
                    if bot_id in self.bots:
                        continue
                    
                    bot_class = GlobalMarketBot
                    
                    if not bot_class:
                        continue
                    
                    bot = bot_class(symbol, lev, percent, tp, sl, roi_trigger, self.ws_manager,
                                  self.api_key, self.api_secret, self.telegram_bot_token, 
                                  self.telegram_chat_id, bot_id=bot_id)
                    
                else:
                    bot_id = f"DYNAMIC_{strategy_type}_{i}_{int(time.time())}"
                    
                    if bot_id in self.bots:
                        continue
                    
                    bot_class = GlobalMarketBot
                    
                    if not bot_class:
                        continue
                    
                    bot = bot_class(None, lev, percent, tp, sl, roi_trigger, self.ws_manager,
                                  self.api_key, self.api_secret, self.telegram_bot_token,
                                  self.telegram_chat_id, bot_id=bot_id)
                
                bot._bot_manager = self
                self.bots[bot_id] = bot
                created_count += 1
                
            except Exception as e:
                self.log(f"‚ùå L·ªói t·∫°o bot {i}: {str(e)}")
                continue
        
        if created_count > 0:
            roi_info = f" | üéØ ROI Trigger: {roi_trigger}%" if roi_trigger else " | üéØ ROI Trigger: T·∫Øt"
            
            success_msg = (
                f"‚úÖ <b>ƒê√É T·∫†O {created_count}/{bot_count} BOT COIN BI·∫æN ƒê·ªòNG</b>\n\n"
                f"üéØ H·ªá th·ªëng: Coin Bi·∫øn ƒê·ªông + T√≠n Hi·ªáu Kh·ªëi L∆∞·ª£ng\n"
                f"üí∞ ƒê√≤n b·∫©y: {lev}x\n"
                f"üìà % S·ªë d∆∞: {percent}%\n"
                f"üéØ TP: {tp}%\n"
                f"üõ°Ô∏è SL: {sl if sl is not None else 'T·∫Øt'}%{roi_info}\n"
                f"‚è∞ Th·ªùi gian: T·ª∞ ƒê·ªòNG ƒê·ªîI COIN SAU 1 GI·ªú\n"
                f"üîß Ch·∫ø ƒë·ªô: {bot_mode}\n"
            )
            
            if bot_mode == 'static' and symbol:
                success_msg += f"üîó Coin: {symbol}\n"
            else:
                success_msg += f"üîó Coin: T·ª± ƒë·ªông t√¨m coin bi·∫øn ƒë·ªông\n"
            
            success_msg += f"\n‚ö° <b>BOT S·∫º T√åM COIN BI·∫æN ƒê·ªòNG M·∫†NH NH·∫§T</b>\n"
            success_msg += f"üìä T√≠n hi·ªáu t·ª´ 100 coin kh·ªëi l∆∞·ª£ng cao\n"
            success_msg += f"üîÑ Sau 1 gi·ªù t·ª± ƒë·ªông ƒë·ªïi coin m·ªõi\n"
            success_msg += f"üìà Lu√¥n trade coin n√≥ng nh·∫•t th·ªã tr∆∞·ªùng"
            
            self.log(success_msg)
            return True
        else:
            self.log("‚ùå Kh√¥ng th·ªÉ t·∫°o bot n√†o")
            return False

    def stop_bot(self, bot_id):
        bot = self.bots.get(bot_id)
        if bot:
            bot.stop()
            del self.bots[bot_id]
            self.log(f"‚õî ƒê√£ d·ª´ng bot {bot_id}")
            return True
        return False

    def stop_all(self):
        self.log("‚õî ƒêang d·ª´ng t·∫•t c·∫£ bot...")
        for bot_id in list(self.bots.keys()):
            self.stop_bot(bot_id)
        self.ws_manager.stop()
        self.running = False
        self.log("üî¥ H·ªá th·ªëng ƒë√£ d·ª´ng")

    def _telegram_listener(self):
        last_update_id = 0
        
        while self.running and self.telegram_bot_token:
            try:
                url = f"https://api.telegram.org/bot{self.telegram_bot_token}/getUpdates?offset={last_update_id+1}&timeout=30"
                response = requests.get(url, timeout=35)
                
                if response.status_code == 200:
                    data = response.json()
                    if data.get('ok'):
                        for update in data['result']:
                            update_id = update['update_id']
                            message = update.get('message', {})
                            chat_id = str(message.get('chat', {}).get('id'))
                            text = message.get('text', '').strip()
                            
                            if chat_id != self.telegram_chat_id:
                                continue
                            
                            if update_id > last_update_id:
                                last_update_id = update_id
                            
                            self._handle_telegram_message(chat_id, text)
                elif response.status_code == 409:
                    logger.error("L·ªói xung ƒë·ªôt Telegram")
                    time.sleep(60)
                else:
                    time.sleep(10)
                
            except Exception as e:
                logger.error(f"L·ªói Telegram listener: {str(e)}")
                time.sleep(10)

    def _handle_telegram_message(self, chat_id, text):
        user_state = self.user_states.get(chat_id, {})
        current_step = user_state.get('step')
        
        # X·ª≠ l√Ω c√°c b∆∞·ªõc t·∫°o bot (gi·ªØ nguy√™n t·ª´ code g·ªëc)
        # ... (gi·ªØ nguy√™n ph·∫ßn x·ª≠ l√Ω step t·ª´ code g·ªëc)
        
        if text == "‚ûï Th√™m Bot":
            self.user_states[chat_id] = {'step': 'waiting_bot_count'}
            balance = get_balance(self.api_key, self.api_secret)
            if balance is None:
                send_telegram("‚ùå <b>L·ªñI K·∫æT N·ªêI BINANCE</b>\nVui l√≤ng ki·ªÉm tra API Key v√† k·∫øt n·ªëi m·∫°ng!", chat_id,
                            bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
                return
            
            send_telegram(
                f"üéØ <b>CH·ªåN S·ªê L∆Ø·ª¢NG BOT ƒê·ªòC L·∫¨P</b>\n\n"
                f"üí∞ S·ªë d∆∞ hi·ªán c√≥: <b>{balance:.2f} USDT</b>\n\n"
                f"Ch·ªçn s·ªë l∆∞·ª£ng bot ƒë·ªôc l·∫≠p b·∫°n mu·ªën t·∫°o:",
                chat_id,
                create_bot_count_keyboard(),
                self.telegram_bot_token, self.telegram_chat_id
            )
        
        elif text == "üìä Danh s√°ch Bot":
            if not self.bots:
                send_telegram("ü§ñ Kh√¥ng c√≥ bot n√†o ƒëang ch·∫°y", chat_id,
                            bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
            else:
                message = "ü§ñ <b>DANH S√ÅCH BOT ƒê·ªòC L·∫¨P ƒêANG CH·∫†Y</b>\n\n"
                
                searching_bots = 0
                trading_bots = 0
                
                for bot_id, bot in self.bots.items():
                    if bot.status == "searching":
                        status = "üîç ƒêang t√¨m coin"
                        searching_bots += 1
                    elif bot.status == "waiting":
                        status = "üü° Ch·ªù t√≠n hi·ªáu"
                        trading_bots += 1
                    elif bot.status == "open":
                        status = "üü¢ ƒêang trade"
                        trading_bots += 1
                    else:
                        status = "‚ö™ Unknown"
                    
                    roi_info = f" | üéØ ROI: {bot.roi_trigger}%" if bot.roi_trigger else ""
                    symbol_info = bot.symbol if bot.symbol else "ƒêang t√¨m..."
                    message += f"üîπ {bot_id}\n"
                    message += f"   üìä {symbol_info} | {status}\n"
                    message += f"   üí∞ ƒêB: {bot.lev}x | V·ªën: {bot.percent}%{roi_info}\n\n"
                
                message += f"üìà T·ªïng s·ªë: {len(self.bots)} bot\n"
                message += f"üîç ƒêang t√¨m coin: {searching_bots} bot\n"
                message += f"üìä ƒêang trade: {trading_bots} bot"
                
                send_telegram(message, chat_id,
                            bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
        
        elif text == "üìä Th·ªëng k√™":
            summary = self.get_position_summary()
            send_telegram(summary, chat_id,
                         bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
        
        elif text == "üéØ Chi·∫øn l∆∞·ª£c":
            strategy_info = (
                "üéØ <b>H·ªÜ TH·ªêNG COIN BI·∫æN ƒê·ªòNG + T√çN HI·ªÜU KH·ªêI L∆Ø·ª¢NG</b>\n\n"
                
                "üìä <b>Nguy√™n t·∫Øc ch·ªçn COIN:</b>\n"
                "‚Ä¢ T√¨m top 30 coin BI·∫æN ƒê·ªòNG M·∫†NH NH·∫§T 1 gi·ªù\n"
                "‚Ä¢ ƒê√≤n b·∫©y t·ªëi thi·ªÉu 10x\n"
                "‚Ä¢ T·ª∞ ƒê·ªòNG ƒê·ªîI COIN SAU 1 GI·ªú\n\n"
                
                "üìà <b>Nguy√™n t·∫Øc ch·ªçn H∆Ø·ªöNG:</b>\n"
                "‚Ä¢ Ph√¢n t√≠ch 100 coin KH·ªêI L∆Ø·ª¢NG CAO nh·∫•t\n"
                "‚Ä¢ So s√°nh 2 n·∫øn 1 PH√öT li√™n ti·∫øp\n"
                "‚Ä¢ N·∫øn xanh tƒÉng ‚â•10% ‚Üí T√≠n hi·ªáu BUY\n"
                "‚Ä¢ N·∫øn ƒë·ªè tƒÉng ‚â•10% ‚Üí T√≠n hi·ªáu SELL\n"
                "‚Ä¢ C√≤n l·∫°i ‚Üí B·ªé QUA\n\n"
                
                "üîÑ <b>C∆° ch·∫ø m·ªü l·ªánh ng∆∞·ª£c l·∫°i:</b>\n"
                "‚Ä¢ Sau khi ƒë√≥ng l·ªánh, bot t·ª± ƒë·ªông m·ªü l·ªánh ng∆∞·ª£c l·∫°i\n"
                "‚Ä¢ Gi·ªØ nguy√™n coin, gi·ªØ nguy√™n s·ªë ti·ªÅn ƒë·∫ßu t∆∞\n"
                "‚Ä¢ Ti·∫øp t·ª•c lu√¢n phi√™n BUY/SELL tr√™n c√πng coin\n"
                "‚Ä¢ T·ª± ƒë·ªông ƒë·ªïi coin m·ªõi sau 1 gi·ªù\n\n"
                
                "‚ö° <b>L·ªçc coin bi·∫øn ƒë·ªông:</b>\n"
                "‚Ä¢ Top 30 coin bi·∫øn ƒë·ªông m·∫°nh nh·∫•t 1h\n"
                "‚Ä¢ ƒê√≤n b·∫©y t·ªëi thi·ªÉu 10x\n"
                "‚Ä¢ Ki·ªÉm tra t√≠nh kh·∫£ d·ª•ng\n"
                "‚Ä¢ Tr√°nh tr√πng l·∫∑p v·ªõi bot kh√°c"
            )
            send_telegram(strategy_info, chat_id,
                        bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
        
        # ... (gi·ªØ nguy√™n c√°c ph·∫ßn x·ª≠ l√Ω kh√°c t·ª´ code g·ªëc)

    def _continue_bot_creation(self, chat_id, user_state):
        strategy = user_state.get('strategy')
        bot_mode = user_state.get('bot_mode', 'static')
        bot_count = user_state.get('bot_count', 1)
        roi_trigger = user_state.get('roi_trigger')
        
        roi_info = f" | üéØ ROI Trigger: {roi_trigger}%" if roi_trigger else ""
        
        if bot_mode == 'static':
            user_state['step'] = 'waiting_symbol'
            send_telegram(
                f"üéØ <b>BOT Tƒ®NH: {strategy}</b>\n"
                f"ü§ñ S·ªë l∆∞·ª£ng: {bot_count} bot ƒë·ªôc l·∫≠p{roi_info}\n\n"
                f"Ch·ªçn c·∫∑p coin:",
                chat_id,
                create_symbols_keyboard(strategy),
                self.telegram_bot_token, self.telegram_chat_id
            )
        else:
            user_state['step'] = 'waiting_leverage'
            send_telegram(
                f"üéØ <b>BOT ƒê·ªòNG ƒêA LU·ªíNG - COIN BI·∫æN ƒê·ªòNG</b>\n"
                f"ü§ñ S·ªë l∆∞·ª£ng: {bot_count} bot ƒë·ªôc l·∫≠p{roi_info}\n\n"
                f"Ch·ªçn ƒë√≤n b·∫©y:",
                chat_id,
                create_leverage_keyboard(strategy),
                self.telegram_bot_token, self.telegram_chat_id
            )

# ========== KH·ªûI T·∫†O GLOBAL INSTANCES ==========
coin_manager = CoinManager()
